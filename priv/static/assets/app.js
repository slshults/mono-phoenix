(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x2 = 0; x2 < vendors.length && !window2.requestAnimationFrame; ++x2) {
            window2.requestAnimationFrame = window2[vendors[x2] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x2] + "CancelAnimationFrame"] || window2[vendors[x2] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, progressTimerId, fadeTimerId, currentProgress, showing, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function() {
            if (showing)
              return;
            showing = true;
            if (fadeTimerId !== null)
              window2.cancelAnimationFrame(fadeTimerId);
            if (!canvas)
              createCanvas();
            canvas.style.opacity = 1;
            canvas.style.display = "block";
            topbar2.progress(0);
            if (options.autoRun) {
              (function loop() {
                progressTimerId = window2.requestAnimationFrame(loop);
                topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
              })();
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // js/dark_mode.js
  function setDarkModePreference(isDarkMode) {
    localStorage.setItem("darkMode", isDarkMode ? "true" : "false");
    document.cookie = "darkModePreference=" + (isDarkMode ? "true" : "false") + ";path=/";
    var bodyElement = document.body;
    var lightModeToggle = document.getElementById("light-mode-toggle");
    var darkModeToggle = document.getElementById("dark-mode-toggle");
    if (isDarkMode) {
      bodyElement.classList.add("dark-mode");
      lightModeToggle.style.display = "none";
      darkModeToggle.style.display = "block";
    } else {
      bodyElement.classList.remove("dark-mode");
      lightModeToggle.style.display = "block";
      darkModeToggle.style.display = "none";
    }
  }
  function toggleDarkMode() {
    var isDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkModePreference(!isDarkMode);
  }
  var darkModeIcon = document.getElementById("dark-mode-icon");
  if (darkModeIcon) {
    darkModeIcon.addEventListener("click", toggleDarkMode);
  }
  var initialDarkMode = localStorage.getItem("darkMode") === "true";
  setDarkModePreference(initialDarkMode);
  window.getCookie = function(name) {
    const value = "; " + document.cookie;
    const parts = value.split("; " + name + "=");
    if (parts.length === 2)
      return parts.pop().split(";").shift();
    return null;
  };

  // ../node_modules/posthog-js/dist/es.js
  function e(e5, t2) {
    var n2 = Object.keys(e5);
    if (Object.getOwnPropertySymbols) {
      var i2 = Object.getOwnPropertySymbols(e5);
      t2 && (i2 = i2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e5, t3).enumerable;
      })), n2.push.apply(n2, i2);
    }
    return n2;
  }
  function t(t2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var i2 = arguments[n2] != null ? arguments[n2] : {};
      n2 % 2 ? e(Object(i2), true).forEach(function(e5) {
        o(t2, e5, i2[e5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(i2)) : e(Object(i2)).forEach(function(e5) {
        Object.defineProperty(t2, e5, Object.getOwnPropertyDescriptor(i2, e5));
      });
    }
    return t2;
  }
  function n(e5) {
    return n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e6) {
      return typeof e6;
    } : function(e6) {
      return e6 && typeof Symbol == "function" && e6.constructor === Symbol && e6 !== Symbol.prototype ? "symbol" : typeof e6;
    }, n(e5);
  }
  function i(e5, t2) {
    if (!(e5 instanceof t2))
      throw new TypeError("Cannot call a class as a function");
  }
  function r(e5, t2) {
    for (var n2 = 0; n2 < t2.length; n2++) {
      var i2 = t2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e5, i2.key, i2);
    }
  }
  function s(e5, t2, n2) {
    return t2 && r(e5.prototype, t2), n2 && r(e5, n2), Object.defineProperty(e5, "prototype", { writable: false }), e5;
  }
  function o(e5, t2, n2) {
    return t2 in e5 ? Object.defineProperty(e5, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : e5[t2] = n2, e5;
  }
  function a(e5, t2) {
    if (e5 == null)
      return {};
    var n2, i2, r2 = function(e6, t3) {
      if (e6 == null)
        return {};
      var n3, i3, r3 = {}, s3 = Object.keys(e6);
      for (i3 = 0; i3 < s3.length; i3++)
        n3 = s3[i3], t3.indexOf(n3) >= 0 || (r3[n3] = e6[n3]);
      return r3;
    }(e5, t2);
    if (Object.getOwnPropertySymbols) {
      var s2 = Object.getOwnPropertySymbols(e5);
      for (i2 = 0; i2 < s2.length; i2++)
        n2 = s2[i2], t2.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(e5, n2) && (r2[n2] = e5[n2]);
    }
    return r2;
  }
  function u(e5, t2) {
    return function(e6) {
      if (Array.isArray(e6))
        return e6;
    }(e5) || function(e6, t3) {
      var n2 = e6 == null ? null : typeof Symbol != "undefined" && e6[Symbol.iterator] || e6["@@iterator"];
      if (n2 == null)
        return;
      var i2, r2, s2 = [], o2 = true, a2 = false;
      try {
        for (n2 = n2.call(e6); !(o2 = (i2 = n2.next()).done) && (s2.push(i2.value), !t3 || s2.length !== t3); o2 = true)
          ;
      } catch (e7) {
        a2 = true, r2 = e7;
      } finally {
        try {
          o2 || n2.return == null || n2.return();
        } finally {
          if (a2)
            throw r2;
        }
      }
      return s2;
    }(e5, t2) || c(e5, t2) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function l(e5) {
    return function(e6) {
      if (Array.isArray(e6))
        return d(e6);
    }(e5) || function(e6) {
      if (typeof Symbol != "undefined" && e6[Symbol.iterator] != null || e6["@@iterator"] != null)
        return Array.from(e6);
    }(e5) || c(e5) || function() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function c(e5, t2) {
    if (e5) {
      if (typeof e5 == "string")
        return d(e5, t2);
      var n2 = Object.prototype.toString.call(e5).slice(8, -1);
      return n2 === "Object" && e5.constructor && (n2 = e5.constructor.name), n2 === "Map" || n2 === "Set" ? Array.from(e5) : n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? d(e5, t2) : void 0;
    }
  }
  function d(e5, t2) {
    (t2 == null || t2 > e5.length) && (t2 = e5.length);
    for (var n2 = 0, i2 = new Array(t2); n2 < t2; n2++)
      i2[n2] = e5[n2];
    return i2;
  }
  function h(e5, t2) {
    var n2 = typeof Symbol != "undefined" && e5[Symbol.iterator] || e5["@@iterator"];
    if (!n2) {
      if (Array.isArray(e5) || (n2 = c(e5)) || t2 && e5 && typeof e5.length == "number") {
        n2 && (e5 = n2);
        var i2 = 0, r2 = function() {
        };
        return { s: r2, n: function() {
          return i2 >= e5.length ? { done: true } : { done: false, value: e5[i2++] };
        }, e: function(e6) {
          throw e6;
        }, f: r2 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var s2, o2 = true, a2 = false;
    return { s: function() {
      n2 = n2.call(e5);
    }, n: function() {
      var e6 = n2.next();
      return o2 = e6.done, e6;
    }, e: function(e6) {
      a2 = true, s2 = e6;
    }, f: function() {
      try {
        o2 || n2.return == null || n2.return();
      } finally {
        if (a2)
          throw s2;
      }
    } };
  }
  var f = { DEBUG: false, LIB_VERSION: "1.113.2" };
  var p = Array.isArray;
  var g = Object.prototype;
  var v = g.hasOwnProperty;
  var _ = g.toString;
  var m = p || function(e5) {
    return _.call(e5) === "[object Array]";
  };
  var y = function(e5) {
    return typeof e5 == "function";
  };
  var b = function(e5) {
    return e5 === Object(e5) && !m(e5);
  };
  var w = function(e5) {
    return e5 === void 0;
  };
  var k = function(e5) {
    return _.call(e5) == "[object String]";
  };
  var S = function(e5) {
    return e5 === null;
  };
  var F = function(e5) {
    return w(e5) || S(e5);
  };
  var R = function(e5) {
    return _.call(e5) == "[object Number]";
  };
  var x = function(e5) {
    return _.call(e5) === "[object Boolean]";
  };
  var P = function(e5) {
    return e5 instanceof FormData;
  };
  var E = typeof window != "undefined" ? window : void 0;
  var I = typeof globalThis != "undefined" ? globalThis : E;
  var C = Array.prototype;
  var $ = C.forEach;
  var T = C.indexOf;
  var O = I == null ? void 0 : I.navigator;
  var A = I == null ? void 0 : I.document;
  var q = I == null ? void 0 : I.location;
  var M = I == null ? void 0 : I.fetch;
  var D = I != null && I.XMLHttpRequest && "withCredentials" in new I.XMLHttpRequest() ? I.XMLHttpRequest : void 0;
  var L = I == null ? void 0 : I.AbortController;
  var N = O == null ? void 0 : O.userAgent;
  var B = E != null ? E : {};
  var H = "[PostHog.js]";
  var j = { _log: function(e5) {
    if (E && (f.DEBUG || B.POSTHOG_DEBUG) && !w(E.console) && E.console) {
      for (var t2 = ("__rrweb_original__" in E.console[e5]) ? E.console[e5].__rrweb_original__ : E.console[e5], n2 = arguments.length, i2 = new Array(n2 > 1 ? n2 - 1 : 0), r2 = 1; r2 < n2; r2++)
        i2[r2 - 1] = arguments[r2];
      t2.apply(void 0, [H].concat(i2));
    }
  }, info: function() {
    for (var e5 = arguments.length, t2 = new Array(e5), n2 = 0; n2 < e5; n2++)
      t2[n2] = arguments[n2];
    j._log.apply(j, ["log"].concat(t2));
  }, warn: function() {
    for (var e5 = arguments.length, t2 = new Array(e5), n2 = 0; n2 < e5; n2++)
      t2[n2] = arguments[n2];
    j._log.apply(j, ["warn"].concat(t2));
  }, error: function() {
    for (var e5 = arguments.length, t2 = new Array(e5), n2 = 0; n2 < e5; n2++)
      t2[n2] = arguments[n2];
    j._log.apply(j, ["error"].concat(t2));
  }, critical: function() {
    for (var e5, t2 = arguments.length, n2 = new Array(t2), i2 = 0; i2 < t2; i2++)
      n2[i2] = arguments[i2];
    (e5 = console).error.apply(e5, [H].concat(n2));
  }, uninitializedWarning: function(e5) {
    j.error("You must initialize PostHog before calling ".concat(e5));
  } };
  var U = {};
  var V = function(e5) {
    return e5.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  };
  function W(e5, t2, n2) {
    if (m(e5)) {
      if ($ && e5.forEach === $)
        e5.forEach(t2, n2);
      else if ("length" in e5 && e5.length === +e5.length) {
        for (var i2 = 0, r2 = e5.length; i2 < r2; i2++)
          if (i2 in e5 && t2.call(n2, e5[i2], i2) === U)
            return;
      }
    }
  }
  function z(e5, t2, n2) {
    if (!F(e5)) {
      if (m(e5))
        return W(e5, t2, n2);
      if (P(e5)) {
        var i2, r2 = h(e5.entries());
        try {
          for (r2.s(); !(i2 = r2.n()).done; ) {
            var s2 = i2.value;
            if (t2.call(n2, s2[1], s2[0]) === U)
              return;
          }
        } catch (e6) {
          r2.e(e6);
        } finally {
          r2.f();
        }
      } else
        for (var o2 in e5)
          if (v.call(e5, o2) && t2.call(n2, e5[o2], o2) === U)
            return;
    }
  }
  var G = function(e5) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), i2 = 1; i2 < t2; i2++)
      n2[i2 - 1] = arguments[i2];
    return W(n2, function(t3) {
      for (var n3 in t3)
        t3[n3] !== void 0 && (e5[n3] = t3[n3]);
    }), e5;
  };
  function Q(e5, t2) {
    return e5.indexOf(t2) !== -1;
  }
  function Y(e5) {
    for (var t2 = Object.keys(e5), n2 = t2.length, i2 = new Array(n2); n2--; )
      i2[n2] = [t2[n2], e5[t2[n2]]];
    return i2;
  }
  var J = function() {
    return Date.now = Date.now || function() {
      return +new Date();
    }, Date.now();
  };
  var K = function(e5) {
    try {
      return e5();
    } catch (e6) {
      return;
    }
  };
  var X = function(e5) {
    return function() {
      try {
        for (var t2 = arguments.length, n2 = new Array(t2), i2 = 0; i2 < t2; i2++)
          n2[i2] = arguments[i2];
        return e5.apply(this, n2);
      } catch (e6) {
        j.critical("Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A."), j.critical(e6);
      }
    };
  };
  var Z = function(e5) {
    var t2 = {};
    return z(e5, function(e6, n2) {
      k(e6) && e6.length > 0 && (t2[n2] = e6);
    }), t2;
  };
  function ee(e5, t2) {
    return n2 = e5, i2 = function(e6) {
      return k(e6) && !S(t2) ? e6.slice(0, t2) : e6;
    }, r2 = /* @__PURE__ */ new Set(), function e6(t3, n3) {
      return t3 !== Object(t3) ? i2 ? i2(t3, n3) : t3 : r2.has(t3) ? void 0 : (r2.add(t3), m(t3) ? (s2 = [], W(t3, function(t4) {
        s2.push(e6(t4));
      })) : (s2 = {}, z(t3, function(t4, n4) {
        r2.has(t4) || (s2[n4] = e6(t4, n4));
      })), s2);
      var s2;
    }(n2);
    var n2, i2, r2;
  }
  function te(e5) {
    var t2, n2, i2, r2, s2, o2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", a2 = 0, u2 = 0, l2 = "", c2 = [];
    if (!e5)
      return e5;
    e5 = ne(e5);
    do {
      t2 = (s2 = e5.charCodeAt(a2++) << 16 | e5.charCodeAt(a2++) << 8 | e5.charCodeAt(a2++)) >> 18 & 63, n2 = s2 >> 12 & 63, i2 = s2 >> 6 & 63, r2 = 63 & s2, c2[u2++] = o2.charAt(t2) + o2.charAt(n2) + o2.charAt(i2) + o2.charAt(r2);
    } while (a2 < e5.length);
    switch (l2 = c2.join(""), e5.length % 3) {
      case 1:
        l2 = l2.slice(0, -2) + "==";
        break;
      case 2:
        l2 = l2.slice(0, -1) + "=";
    }
    return l2;
  }
  var ne = function(e5) {
    var t2, n2, i2, r2, s2 = "";
    for (t2 = n2 = 0, i2 = (e5 = (e5 + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length, r2 = 0; r2 < i2; r2++) {
      var o2 = e5.charCodeAt(r2), a2 = null;
      o2 < 128 ? n2++ : a2 = o2 > 127 && o2 < 2048 ? String.fromCharCode(o2 >> 6 | 192, 63 & o2 | 128) : String.fromCharCode(o2 >> 12 | 224, o2 >> 6 & 63 | 128, 63 & o2 | 128), S(a2) || (n2 > t2 && (s2 += e5.substring(t2, n2)), s2 += a2, t2 = n2 = r2 + 1);
    }
    return n2 > t2 && (s2 += e5.substring(t2, e5.length)), s2;
  };
  var ie = function() {
    function e5(t2) {
      return t2 && (t2.preventDefault = e5.preventDefault, t2.stopPropagation = e5.stopPropagation), t2;
    }
    return e5.preventDefault = function() {
      this.returnValue = false;
    }, e5.stopPropagation = function() {
      this.cancelBubble = true;
    }, function(t2, n2, i2, r2, s2) {
      if (t2)
        if (t2.addEventListener && !r2)
          t2.addEventListener(n2, i2, !!s2);
        else {
          var o2 = "on" + n2, a2 = t2[o2];
          t2[o2] = function(t3, n3, i3) {
            return function(r3) {
              if (r3 = r3 || e5(E == null ? void 0 : E.event)) {
                var s3, o3 = true;
                y(i3) && (s3 = i3(r3));
                var a3 = n3.call(t3, r3);
                return s3 !== false && a3 !== false || (o3 = false), o3;
              }
            };
          }(t2, i2, a2);
        }
      else
        j.error("No valid element provided to register_event");
    };
  }();
  function re(e5, t2) {
    var n2 = function() {
      if (!A)
        return t2("document not found");
      var n3 = A.createElement("script");
      n3.type = "text/javascript", n3.src = e5, n3.onload = function(e6) {
        return t2(void 0, e6);
      }, n3.onerror = function(e6) {
        return t2(e6);
      };
      var i2, r2 = A.querySelectorAll("body > script");
      r2.length > 0 ? (i2 = r2[0].parentNode) === null || i2 === void 0 || i2.insertBefore(n3, r2[0]) : A.body.appendChild(n3);
    };
    A != null && A.body ? n2() : A == null || A.addEventListener("DOMContentLoaded", n2);
  }
  function se(e5) {
    return e5 ? V(e5).split(/\s+/) : [];
  }
  function oe(e5) {
    var t2 = "";
    switch (n(e5.className)) {
      case "string":
        t2 = e5.className;
        break;
      case "object":
        t2 = ("baseVal" in e5.className ? e5.className.baseVal : null) || e5.getAttribute("class") || "";
        break;
      default:
        t2 = "";
    }
    return se(t2);
  }
  function ae(e5) {
    return F(e5) ? null : V(e5).split(/(\s+)/).filter(function(e6) {
      return Fe(e6);
    }).join("").replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255);
  }
  function ue(e5) {
    var t2 = "";
    return ve(e5) && !_e(e5) && e5.childNodes && e5.childNodes.length && z(e5.childNodes, function(e6) {
      var n2;
      de(e6) && e6.textContent && (t2 += (n2 = ae(e6.textContent)) !== null && n2 !== void 0 ? n2 : "");
    }), V(t2);
  }
  function le(e5) {
    return !!e5 && e5.nodeType === 1;
  }
  function ce(e5, t2) {
    return !!e5 && !!e5.tagName && e5.tagName.toLowerCase() === t2.toLowerCase();
  }
  function de(e5) {
    return !!e5 && e5.nodeType === 3;
  }
  function he(e5) {
    return !!e5 && e5.nodeType === 11;
  }
  var fe = ["a", "button", "form", "input", "select", "textarea", "label"];
  function pe(e5) {
    var t2 = e5.parentNode;
    return !(!t2 || !le(t2)) && t2;
  }
  function ge(e5, t2) {
    var i2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0, r2 = arguments.length > 3 ? arguments[3] : void 0, s2 = arguments.length > 4 ? arguments[4] : void 0;
    if (!E || !e5 || ce(e5, "html") || !le(e5))
      return false;
    if (i2 != null && i2.url_allowlist) {
      var o2 = E.location.href, a2 = i2.url_allowlist;
      if (a2 && !a2.some(function(e6) {
        return o2.match(e6);
      }))
        return false;
    }
    if (i2 != null && i2.dom_event_allowlist) {
      var u2 = i2.dom_event_allowlist;
      if (u2 && !u2.some(function(e6) {
        return t2.type === e6;
      }))
        return false;
    }
    for (var l2 = false, c2 = [e5], d2 = true, f2 = e5; f2.parentNode && !ce(f2, "body"); )
      if (he(f2.parentNode))
        c2.push(f2.parentNode.host), f2 = f2.parentNode.host;
      else {
        if (!(d2 = pe(f2)))
          break;
        if (r2 || fe.indexOf(d2.tagName.toLowerCase()) > -1)
          l2 = true;
        else {
          var p2 = E.getComputedStyle(d2);
          p2 && p2.getPropertyValue("cursor") === "pointer" && (l2 = true);
        }
        c2.push(d2), f2 = d2;
      }
    if (!function(e6, t3) {
      var i3 = t3 == null ? void 0 : t3.element_allowlist;
      if (w(i3))
        return true;
      var r3, s3 = h(e6);
      try {
        var o3 = function() {
          var e7 = r3.value;
          if (i3.some(function(t4) {
            return e7.tagName.toLowerCase() === t4;
          }))
            return { v: true };
        };
        for (s3.s(); !(r3 = s3.n()).done; ) {
          var a3 = o3();
          if (n(a3) === "object")
            return a3.v;
        }
      } catch (e7) {
        s3.e(e7);
      } finally {
        s3.f();
      }
      return false;
    }(c2, i2))
      return false;
    if (!function(e6, t3) {
      var i3 = t3 == null ? void 0 : t3.css_selector_allowlist;
      if (w(i3))
        return true;
      var r3, s3 = h(e6);
      try {
        var o3 = function() {
          var e7 = r3.value;
          if (i3.some(function(t4) {
            return e7.matches(t4);
          }))
            return { v: true };
        };
        for (s3.s(); !(r3 = s3.n()).done; ) {
          var a3 = o3();
          if (n(a3) === "object")
            return a3.v;
        }
      } catch (e7) {
        s3.e(e7);
      } finally {
        s3.f();
      }
      return false;
    }(c2, i2))
      return false;
    var g2 = E.getComputedStyle(e5);
    if (g2 && g2.getPropertyValue("cursor") === "pointer" && t2.type === "click")
      return true;
    var v2 = e5.tagName.toLowerCase();
    switch (v2) {
      case "html":
        return false;
      case "form":
        return (s2 || ["submit"]).indexOf(t2.type) >= 0;
      case "input":
      case "select":
      case "textarea":
        return (s2 || ["change", "click"]).indexOf(t2.type) >= 0;
      default:
        return l2 ? (s2 || ["click"]).indexOf(t2.type) >= 0 : (s2 || ["click"]).indexOf(t2.type) >= 0 && (fe.indexOf(v2) > -1 || e5.getAttribute("contenteditable") === "true");
    }
  }
  function ve(e5) {
    for (var t2 = e5; t2.parentNode && !ce(t2, "body"); t2 = t2.parentNode) {
      var n2 = oe(t2);
      if (Q(n2, "ph-sensitive") || Q(n2, "ph-no-capture"))
        return false;
    }
    if (Q(oe(e5), "ph-include"))
      return true;
    var i2 = e5.type || "";
    if (k(i2))
      switch (i2.toLowerCase()) {
        case "hidden":
        case "password":
          return false;
      }
    var r2 = e5.name || e5.id || "";
    if (k(r2)) {
      if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(r2.replace(/[^a-zA-Z0-9]/g, "")))
        return false;
    }
    return true;
  }
  function _e(e5) {
    return !!(ce(e5, "input") && !["button", "checkbox", "submit", "reset"].includes(e5.type) || ce(e5, "select") || ce(e5, "textarea") || e5.getAttribute("contenteditable") === "true");
  }
  var me = "(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})";
  var ye = new RegExp("^(?:".concat(me, ")$"));
  var be = new RegExp(me);
  var we = "\\d{3}-?\\d{2}-?\\d{4}";
  var ke = new RegExp("^(".concat(we, ")$"));
  var Se = new RegExp("(".concat(we, ")"));
  function Fe(e5) {
    var t2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
    if (F(e5))
      return false;
    if (k(e5)) {
      if (e5 = V(e5), (t2 ? ye : be).test((e5 || "").replace(/[- ]/g, "")))
        return false;
      if ((t2 ? ke : Se).test(e5))
        return false;
    }
    return true;
  }
  function Re(e5) {
    var t2 = ue(e5);
    return Fe(t2 = "".concat(t2, " ").concat(xe(e5)).trim()) ? t2 : "";
  }
  function xe(e5) {
    var t2 = "";
    return e5 && e5.childNodes && e5.childNodes.length && z(e5.childNodes, function(e6) {
      var n2;
      if (e6 && ((n2 = e6.tagName) === null || n2 === void 0 ? void 0 : n2.toLowerCase()) === "span")
        try {
          var i2 = ue(e6);
          t2 = "".concat(t2, " ").concat(i2).trim(), e6.childNodes && e6.childNodes.length && (t2 = "".concat(t2, " ").concat(xe(e6)).trim());
        } catch (e7) {
          j.error(e7);
        }
    }), t2;
  }
  function Pe(e5) {
    return function(e6) {
      var n2 = e6.map(function(e7) {
        var n3, i2, r2 = "";
        if (e7.tag_name && (r2 += e7.tag_name), e7.attr_class) {
          e7.attr_class.sort();
          var s2, o2 = h(e7.attr_class);
          try {
            for (o2.s(); !(s2 = o2.n()).done; ) {
              var a2 = s2.value;
              r2 += ".".concat(a2.replace(/"/g, ""));
            }
          } catch (e8) {
            o2.e(e8);
          } finally {
            o2.f();
          }
        }
        var l2 = t(t(t(t({}, e7.text ? { text: e7.text } : {}), {}, { "nth-child": (n3 = e7.nth_child) !== null && n3 !== void 0 ? n3 : 0, "nth-of-type": (i2 = e7.nth_of_type) !== null && i2 !== void 0 ? i2 : 0 }, e7.href ? { href: e7.href } : {}), e7.attr_id ? { attr_id: e7.attr_id } : {}), e7.attributes), c2 = {};
        return Y(l2).sort(function(e8, t2) {
          var n4 = u(e8, 1)[0], i3 = u(t2, 1)[0];
          return n4.localeCompare(i3);
        }).forEach(function(e8) {
          var t2 = u(e8, 2), n4 = t2[0], i3 = t2[1];
          return c2[Ee(n4.toString())] = Ee(i3.toString());
        }), r2 += ":", r2 += Y(l2).map(function(e8) {
          var t2 = u(e8, 2), n4 = t2[0], i3 = t2[1];
          return "".concat(n4, '="').concat(i3, '"');
        }).join("");
      });
      return n2.join(";");
    }(function(e6) {
      return e6.map(function(e7) {
        var t2, n2, i2 = { text: (t2 = e7.$el_text) === null || t2 === void 0 ? void 0 : t2.slice(0, 400), tag_name: e7.tag_name, href: (n2 = e7.attr__href) === null || n2 === void 0 ? void 0 : n2.slice(0, 2048), attr_class: Ie(e7), attr_id: e7.attr__id, nth_child: e7.nth_child, nth_of_type: e7.nth_of_type, attributes: {} };
        return Y(e7).filter(function(e8) {
          return u(e8, 1)[0].indexOf("attr__") === 0;
        }).forEach(function(e8) {
          var t3 = u(e8, 2), n3 = t3[0], r2 = t3[1];
          return i2.attributes[n3] = r2;
        }), i2;
      });
    }(e5));
  }
  function Ee(e5) {
    return e5.replace(/"|\\"/g, '\\"');
  }
  function Ie(e5) {
    var t2 = e5.attr__class;
    return t2 ? m(t2) ? t2 : se(t2) : void 0;
  }
  var Ce = function() {
    function e5(t2) {
      i(this, e5), this.clicks = [], this.enabled = t2;
    }
    return s(e5, [{ key: "isRageClick", value: function(e6, t2, n2) {
      if (!this.enabled)
        return false;
      var i2 = this.clicks[this.clicks.length - 1];
      if (i2 && Math.abs(e6 - i2.x) + Math.abs(t2 - i2.y) < 30 && n2 - i2.timestamp < 1e3) {
        if (this.clicks.push({ x: e6, y: t2, timestamp: n2 }), this.clicks.length === 3)
          return true;
      } else
        this.clicks = [{ x: e6, y: t2, timestamp: n2 }];
      return false;
    } }]), e5;
  }();
  var $e = "$people_distinct_id";
  var Te = "__alias";
  var Oe = "__timers";
  var Ae = "$autocapture_disabled_server_side";
  var qe = "$session_recording_enabled_server_side";
  var Me = "$console_log_recording_enabled_server_side";
  var De = "$session_recording_recorder_version_server_side";
  var Le = "$session_recording_network_payload_capture";
  var Ne = "$session_recording_canvas_recording";
  var Be = "$sesid";
  var He = "$session_is_sampled";
  var je = "$enabled_feature_flags";
  var Ue = "$early_access_features";
  var Ve = "$stored_person_properties";
  var We = "$stored_group_properties";
  var ze = "$surveys";
  var Ge = "$flag_call_reported";
  var Qe = "$user_state";
  var Ye = "$posthog_quota_limited";
  var Je = "$client_session_props";
  var Ke = [$e, Te, "__cmpns", Oe, qe, Be, je, Qe, Ye, Ue, We, Ve, ze, Ge, Je];
  var Xe = "$copy_autocapture";
  function Ze(e5, t2) {
    return t2.length > e5 ? t2.slice(0, e5) + "..." : t2;
  }
  var et;
  var tt = { _initializedTokens: [], _isDisabledServerSide: null, _isAutocaptureEnabled: false, _setIsAutocaptureEnabled: function(e5) {
    var t2, n2 = S(this._isDisabledServerSide) ? !((t2 = e5.persistence) === null || t2 === void 0 || !t2.props[Ae]) : this._isDisabledServerSide, i2 = !!e5.config.autocapture;
    this._isAutocaptureEnabled = i2 && !n2;
  }, _previousElementSibling: function(e5) {
    if (e5.previousElementSibling)
      return e5.previousElementSibling;
    var t2 = e5;
    do {
      t2 = t2.previousSibling;
    } while (t2 && !le(t2));
    return t2;
  }, _getAugmentPropertiesFromElement: function(e5) {
    if (!ve(e5))
      return {};
    var t2 = {};
    return z(e5.attributes, function(e6) {
      if (e6.name.indexOf("data-ph-capture-attribute") === 0) {
        var n2 = e6.name.replace("data-ph-capture-attribute-", ""), i2 = e6.value;
        n2 && i2 && Fe(i2) && (t2[n2] = i2);
      }
    }), t2;
  }, _getPropertiesFromElement: function(e5, t2, n2) {
    var i2, r2 = e5.tagName.toLowerCase(), s2 = { tag_name: r2 };
    fe.indexOf(r2) > -1 && !n2 && (r2.toLowerCase() === "a" || r2.toLowerCase() === "button" ? s2.$el_text = Ze(1024, Re(e5)) : s2.$el_text = Ze(1024, ue(e5)));
    var o2 = oe(e5);
    o2.length > 0 && (s2.classes = o2.filter(function(e6) {
      return e6 !== "";
    }));
    var a2 = (i2 = this.config) === null || i2 === void 0 ? void 0 : i2.element_attribute_ignorelist;
    z(e5.attributes, function(n3) {
      var i3;
      if ((!_e(e5) || ["name", "id", "class"].indexOf(n3.name) !== -1) && ((a2 == null || !a2.includes(n3.name)) && !t2 && Fe(n3.value) && (i3 = n3.name, !k(i3) || i3.substring(0, 10) !== "_ngcontent" && i3.substring(0, 7) !== "_nghost"))) {
        var r3 = n3.value;
        n3.name === "class" && (r3 = se(r3).join(" ")), s2["attr__" + n3.name] = Ze(1024, r3);
      }
    });
    for (var u2 = 1, l2 = 1, c2 = e5; c2 = this._previousElementSibling(c2); )
      u2++, c2.tagName === e5.tagName && l2++;
    return s2.nth_child = u2, s2.nth_of_type = l2, s2;
  }, _getDefaultProperties: function(e5) {
    return { $event_type: e5, $ce_version: 1 };
  }, _extractCustomPropertyValue: function(e5) {
    var t2 = [];
    return z(A == null ? void 0 : A.querySelectorAll(e5.css_selector), function(e6) {
      var n2;
      ["input", "select"].indexOf(e6.tagName.toLowerCase()) > -1 ? n2 = e6.value : e6.textContent && (n2 = e6.textContent), Fe(n2) && t2.push(n2);
    }), t2.join(", ");
  }, _getCustomProperties: function(e5) {
    var t2 = this, n2 = {};
    return z(this._customProperties, function(i2) {
      z(i2.event_selectors, function(r2) {
        z(A == null ? void 0 : A.querySelectorAll(r2), function(r3) {
          Q(e5, r3) && ve(r3) && (n2[i2.name] = t2._extractCustomPropertyValue(i2));
        });
      });
    }), n2;
  }, _getEventTarget: function(e5) {
    return w(e5.target) ? e5.srcElement || null : (t2 = e5.target) !== null && t2 !== void 0 && t2.shadowRoot ? e5.composedPath()[0] || null : e5.target || null;
    var t2;
  }, _captureEvent: function(e5, t2) {
    var n2, i2 = this, r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "$autocapture", s2 = arguments.length > 3 ? arguments[3] : void 0, o2 = this._getEventTarget(e5);
    (de(o2) && (o2 = o2.parentNode || null), r2 === "$autocapture" && e5.type === "click" && e5 instanceof MouseEvent) && ((n2 = this.rageclicks) !== null && n2 !== void 0 && n2.isRageClick(e5.clientX, e5.clientY, new Date().getTime()) && this._captureEvent(e5, t2, "$rageclick"));
    var a2 = r2 === Xe;
    if (o2 && ge(o2, e5, this.config, a2, a2 ? ["copy", "cut"] : void 0)) {
      for (var u2, l2, c2 = [o2], d2 = o2; d2.parentNode && !ce(d2, "body"); )
        he(d2.parentNode) ? (c2.push(d2.parentNode.host), d2 = d2.parentNode.host) : (c2.push(d2.parentNode), d2 = d2.parentNode);
      var h2, f2 = [], p2 = {}, g2 = false;
      if (z(c2, function(e6) {
        var n3 = ve(e6);
        e6.tagName.toLowerCase() === "a" && (h2 = e6.getAttribute("href"), h2 = n3 && Fe(h2) && h2), Q(oe(e6), "ph-no-capture") && (g2 = true), f2.push(i2._getPropertiesFromElement(e6, t2.config.mask_all_element_attributes, t2.config.mask_all_text));
        var r3 = i2._getAugmentPropertiesFromElement(e6);
        G(p2, r3);
      }), t2.config.mask_all_text || (o2.tagName.toLowerCase() === "a" || o2.tagName.toLowerCase() === "button" ? f2[0].$el_text = Re(o2) : f2[0].$el_text = ue(o2)), h2 && (f2[0].attr__href = h2), g2)
        return false;
      var v2 = G(this._getDefaultProperties(e5.type), t2.elementsChainAsString ? { $elements_chain: Pe(f2) } : { $elements: f2 }, (u2 = f2[0]) !== null && u2 !== void 0 && u2.$el_text ? { $el_text: (l2 = f2[0]) === null || l2 === void 0 ? void 0 : l2.$el_text } : {}, this._getCustomProperties(c2), p2, s2 || {});
      if (r2 === Xe) {
        var _2, m2 = ae(E == null || (_2 = E.getSelection()) === null || _2 === void 0 ? void 0 : _2.toString()), y2 = e5.type || "clipboard";
        if (!m2)
          return false;
        v2.$selected_content = m2, v2.$copy_type = y2;
      }
      return t2.capture(r2, v2), true;
    }
  }, _navigate: function(e5) {
    E && (E.location.href = e5);
  }, _addDomEventHandlers: function(e5) {
    var t2 = this;
    if (E && A) {
      var n2 = function(n3) {
        n3 = n3 || (E == null ? void 0 : E.event), t2._captureEvent(n3, e5);
      }, i2 = function(n3) {
        n3 = n3 || (E == null ? void 0 : E.event), t2._captureEvent(n3, e5, Xe);
      };
      ie(A, "submit", n2, false, true), ie(A, "change", n2, false, true), ie(A, "click", n2, false, true), b(e5.config.autocapture) && e5.config.autocapture.capture_copied_text && (ie(A, "copy", i2, false, true), ie(A, "cut", i2, false, true));
    }
  }, _customProperties: [], rageclicks: null, config: void 0, init: function(e5) {
    var t2;
    x(e5.__autocapture) || (this.config = e5.__autocapture), (t2 = this.config) !== null && t2 !== void 0 && t2.url_allowlist && (this.config.url_allowlist = this.config.url_allowlist.map(function(e6) {
      return new RegExp(e6);
    })), this.rageclicks = new Ce(e5.config.rageclick);
  }, afterDecideResponse: function(e5, t2) {
    var n2 = t2.config.token;
    this._initializedTokens.indexOf(n2) > -1 ? j.info('autocapture already initialized for token "' + n2 + '"') : (t2.persistence && t2.persistence.register(o({}, Ae, !!e5.autocapture_opt_out)), this._isDisabledServerSide = !!e5.autocapture_opt_out, this._setIsAutocaptureEnabled(t2), this._initializedTokens.push(n2), e5 && e5.config && e5.config.enable_collect_everything && this._isAutocaptureEnabled ? (e5.custom_properties && (this._customProperties = e5.custom_properties), this._addDomEventHandlers(t2)) : t2.__autocapture = false);
  }, enabledForProject: function(e5, t2, n2) {
    if (!e5)
      return true;
    t2 = w(t2) ? 10 : t2, n2 = w(n2) ? 10 : n2;
    for (var i2 = 0, r2 = 0; r2 < e5.length; r2++)
      i2 += e5.charCodeAt(r2);
    return i2 % t2 < n2;
  }, isBrowserSupported: function() {
    return y(A == null ? void 0 : A.querySelectorAll);
  } };
  !function(e5) {
    for (var t2 in e5)
      y(e5[t2]) && (e5[t2] = e5[t2].bind(e5));
  }(tt), function(e5) {
    for (var t2 in e5)
      y(e5[t2]) && (e5[t2] = X(e5[t2]));
  }(tt), function(e5) {
    e5.GZipJS = "gzip-js", e5.Base64 = "base64";
  }(et || (et = {}));
  var nt = "$active_feature_flags";
  var it = "$override_feature_flags";
  var rt = "$feature_flag_payloads";
  var st = function(e5) {
    var t2, n2 = {}, i2 = h(Y(e5 || {}));
    try {
      for (i2.s(); !(t2 = i2.n()).done; ) {
        var r2 = u(t2.value, 2), s2 = r2[0], o2 = r2[1];
        o2 && (n2[s2] = o2);
      }
    } catch (e6) {
      i2.e(e6);
    } finally {
      i2.f();
    }
    return n2;
  };
  var ot = function() {
    function e5(t2) {
      i(this, e5), this.instance = t2, this._override_warning = false, this.featureFlagEventHandlers = [], this.reloadFeatureFlagsQueued = false, this.reloadFeatureFlagsInAction = false;
    }
    return s(e5, [{ key: "getFlags", value: function() {
      return Object.keys(this.getFlagVariants());
    } }, { key: "getFlagVariants", value: function() {
      var e6 = this.instance.get_property(je), t2 = this.instance.get_property(it);
      if (!t2)
        return e6 || {};
      for (var n2 = G({}, e6), i2 = Object.keys(t2), r2 = 0; r2 < i2.length; r2++)
        t2[i2[r2]] === false ? delete n2[i2[r2]] : n2[i2[r2]] = t2[i2[r2]];
      return this._override_warning || (j.warn(" Overriding feature flags!", { enabledFlags: e6, overriddenFlags: t2, finalFlags: n2 }), this._override_warning = true), n2;
    } }, { key: "getFlagPayloads", value: function() {
      return this.instance.get_property(rt) || {};
    } }, { key: "reloadFeatureFlags", value: function() {
      this.reloadFeatureFlagsQueued || (this.reloadFeatureFlagsQueued = true, this._startReloadTimer());
    } }, { key: "setAnonymousDistinctId", value: function(e6) {
      this.$anon_distinct_id = e6;
    } }, { key: "setReloadingPaused", value: function(e6) {
      this.reloadFeatureFlagsInAction = e6;
    } }, { key: "resetRequestQueue", value: function() {
      this.reloadFeatureFlagsQueued = false;
    } }, { key: "_startReloadTimer", value: function() {
      var e6 = this;
      this.reloadFeatureFlagsQueued && !this.reloadFeatureFlagsInAction && setTimeout(function() {
        !e6.reloadFeatureFlagsInAction && e6.reloadFeatureFlagsQueued && (e6.reloadFeatureFlagsQueued = false, e6._reloadFeatureFlagsRequest());
      }, 5);
    } }, { key: "_reloadFeatureFlagsRequest", value: function() {
      var e6 = this;
      if (!this.instance.config.advanced_disable_feature_flags) {
        this.setReloadingPaused(true);
        var t2 = this.instance.config.token, n2 = this.instance.get_property(Ve), i2 = this.instance.get_property(We), r2 = { token: t2, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), $anon_distinct_id: this.$anon_distinct_id, person_properties: n2, group_properties: i2, disable_flags: this.instance.config.advanced_disable_feature_flags || void 0 };
        this.instance._send_request({ method: "POST", url: this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), data: r2, compression: et.Base64, timeout: this.instance.config.feature_flag_request_timeout_ms, callback: function(t3) {
          var n3;
          e6.setReloadingPaused(false);
          var i3 = true;
          t3.statusCode === 200 && (e6.$anon_distinct_id = void 0, i3 = false), e6.receivedFeatureFlags((n3 = t3.json) !== null && n3 !== void 0 ? n3 : {}, i3), e6._startReloadTimer();
        } });
      }
    } }, { key: "getFeatureFlag", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0) {
        var n2, i2 = this.getFlagVariants()[e6], r2 = "".concat(i2), s2 = this.instance.get_property(Ge) || {};
        if (t2.send_event || !("send_event" in t2)) {
          if (!(e6 in s2) || !s2[e6].includes(r2))
            m(s2[e6]) ? s2[e6].push(r2) : s2[e6] = [r2], (n2 = this.instance.persistence) === null || n2 === void 0 || n2.register(o({}, Ge, s2)), this.instance.capture("$feature_flag_called", { $feature_flag: e6, $feature_flag_response: i2 });
        }
        return i2;
      }
      j.warn('getFeatureFlag for key "' + e6 + `" failed. Feature flags didn't load in time.`);
    } }, { key: "getFeatureFlagPayload", value: function(e6) {
      return this.getFlagPayloads()[e6];
    } }, { key: "isFeatureEnabled", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0)
        return !!this.getFeatureFlag(e6, t2);
      j.warn('isFeatureEnabled for key "' + e6 + `" failed. Feature flags didn't load in time.`);
    } }, { key: "addFeatureFlagsHandler", value: function(e6) {
      this.featureFlagEventHandlers.push(e6);
    } }, { key: "removeFeatureFlagsHandler", value: function(e6) {
      this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter(function(t2) {
        return t2 !== e6;
      });
    } }, { key: "receivedFeatureFlags", value: function(e6, n2) {
      if (this.instance.persistence) {
        this.instance.decideEndpointWasHit = true;
        var i2 = this.getFlagVariants(), r2 = this.getFlagPayloads();
        !function(e7, n3) {
          var i3, r3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, s2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, a2 = e7.featureFlags, u2 = e7.featureFlagPayloads;
          if (a2)
            if (m(a2)) {
              var l2, c2 = {};
              if (a2)
                for (var d2 = 0; d2 < a2.length; d2++)
                  c2[a2[d2]] = true;
              n3 && n3.register((o(l2 = {}, nt, a2), o(l2, je, c2), l2));
            } else {
              var h2 = a2, f2 = u2;
              e7.errorsWhileComputingFlags && (h2 = t(t({}, r3), h2), f2 = t(t({}, s2), f2)), n3 && n3.register((o(i3 = {}, nt, Object.keys(st(h2))), o(i3, je, h2 || {}), o(i3, rt, f2 || {}), i3));
            }
        }(e6, this.instance.persistence, i2, r2), this._fireFeatureFlagsCallbacks(n2);
      }
    } }, { key: "override", value: function(e6) {
      if (!this.instance.__loaded || !this.instance.persistence)
        return j.uninitializedWarning("posthog.feature_flags.override");
      if (this._override_warning = false, e6 === false)
        this.instance.persistence.unregister(it);
      else if (m(e6)) {
        for (var t2 = {}, n2 = 0; n2 < e6.length; n2++)
          t2[e6[n2]] = true;
        this.instance.persistence.register(o({}, it, t2));
      } else
        this.instance.persistence.register(o({}, it, e6));
    } }, { key: "onFeatureFlags", value: function(e6) {
      var t2 = this;
      if (this.addFeatureFlagsHandler(e6), this.instance.decideEndpointWasHit) {
        var n2 = this._prepareFeatureFlagsForCallbacks(), i2 = n2.flags, r2 = n2.flagVariants;
        e6(i2, r2);
      }
      return function() {
        return t2.removeFeatureFlagsHandler(e6);
      };
    } }, { key: "updateEarlyAccessFeatureEnrollment", value: function(e6, n2) {
      var i2, r2, s2 = o({}, "$feature_enrollment/".concat(e6), n2);
      this.instance.capture("$feature_enrollment_update", { $feature_flag: e6, $feature_enrollment: n2, $set: s2 }), this.setPersonPropertiesForFlags(s2, false);
      var a2 = t(t({}, this.getFlagVariants()), {}, o({}, e6, n2));
      (i2 = this.instance.persistence) === null || i2 === void 0 || i2.register((o(r2 = {}, nt, Object.keys(st(a2))), o(r2, je, a2), r2)), this._fireFeatureFlagsCallbacks();
    } }, { key: "getEarlyAccessFeatures", value: function(e6) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], i2 = this.instance.get_property(Ue);
      if (i2 && !n2)
        return e6(i2);
      this.instance._send_request({ transport: "XHR", url: this.instance.requestRouter.endpointFor("api", "/api/early_access_features/?token=".concat(this.instance.config.token)), method: "GET", callback: function(n3) {
        var i3;
        if (n3.json) {
          var r2 = n3.json.earlyAccessFeatures;
          return (i3 = t2.instance.persistence) === null || i3 === void 0 || i3.register(o({}, Ue, r2)), e6(r2);
        }
      } });
    } }, { key: "_prepareFeatureFlagsForCallbacks", value: function() {
      var e6 = this.getFlags(), t2 = this.getFlagVariants();
      return { flags: e6.filter(function(e7) {
        return t2[e7];
      }), flagVariants: Object.keys(t2).filter(function(e7) {
        return t2[e7];
      }).reduce(function(e7, n2) {
        return e7[n2] = t2[n2], e7;
      }, {}) };
    } }, { key: "_fireFeatureFlagsCallbacks", value: function(e6) {
      var t2 = this._prepareFeatureFlagsForCallbacks(), n2 = t2.flags, i2 = t2.flagVariants;
      this.featureFlagEventHandlers.forEach(function(t3) {
        return t3(n2, i2, { errorsLoading: e6 });
      });
    } }, { key: "setPersonPropertiesForFlags", value: function(e6) {
      var n2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], i2 = this.instance.get_property(Ve) || {};
      this.instance.register(o({}, Ve, t(t({}, i2), e6))), n2 && this.instance.reloadFeatureFlags();
    } }, { key: "resetPersonPropertiesForFlags", value: function() {
      this.instance.unregister(Ve);
    } }, { key: "setGroupPropertiesForFlags", value: function(e6) {
      var n2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], i2 = this.instance.get_property(We) || {};
      Object.keys(i2).length !== 0 && Object.keys(i2).forEach(function(n3) {
        i2[n3] = t(t({}, i2[n3]), e6[n3]), delete e6[n3];
      }), this.instance.register(o({}, We, t(t({}, i2), e6))), n2 && this.instance.reloadFeatureFlags();
    } }, { key: "resetGroupPropertiesForFlags", value: function(e6) {
      if (e6) {
        var n2 = this.instance.get_property(We) || {};
        this.instance.register(o({}, We, t(t({}, n2), {}, o({}, e6, {}))));
      } else
        this.instance.unregister(We);
    } }]), e5;
  }();
  Math.trunc || (Math.trunc = function(e5) {
    return e5 < 0 ? Math.ceil(e5) : Math.floor(e5);
  }), Number.isInteger || (Number.isInteger = function(e5) {
    return R(e5) && isFinite(e5) && Math.floor(e5) === e5;
  });
  var at = "0123456789abcdef";
  var ut = function() {
    function e5(t2) {
      if (i(this, e5), this.bytes = t2, t2.length !== 16)
        throw new TypeError("not 128-bit length");
    }
    return s(e5, [{ key: "toString", value: function() {
      for (var e6 = "", t2 = 0; t2 < this.bytes.length; t2++)
        e6 = e6 + at.charAt(this.bytes[t2] >>> 4) + at.charAt(15 & this.bytes[t2]), t2 !== 3 && t2 !== 5 && t2 !== 7 && t2 !== 9 || (e6 += "-");
      if (e6.length !== 36)
        throw new Error("Invalid UUIDv7 was generated");
      return e6;
    } }, { key: "clone", value: function() {
      return new e5(this.bytes.slice(0));
    } }, { key: "equals", value: function(e6) {
      return this.compareTo(e6) === 0;
    } }, { key: "compareTo", value: function(e6) {
      for (var t2 = 0; t2 < 16; t2++) {
        var n2 = this.bytes[t2] - e6.bytes[t2];
        if (n2 !== 0)
          return Math.sign(n2);
      }
      return 0;
    } }], [{ key: "fromFieldsV7", value: function(t2, n2, i2, r2) {
      if (!Number.isInteger(t2) || !Number.isInteger(n2) || !Number.isInteger(i2) || !Number.isInteger(r2) || t2 < 0 || n2 < 0 || i2 < 0 || r2 < 0 || t2 > 281474976710655 || n2 > 4095 || i2 > 1073741823 || r2 > 4294967295)
        throw new RangeError("invalid field value");
      var s2 = new Uint8Array(16);
      return s2[0] = t2 / Math.pow(2, 40), s2[1] = t2 / Math.pow(2, 32), s2[2] = t2 / Math.pow(2, 24), s2[3] = t2 / Math.pow(2, 16), s2[4] = t2 / Math.pow(2, 8), s2[5] = t2, s2[6] = 112 | n2 >>> 8, s2[7] = n2, s2[8] = 128 | i2 >>> 24, s2[9] = i2 >>> 16, s2[10] = i2 >>> 8, s2[11] = i2, s2[12] = r2 >>> 24, s2[13] = r2 >>> 16, s2[14] = r2 >>> 8, s2[15] = r2, new e5(s2);
    } }]), e5;
  }();
  var lt = function() {
    function e5() {
      i(this, e5), o(this, "timestamp", 0), o(this, "counter", 0), o(this, "random", new ht());
    }
    return s(e5, [{ key: "generate", value: function() {
      var e6 = this.generateOrAbort();
      if (w(e6)) {
        this.timestamp = 0;
        var t2 = this.generateOrAbort();
        if (w(t2))
          throw new Error("Could not generate UUID after timestamp reset");
        return t2;
      }
      return e6;
    } }, { key: "generateOrAbort", value: function() {
      var e6 = Date.now();
      if (e6 > this.timestamp)
        this.timestamp = e6, this.resetCounter();
      else {
        if (!(e6 + 1e4 > this.timestamp))
          return;
        this.counter++, this.counter > 4398046511103 && (this.timestamp++, this.resetCounter());
      }
      return ut.fromFieldsV7(this.timestamp, Math.trunc(this.counter / Math.pow(2, 30)), this.counter & Math.pow(2, 30) - 1, this.random.nextUint32());
    } }, { key: "resetCounter", value: function() {
      this.counter = 1024 * this.random.nextUint32() + (1023 & this.random.nextUint32());
    } }]), e5;
  }();
  var ct = function(e5) {
    if (typeof UUIDV7_DENY_WEAK_RNG != "undefined" && UUIDV7_DENY_WEAK_RNG)
      throw new Error("no cryptographically strong RNG available");
    for (var t2 = 0; t2 < e5.length; t2++)
      e5[t2] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());
    return e5;
  };
  E && !w(E.crypto) && crypto.getRandomValues && (ct = function(e5) {
    return crypto.getRandomValues(e5);
  });
  var dt;
  var ht = function() {
    function e5() {
      i(this, e5), o(this, "buffer", new Uint32Array(8)), o(this, "cursor", 1 / 0);
    }
    return s(e5, [{ key: "nextUint32", value: function() {
      return this.cursor >= this.buffer.length && (ct(this.buffer), this.cursor = 0), this.buffer[this.cursor++];
    } }]), e5;
  }();
  var ft = function() {
    return pt().toString();
  };
  var pt = function() {
    return (dt || (dt = new lt())).generate();
  };
  var gt = "Thu, 01 Jan 1970 00:00:00 GMT";
  var vt = "";
  var _t = /[a-z0-9][a-z0-9-]+\.[a-z]{2,}$/i;
  function mt(e5, t2) {
    if (t2) {
      var n2 = function(e6) {
        var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : A;
        if (vt)
          return vt;
        if (!t3)
          return "";
        if (["localhost", "127.0.0.1"].includes(e6))
          return "";
        for (var n3 = e6.split("."), i3 = Math.min(n3.length, 8), r2 = "dmn_chk_" + ft(), s2 = new RegExp("(^|;)\\s*" + r2 + "=1"); !vt && i3--; ) {
          var o2 = n3.slice(i3).join("."), a2 = r2 + "=1;domain=." + o2;
          t3.cookie = a2, s2.test(t3.cookie) && (t3.cookie = a2 + ";expires=" + gt, vt = o2);
        }
        return vt;
      }(e5);
      if (!n2) {
        var i2 = function(e6) {
          var t3 = e6.match(_t);
          return t3 ? t3[0] : "";
        }(e5);
        i2 !== n2 && j.info("Warning: cookie subdomain discovery mismatch", i2, n2), n2 = i2;
      }
      return n2 ? "; domain=." + n2 : "";
    }
    return "";
  }
  var yt;
  var bt = { is_supported: function() {
    return !!A;
  }, error: function(e5) {
    j.error("cookieStore error: " + e5);
  }, get: function(e5) {
    if (A) {
      try {
        for (var t2 = e5 + "=", n2 = A.cookie.split(";").filter(function(e6) {
          return e6.length;
        }), i2 = 0; i2 < n2.length; i2++) {
          for (var r2 = n2[i2]; r2.charAt(0) == " "; )
            r2 = r2.substring(1, r2.length);
          if (r2.indexOf(t2) === 0)
            return decodeURIComponent(r2.substring(t2.length, r2.length));
        }
      } catch (e6) {
      }
      return null;
    }
  }, parse: function(e5) {
    var t2;
    try {
      t2 = JSON.parse(bt.get(e5)) || {};
    } catch (e6) {
    }
    return t2;
  }, set: function(e5, t2, n2, i2, r2) {
    if (A)
      try {
        var s2 = "", o2 = "", a2 = mt(A.location.hostname, i2);
        if (n2) {
          var u2 = new Date();
          u2.setTime(u2.getTime() + 24 * n2 * 60 * 60 * 1e3), s2 = "; expires=" + u2.toUTCString();
        }
        r2 && (o2 = "; secure");
        var l2 = e5 + "=" + encodeURIComponent(JSON.stringify(t2)) + s2 + "; SameSite=Lax; path=/" + a2 + o2;
        return l2.length > 3686.4 && j.warn("cookieStore warning: large cookie, len=" + l2.length), A.cookie = l2, l2;
      } catch (e6) {
        return;
      }
  }, remove: function(e5, t2) {
    try {
      bt.set(e5, "", -1, t2);
    } catch (e6) {
      return;
    }
  } };
  var wt = null;
  var kt = { is_supported: function() {
    if (!S(wt))
      return wt;
    var e5 = true;
    if (w(E))
      e5 = false;
    else
      try {
        var t2 = "__mplssupport__";
        kt.set(t2, "xyz"), kt.get(t2) !== '"xyz"' && (e5 = false), kt.remove(t2);
      } catch (t3) {
        e5 = false;
      }
    return e5 || j.error("localStorage unsupported; falling back to cookie store"), wt = e5, e5;
  }, error: function(e5) {
    j.error("localStorage error: " + e5);
  }, get: function(e5) {
    try {
      return E == null ? void 0 : E.localStorage.getItem(e5);
    } catch (e6) {
      kt.error(e6);
    }
    return null;
  }, parse: function(e5) {
    try {
      return JSON.parse(kt.get(e5)) || {};
    } catch (e6) {
    }
    return null;
  }, set: function(e5, t2) {
    try {
      E == null || E.localStorage.setItem(e5, JSON.stringify(t2));
    } catch (e6) {
      kt.error(e6);
    }
  }, remove: function(e5) {
    try {
      E == null || E.localStorage.removeItem(e5);
    } catch (e6) {
      kt.error(e6);
    }
  } };
  var St = ["distinct_id", Be, He];
  var Ft = t(t({}, kt), {}, { parse: function(e5) {
    try {
      var t2 = {};
      try {
        t2 = bt.parse(e5) || {};
      } catch (e6) {
      }
      var n2 = G(t2, JSON.parse(kt.get(e5) || "{}"));
      return kt.set(e5, n2), n2;
    } catch (e6) {
    }
    return null;
  }, set: function(e5, t2, n2, i2, r2) {
    try {
      kt.set(e5, t2);
      var s2 = {};
      St.forEach(function(e6) {
        t2[e6] && (s2[e6] = t2[e6]);
      }), Object.keys(s2).length && bt.set(e5, s2, n2, i2, r2);
    } catch (e6) {
      kt.error(e6);
    }
  }, remove: function(e5, t2) {
    try {
      E == null || E.localStorage.removeItem(e5), bt.remove(e5, t2);
    } catch (e6) {
      kt.error(e6);
    }
  } });
  var Rt = {};
  var xt = { is_supported: function() {
    return true;
  }, error: function(e5) {
    j.error("memoryStorage error: " + e5);
  }, get: function(e5) {
    return Rt[e5] || null;
  }, parse: function(e5) {
    return Rt[e5] || null;
  }, set: function(e5, t2) {
    Rt[e5] = t2;
  }, remove: function(e5) {
    delete Rt[e5];
  } };
  var Pt = null;
  var Et = { is_supported: function() {
    if (!S(Pt))
      return Pt;
    if (Pt = true, w(E))
      Pt = false;
    else
      try {
        var e5 = "__support__";
        Et.set(e5, "xyz"), Et.get(e5) !== '"xyz"' && (Pt = false), Et.remove(e5);
      } catch (e6) {
        Pt = false;
      }
    return Pt;
  }, error: function(e5) {
    j.error("sessionStorage error: ", e5);
  }, get: function(e5) {
    try {
      return E == null ? void 0 : E.sessionStorage.getItem(e5);
    } catch (e6) {
      Et.error(e6);
    }
    return null;
  }, parse: function(e5) {
    try {
      return JSON.parse(Et.get(e5)) || null;
    } catch (e6) {
    }
    return null;
  }, set: function(e5, t2) {
    try {
      E == null || E.sessionStorage.setItem(e5, JSON.stringify(t2));
    } catch (e6) {
      Et.error(e6);
    }
  }, remove: function(e5) {
    try {
      E == null || E.sessionStorage.removeItem(e5);
    } catch (e6) {
      Et.error(e6);
    }
  } };
  var It = ["localhost", "127.0.0.1"];
  var Ct = function(e5) {
    var t2 = A == null ? void 0 : A.createElement("a");
    return w(t2) ? null : (t2.href = e5, t2);
  };
  var $t = function(e5, t2) {
    return !!function(e6) {
      try {
        new RegExp(e6);
      } catch (e7) {
        return false;
      }
      return true;
    }(t2) && new RegExp(t2).test(e5);
  };
  var Tt = function(e5) {
    var t2, n2, i2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "&", r2 = [];
    return z(e5, function(e6, i3) {
      w(e6) || w(i3) || i3 === "undefined" || (t2 = encodeURIComponent(function(e7) {
        return e7 instanceof File;
      }(e6) ? e6.name : e6.toString()), n2 = encodeURIComponent(i3), r2[r2.length] = n2 + "=" + t2);
    }), r2.join(i2);
  };
  var Ot = function(e5, t2) {
    for (var n2, i2 = ((e5.split("#")[0] || "").split("?")[1] || "").split("&"), r2 = 0; r2 < i2.length; r2++) {
      var s2 = i2[r2].split("=");
      if (s2[0] === t2) {
        n2 = s2;
        break;
      }
    }
    if (!m(n2) || n2.length < 2)
      return "";
    var o2 = n2[1];
    try {
      o2 = decodeURIComponent(o2);
    } catch (e6) {
      j.error("Skipping decoding for malformed query param: " + o2);
    }
    return o2.replace(/\+/g, " ");
  };
  var At = function(e5, t2) {
    var n2 = e5.match(new RegExp(t2 + "=([^&]*)"));
    return n2 ? n2[1] : null;
  };
  var qt = "Mobile";
  var Mt = "iOS";
  var Dt = "Android";
  var Lt = "Tablet";
  var Nt = Dt + " " + Lt;
  var Bt = "iPad";
  var Ht = "Apple";
  var jt = Ht + " Watch";
  var Ut = "Safari";
  var Vt = "BlackBerry";
  var Wt = "Samsung";
  var zt = Wt + "Browser";
  var Gt = Wt + " Internet";
  var Qt = "Chrome";
  var Yt = Qt + " OS";
  var Jt = Qt + " " + Mt;
  var Kt = "Internet Explorer";
  var Xt = Kt + " " + qt;
  var Zt = "Opera";
  var en = Zt + " Mini";
  var tn = "Edge";
  var nn = "Microsoft " + tn;
  var rn = "Firefox";
  var sn = rn + " " + Mt;
  var on = "Nintendo";
  var an = "PlayStation";
  var un = "Xbox";
  var ln = Dt + " " + qt;
  var cn = qt + " " + Ut;
  var dn = "Windows";
  var hn = dn + " Phone";
  var fn = "Nokia";
  var pn = "Ouya";
  var gn = "Generic";
  var vn = gn + " " + qt.toLowerCase();
  var _n = gn + " " + Lt.toLowerCase();
  var mn = "Konqueror";
  var yn = "(\\d+(\\.\\d+)?)";
  var bn = new RegExp("Version/" + yn);
  var wn = new RegExp(un, "i");
  var kn = new RegExp(an + " \\w+", "i");
  var Sn = new RegExp(on + " \\w+", "i");
  var Fn = new RegExp(Vt + "|PlayBook|BB10", "i");
  var Rn = { "NT3.51": "NT 3.11", "NT4.0": "NT 4.0", "5.0": "2000", 5.1: "XP", 5.2: "XP", "6.0": "Vista", 6.1: "7", 6.2: "8", 6.3: "8.1", 6.4: "10", "10.0": "10" };
  var xn = function(e5, t2) {
    return t2 && Q(t2, Ht) || function(e6) {
      return Q(e6, Ut) && !Q(e6, Qt) && !Q(e6, Dt);
    }(e5);
  };
  var Pn = function(e5, t2) {
    return t2 = t2 || "", Q(e5, " OPR/") && Q(e5, "Mini") ? en : Q(e5, " OPR/") ? Zt : Fn.test(e5) ? Vt : Q(e5, "IE" + qt) || Q(e5, "WPDesktop") ? Xt : Q(e5, zt) ? Gt : Q(e5, tn) || Q(e5, "Edg/") ? nn : Q(e5, "FBIOS") ? "Facebook " + qt : Q(e5, Qt) ? Qt : Q(e5, "CriOS") ? Jt : Q(e5, "UCWEB") || Q(e5, "UCBrowser") ? "UC Browser" : Q(e5, "FxiOS") ? sn : Q(e5, Dt) ? ln : Q(e5.toLowerCase(), mn.toLowerCase()) ? mn : xn(e5, t2) ? Q(e5, qt) ? cn : Ut : Q(e5, rn) ? rn : Q(e5, "MSIE") || Q(e5, "Trident/") ? Kt : Q(e5, "Gecko") ? rn : "";
  };
  var En = (o(yt = {}, Xt, [new RegExp("rv:" + yn)]), o(yt, nn, [new RegExp(tn + "?\\/" + yn)]), o(yt, Qt, [new RegExp(Qt + "/" + yn)]), o(yt, Jt, [new RegExp("CriOS\\/" + yn)]), o(yt, "UC Browser", [new RegExp("(UCBrowser|UCWEB)\\/" + yn)]), o(yt, Ut, [bn]), o(yt, cn, [bn]), o(yt, Zt, [new RegExp("(Opera|OPR)\\/" + yn)]), o(yt, rn, [new RegExp(rn + "\\/" + yn)]), o(yt, sn, [new RegExp("FxiOS\\/" + yn)]), o(yt, mn, [new RegExp("Konqueror[:/]?" + yn, "i")]), o(yt, Vt, [new RegExp(Vt + " " + yn), bn]), o(yt, ln, [new RegExp("android\\s" + yn)]), o(yt, Gt, [new RegExp(zt + "\\/" + yn)]), o(yt, Kt, [new RegExp("(rv:|MSIE )" + yn)]), o(yt, "Mozilla", [new RegExp("rv:" + yn)]), yt);
  var In = [[new RegExp(un + "; " + un + " (.*?)[);]", "i"), function(e5) {
    return [un, e5 && e5[1] || ""];
  }], [new RegExp(on, "i"), [on, ""]], [new RegExp(an, "i"), [an, ""]], [Fn, [Vt, ""]], [new RegExp(dn, "i"), function(e5, t2) {
    if (/Phone/.test(t2) || /WPDesktop/.test(t2))
      return [hn, ""];
    if (new RegExp(qt).test(t2) && !/IEMobile\b/.test(t2))
      return [dn + " " + qt, ""];
    var n2 = /Windows NT ([0-9.]+)/i.exec(t2);
    if (n2 && n2[1]) {
      var i2 = n2[1], r2 = Rn[i2] || "";
      return /arm/i.test(t2) && (r2 = "RT"), [dn, r2];
    }
    return [dn, ""];
  }], [/((iPhone|iPad|iPod).*?OS (\d+)_(\d+)_?(\d+)?|iPhone)/, function(e5) {
    if (e5 && e5[3]) {
      var t2 = [e5[3], e5[4], e5[5] || "0"];
      return [Mt, t2.join(".")];
    }
    return [Mt, ""];
  }], [/(watch.*\/(\d+\.\d+\.\d+)|watch os,(\d+\.\d+),)/i, function(e5) {
    var t2 = "";
    return e5 && e5.length >= 3 && (t2 = w(e5[2]) ? e5[3] : e5[2]), ["watchOS", t2];
  }], [new RegExp("(" + Dt + " (\\d+)\\.(\\d+)\\.?(\\d+)?|" + Dt + ")", "i"), function(e5) {
    if (e5 && e5[2]) {
      var t2 = [e5[2], e5[3], e5[4] || "0"];
      return [Dt, t2.join(".")];
    }
    return [Dt, ""];
  }], [/Mac OS X (\d+)[_.](\d+)[_.]?(\d+)?/i, function(e5) {
    var t2 = ["Mac OS X", ""];
    if (e5 && e5[1]) {
      var n2 = [e5[1], e5[2], e5[3] || "0"];
      t2[1] = n2.join(".");
    }
    return t2;
  }], [/Mac/i, ["Mac OS X", ""]], [/CrOS/, [Yt, ""]], [/Linux|debian/i, ["Linux", ""]]];
  var Cn = function(e5) {
    return Sn.test(e5) ? on : kn.test(e5) ? an : wn.test(e5) ? un : new RegExp(pn, "i").test(e5) ? pn : new RegExp("(" + hn + "|WPDesktop)", "i").test(e5) ? hn : /iPad/.test(e5) ? Bt : /iPod/.test(e5) ? "iPod Touch" : /iPhone/.test(e5) ? "iPhone" : /(watch)(?: ?os[,/]|\d,\d\/)[\d.]+/i.test(e5) ? jt : Fn.test(e5) ? Vt : /(kobo)\s(ereader|touch)/i.test(e5) ? "Kobo" : new RegExp(fn, "i").test(e5) ? fn : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i.test(e5) || /(kf[a-z]+)( bui|\)).+silk\//i.test(e5) ? "Kindle Fire" : /(Android|ZTE)/i.test(e5) ? !new RegExp(qt).test(e5) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(e5) ? /pixel[\daxl ]{1,6}/i.test(e5) && !/pixel c/i.test(e5) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(e5) || /lmy47v/i.test(e5) && !/QTAQZ3/i.test(e5) ? Dt : Nt : Dt : new RegExp("(pda|" + qt + ")", "i").test(e5) ? vn : new RegExp(Lt, "i").test(e5) && !new RegExp(Lt + " pc", "i").test(e5) ? _n : "";
  };
  var $n = "https?://(.*)";
  var Tn = { campaignParams: function(e5) {
    var t2 = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "gad_source", "gclsrc", "dclid", "gbraid", "wbraid", "fbclid", "msclkid", "twclid", "li_fat_id", "mc_cid", "igshid", "ttclid"].concat(e5 || []), n2 = {};
    return z(t2, function(e6) {
      var t3 = A ? Ot(A.URL, e6) : "";
      t3.length && (n2[e6] = t3);
    }), n2;
  }, searchEngine: function() {
    var e5 = A == null ? void 0 : A.referrer;
    return e5 ? e5.search($n + "google.([^/?]*)") === 0 ? "google" : e5.search($n + "bing.com") === 0 ? "bing" : e5.search($n + "yahoo.com") === 0 ? "yahoo" : e5.search($n + "duckduckgo.com") === 0 ? "duckduckgo" : null : null;
  }, searchInfo: function() {
    var e5 = Tn.searchEngine(), t2 = e5 != "yahoo" ? "q" : "p", n2 = {};
    if (!S(e5)) {
      n2.$search_engine = e5;
      var i2 = A ? Ot(A.referrer, t2) : "";
      i2.length && (n2.ph_keyword = i2);
    }
    return n2;
  }, browser: Pn, browserVersion: function(e5, t2) {
    var n2 = Pn(e5, t2), i2 = En[n2];
    if (w(i2))
      return null;
    for (var r2 = 0; r2 < i2.length; r2++) {
      var s2 = i2[r2], o2 = e5.match(s2);
      if (o2)
        return parseFloat(o2[o2.length - 2]);
    }
    return null;
  }, browserLanguage: function() {
    return navigator.language || navigator.userLanguage;
  }, os: function(e5) {
    for (var t2 = 0; t2 < In.length; t2++) {
      var n2 = u(In[t2], 2), i2 = n2[0], r2 = n2[1], s2 = i2.exec(e5), o2 = s2 && (y(r2) ? r2(s2, e5) : r2);
      if (o2)
        return o2;
    }
    return ["", ""];
  }, device: Cn, deviceType: function(e5) {
    var t2 = Cn(e5);
    return t2 === Bt || t2 === Nt || t2 === "Kobo" || t2 === "Kindle Fire" || t2 === _n ? Lt : t2 === on || t2 === un || t2 === an || t2 === pn ? "Console" : t2 === jt ? "Wearable" : t2 ? qt : "Desktop";
  }, referrer: function() {
    return (A == null ? void 0 : A.referrer) || "$direct";
  }, referringDomain: function() {
    var e5;
    return A != null && A.referrer && ((e5 = Ct(A.referrer)) === null || e5 === void 0 ? void 0 : e5.host) || "$direct";
  }, properties: function() {
    if (!N)
      return {};
    var e5 = u(Tn.os(N), 2), t2 = e5[0], n2 = e5[1];
    return G(Z({ $os: t2, $os_version: n2, $browser: Tn.browser(N, navigator.vendor), $device: Tn.device(N), $device_type: Tn.deviceType(N) }), { $current_url: q == null ? void 0 : q.href, $host: q == null ? void 0 : q.host, $pathname: q == null ? void 0 : q.pathname, $raw_user_agent: N.length > 1e3 ? N.substring(0, 997) + "..." : N, $browser_version: Tn.browserVersion(N, navigator.vendor), $browser_language: Tn.browserLanguage(), $screen_height: E == null ? void 0 : E.screen.height, $screen_width: E == null ? void 0 : E.screen.width, $viewport_height: E == null ? void 0 : E.innerHeight, $viewport_width: E == null ? void 0 : E.innerWidth, $lib: "web", $lib_version: f.LIB_VERSION, $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10), $time: J() / 1e3 });
  }, people_properties: function() {
    if (!N)
      return {};
    var e5 = u(Tn.os(N), 2), t2 = e5[0], n2 = e5[1];
    return G(Z({ $os: t2, $os_version: n2, $browser: Tn.browser(N, navigator.vendor) }), { $browser_version: Tn.browserVersion(N, navigator.vendor) });
  } };
  var On = ["cookie", "localstorage", "localstorage+cookie", "sessionstorage", "memory"];
  var An = function() {
    function e5(t2) {
      i(this, e5), this.config = t2, this.props = {}, this.campaign_params_saved = false, this.name = function(e6) {
        var t3 = "";
        return e6.token && (t3 = e6.token.replace(/\+/g, "PL").replace(/\//g, "SL").replace(/=/g, "EQ")), e6.persistence_name ? "ph_" + e6.persistence_name : "ph_" + t3 + "_posthog";
      }(t2), this.storage = this.buildStorage(t2), this.load(), this.update_config(t2, t2), this.save();
    }
    return s(e5, [{ key: "buildStorage", value: function(e6) {
      On.indexOf(e6.persistence.toLowerCase()) === -1 && (j.critical("Unknown persistence type " + e6.persistence + "; falling back to localStorage+cookie"), e6.persistence = "localStorage+cookie");
      var t2 = e6.persistence.toLowerCase();
      return t2 === "localstorage" && kt.is_supported() ? kt : t2 === "localstorage+cookie" && Ft.is_supported() ? Ft : t2 === "sessionstorage" && Et.is_supported() ? Et : t2 === "memory" ? xt : t2 === "cookie" ? bt : Ft.is_supported() ? Ft : bt;
    } }, { key: "properties", value: function() {
      var e6 = {};
      return z(this.props, function(t2, n2) {
        if (n2 === je && b(t2))
          for (var i2 = Object.keys(t2), r2 = 0; r2 < i2.length; r2++)
            e6["$feature/".concat(i2[r2])] = t2[i2[r2]];
        else
          o2 = n2, a2 = false, (S(s2 = Ke) ? a2 : T && s2.indexOf === T ? s2.indexOf(o2) != -1 : (z(s2, function(e7) {
            if (a2 || (a2 = e7 === o2))
              return U;
          }), a2)) || (e6[n2] = t2);
        var s2, o2, a2;
      }), e6;
    } }, { key: "load", value: function() {
      if (!this.disabled) {
        var e6 = this.storage.parse(this.name);
        e6 && (this.props = G({}, e6));
      }
    } }, { key: "save", value: function() {
      this.disabled || this.storage.set(this.name, this.props, this.expire_days, this.cross_subdomain, this.secure);
    } }, { key: "remove", value: function() {
      this.storage.remove(this.name, false), this.storage.remove(this.name, true);
    } }, { key: "clear", value: function() {
      this.remove(), this.props = {};
    } }, { key: "register_once", value: function(e6, t2, n2) {
      var i2 = this;
      if (b(e6)) {
        w(t2) && (t2 = "None"), this.expire_days = w(n2) ? this.default_expiry : n2;
        var r2 = false;
        if (z(e6, function(e7, n3) {
          i2.props.hasOwnProperty(n3) && i2.props[n3] !== t2 || (i2.props[n3] = e7, r2 = true);
        }), r2)
          return this.save(), true;
      }
      return false;
    } }, { key: "register", value: function(e6, t2) {
      var n2 = this;
      if (b(e6)) {
        this.expire_days = w(t2) ? this.default_expiry : t2;
        var i2 = false;
        if (z(e6, function(t3, r2) {
          e6.hasOwnProperty(r2) && n2.props[r2] !== t3 && (n2.props[r2] = t3, i2 = true);
        }), i2)
          return this.save(), true;
      }
      return false;
    } }, { key: "unregister", value: function(e6) {
      e6 in this.props && (delete this.props[e6], this.save());
    } }, { key: "update_campaign_params", value: function() {
      this.campaign_params_saved || (this.register(Tn.campaignParams(this.config.custom_campaign_params)), this.campaign_params_saved = true);
    } }, { key: "update_search_keyword", value: function() {
      this.register(Tn.searchInfo());
    } }, { key: "update_referrer_info", value: function() {
      this.register({ $referrer: this.props.$referrer || Tn.referrer(), $referring_domain: this.props.$referring_domain || Tn.referringDomain() });
    } }, { key: "get_referrer_info", value: function() {
      return Z({ $referrer: this.props.$referrer, $referring_domain: this.props.$referring_domain });
    } }, { key: "safe_merge", value: function(e6) {
      return z(this.props, function(t2, n2) {
        n2 in e6 || (e6[n2] = t2);
      }), e6;
    } }, { key: "update_config", value: function(e6, t2) {
      if (this.default_expiry = this.expire_days = e6.cookie_expiration, this.set_disabled(e6.disable_persistence), this.set_cross_subdomain(e6.cross_subdomain_cookie), this.set_secure(e6.secure_cookie), e6.persistence !== t2.persistence) {
        var n2 = this.buildStorage(e6), i2 = this.props;
        this.clear(), this.storage = n2, this.props = i2, this.save();
      }
    } }, { key: "set_disabled", value: function(e6) {
      this.disabled = e6, this.disabled ? this.remove() : this.save();
    } }, { key: "set_cross_subdomain", value: function(e6) {
      e6 !== this.cross_subdomain && (this.cross_subdomain = e6, this.remove(), this.save());
    } }, { key: "get_cross_subdomain", value: function() {
      return !!this.cross_subdomain;
    } }, { key: "set_secure", value: function(e6) {
      e6 !== this.secure && (this.secure = e6, this.remove(), this.save());
    } }, { key: "set_event_timer", value: function(e6, t2) {
      var n2 = this.props[Oe] || {};
      n2[e6] = t2, this.props[Oe] = n2, this.save();
    } }, { key: "remove_event_timer", value: function(e6) {
      var t2 = (this.props[Oe] || {})[e6];
      return w(t2) || (delete this.props[Oe][e6], this.save()), t2;
    } }, { key: "get_user_state", value: function() {
      return this.props[Qe] || "anonymous";
    } }, { key: "set_user_state", value: function(e6) {
      this.props[Qe] = e6, this.save();
    } }, { key: "get_quota_limits", value: function() {
      return this.props[Ye] || {};
    } }, { key: "set_quota_limits", value: function(e6) {
      this.props[Ye] = e6, this.save();
    } }]), e5;
  }();
  var qn = 2;
  var Mn = 4;
  var Dn = s(function e2(t2) {
    var n2, r2, s2 = this, a2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    i(this, e2), o(this, "bucketSize", 100), o(this, "refillRate", 10), o(this, "mutationBuckets", {}), o(this, "loggedTracker", {}), o(this, "refillBuckets", function() {
      Object.keys(s2.mutationBuckets).forEach(function(e5) {
        s2.mutationBuckets[e5] = s2.mutationBuckets[e5] + s2.refillRate, s2.mutationBuckets[e5] >= s2.bucketSize && delete s2.mutationBuckets[e5];
      });
    }), o(this, "getNodeOrRelevantParent", function(e5) {
      var t3 = s2.rrweb.mirror.getNode(e5);
      if ((t3 == null ? void 0 : t3.nodeName) !== "svg" && t3 instanceof Element) {
        var n3 = t3.closest("svg");
        if (n3)
          return [s2.rrweb.mirror.getId(n3), n3];
      }
      return [e5, t3];
    }), o(this, "numberOfChanges", function(e5) {
      var t3, n3, i2, r3, s3, o2, a3, u2;
      return ((t3 = (n3 = e5.removes) === null || n3 === void 0 ? void 0 : n3.length) !== null && t3 !== void 0 ? t3 : 0) + ((i2 = (r3 = e5.attributes) === null || r3 === void 0 ? void 0 : r3.length) !== null && i2 !== void 0 ? i2 : 0) + ((s3 = (o2 = e5.texts) === null || o2 === void 0 ? void 0 : o2.length) !== null && s3 !== void 0 ? s3 : 0) + ((a3 = (u2 = e5.adds) === null || u2 === void 0 ? void 0 : u2.length) !== null && a3 !== void 0 ? a3 : 0);
    }), o(this, "throttleMutations", function(e5) {
      if (e5.type !== 3 || e5.data.source !== 0)
        return e5;
      var t3 = e5.data, n3 = s2.numberOfChanges(t3);
      t3.attributes && (t3.attributes = t3.attributes.filter(function(e6) {
        var t4, n4, i3, r3 = u(s2.getNodeOrRelevantParent(e6.id), 2), o2 = r3[0], a3 = r3[1];
        if (s2.mutationBuckets[o2] === 0)
          return false;
        (s2.mutationBuckets[o2] = (t4 = s2.mutationBuckets[o2]) !== null && t4 !== void 0 ? t4 : s2.bucketSize, s2.mutationBuckets[o2] = Math.max(s2.mutationBuckets[o2] - 1, 0), s2.mutationBuckets[o2] === 0) && (s2.loggedTracker[o2] || (s2.loggedTracker[o2] = true, (n4 = (i3 = s2.options).onBlockedNode) === null || n4 === void 0 || n4.call(i3, o2, a3)));
        return e6;
      }));
      var i2 = s2.numberOfChanges(t3);
      return i2 !== 0 || n3 === i2 ? e5 : void 0;
    }), this.rrweb = t2, this.options = a2, this.refillRate = (n2 = this.options.refillRate) !== null && n2 !== void 0 ? n2 : this.refillRate, this.bucketSize = (r2 = this.options.bucketSize) !== null && r2 !== void 0 ? r2 : this.bucketSize, setInterval(function() {
      s2.refillBuckets();
    }, 1e3);
  });
  var Ln = function(e5) {
    return e5[e5.DomContentLoaded = 0] = "DomContentLoaded", e5[e5.Load = 1] = "Load", e5[e5.FullSnapshot = 2] = "FullSnapshot", e5[e5.IncrementalSnapshot = 3] = "IncrementalSnapshot", e5[e5.Meta = 4] = "Meta", e5[e5.Custom = 5] = "Custom", e5[e5.Plugin = 6] = "Plugin", e5;
  }(Ln || {});
  var Nn = "[SessionRecording]";
  var Bn = { initiatorTypes: ["audio", "beacon", "body", "css", "early-hint", "embed", "fetch", "frame", "iframe", "icon", "image", "img", "input", "link", "navigation", "object", "ping", "script", "track", "video", "xmlhttprequest"], maskRequestFn: function(e5) {
    return e5;
  }, recordHeaders: false, recordBody: false, recordInitialRequests: false, recordPerformance: false, performanceEntryTypeToObserve: ["first-input", "navigation", "paint", "resource"], payloadSizeLimitBytes: 1e6 };
  var Hn = ["authorization", "x-forwarded-for", "authorization", "cookie", "set-cookie", "x-api-key", "x-real-ip", "remote-addr", "forwarded", "proxy-authorization", "x-csrf-token", "x-csrftoken", "x-xsrf-token"];
  var jn = ["password", "secret", "passwd", "api_key", "apikey", "auth", "credentials", "mysql_pwd", "privatekey", "private_key", "tokenconst"];
  var Un = ["/s/", "/e/", "/i/"];
  function Vn(e5, t2, n2, i2) {
    if (F(e5))
      return e5;
    var r2 = (t2 == null ? void 0 : t2["content-length"]) || function(e6) {
      return new Blob([e6]).size;
    }(e5);
    return k(r2) && (r2 = parseInt(r2)), r2 > n2 ? Nn + " ".concat(i2, " body too large to record (").concat(r2, " bytes)") : e5;
  }
  function Wn(e5, t2) {
    if (F(e5))
      return e5;
    var n2 = e5;
    return Fe(n2, false) || (n2 = Nn + " " + t2 + " body redacted"), z(jn, function(e6) {
      var i2, r2;
      (i2 = n2) !== null && i2 !== void 0 && i2.length && ((r2 = n2) === null || r2 === void 0 ? void 0 : r2.indexOf(e6)) !== -1 && (n2 = Nn + " " + t2 + " body redacted as might contain: " + e6);
    }), n2;
  }
  var zn = function(e5, n2) {
    var i2, r2, s2, o2 = e5.session_recording, a2 = o2.recordHeaders !== false && n2.recordHeaders, u2 = o2.recordBody !== false && n2.recordBody, l2 = o2.recordPerformance !== false && n2.recordPerformance, c2 = (i2 = o2, s2 = Math.min(1e6, (r2 = i2.payloadSizeLimitBytes) !== null && r2 !== void 0 ? r2 : 1e6), function(e6) {
      return e6 != null && e6.requestBody && (e6.requestBody = Vn(e6.requestBody, e6.requestHeaders, s2, "Request")), e6 != null && e6.responseBody && (e6.responseBody = Vn(e6.responseBody, e6.responseHeaders, s2, "Response")), e6;
    }), d2 = function(e6) {
      return function(e7) {
        if (!w(e7))
          return e7.requestBody = Wn(e7.requestBody, "Request"), e7.responseBody = Wn(e7.responseBody, "Response"), e7;
      }(c2(function(e7) {
        var t3 = Ct(e7.name);
        if (!(t3 && t3.pathname && Un.some(function(e8) {
          return t3.pathname.indexOf(e8) === 0;
        })))
          return e7;
      }((t2 = e6, z(Object.keys((n3 = t2.requestHeaders) !== null && n3 !== void 0 ? n3 : {}), function(e7) {
        var n4;
        Hn.includes(e7.toLowerCase()) && ((n4 = t2.requestHeaders) === null || n4 === void 0 || delete n4[e7]);
      }), t2))));
      var t2, n3;
    }, h2 = y(e5.session_recording.maskNetworkRequestFn);
    return h2 && y(e5.session_recording.maskCapturedNetworkRequestFn) && j.warn("Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored."), h2 && (e5.session_recording.maskCapturedNetworkRequestFn = function(n3) {
      var i3 = e5.session_recording.maskNetworkRequestFn({ url: n3.name });
      return t(t({}, n3), {}, { name: i3 == null ? void 0 : i3.url });
    }), o2.maskRequestFn = y(e5.session_recording.maskCapturedNetworkRequestFn) ? function(t2) {
      var n3, i3, r3, s3 = d2(t2);
      return s3 && (n3 = (i3 = (r3 = e5.session_recording).maskCapturedNetworkRequestFn) === null || i3 === void 0 ? void 0 : i3.call(r3, s3)) !== null && n3 !== void 0 ? n3 : void 0;
    } : void 0, o2.maskRequestFn || (o2.maskRequestFn = d2), t(t(t({}, Bn), o2), {}, { recordHeaders: a2, recordBody: u2, recordPerformance: l2, recordInitialRequests: l2 });
  };
  var Gn = "__ph_opt_in_out_";
  function Qn(e5, t2) {
    ni(true, e5, t2);
  }
  function Yn(e5, t2) {
    ni(false, e5, t2);
  }
  function Jn(e5, t2) {
    return ti(e5, t2) === "1";
  }
  function Kn(e5, t2) {
    return !!function(e6) {
      if (e6 && e6.respectDnt) {
        var t3 = e6 && e6.window || E, n2 = t3 == null ? void 0 : t3.navigator, i2 = false;
        return z([n2 == null ? void 0 : n2.doNotTrack, n2.msDoNotTrack, t3.doNotTrack], function(e7) {
          Q([true, 1, "1", "yes"], e7) && (i2 = true);
        }), i2;
      }
      return false;
    }(t2) || ti(e5, t2) === "0";
  }
  function Xn(e5, t2) {
    Zn(t2 = t2 || {}).remove(ei(e5, t2), !!t2.crossSubdomainCookie);
  }
  function Zn(e5) {
    return (e5 = e5 || {}).persistenceType === "localStorage" ? kt : e5.persistenceType === "localStorage+cookie" ? Ft : bt;
  }
  function ei(e5, t2) {
    return ((t2 = t2 || {}).persistencePrefix || Gn) + e5;
  }
  function ti(e5, t2) {
    return Zn(t2).get(ei(e5, t2));
  }
  function ni(e5, t2, n2) {
    k(t2) && t2.length ? (Zn(n2 = n2 || {}).set(ei(t2, n2), e5 ? 1 : 0, R(n2.cookieExpiration) ? n2.cookieExpiration : null, n2.crossSubdomainCookie, n2.secureCookie), n2.capture && e5 && n2.capture(n2.captureEventName || "$opt_in", n2.captureProperties || {}, { send_instantly: true })) : j.error("gdpr." + (e5 ? "optIn" : "optOut") + " called with an invalid token");
  }
  function ii(e5) {
    var t2 = false;
    try {
      var n2 = e5.config.token, i2 = e5.config.respect_dnt, r2 = e5.config.opt_out_capturing_persistence_type, s2 = e5.config.opt_out_capturing_cookie_prefix || void 0, o2 = e5.config.window;
      n2 && (t2 = Kn(n2, { respectDnt: i2, persistenceType: r2, persistencePrefix: s2, window: o2 }));
    } catch (e6) {
      j.error("Unexpected error when checking capturing opt-out status: " + e6);
    }
    return t2;
  }
  var ri;
  var si = 3e5;
  var oi = si;
  !function(e5) {
    e5[e5.Mutation = 0] = "Mutation", e5[e5.MouseMove = 1] = "MouseMove", e5[e5.MouseInteraction = 2] = "MouseInteraction", e5[e5.Scroll = 3] = "Scroll", e5[e5.ViewportResize = 4] = "ViewportResize", e5[e5.Input = 5] = "Input", e5[e5.TouchMove = 6] = "TouchMove", e5[e5.MediaInteraction = 7] = "MediaInteraction", e5[e5.StyleSheetRule = 8] = "StyleSheetRule", e5[e5.CanvasMutation = 9] = "CanvasMutation", e5[e5.Font = 10] = "Font", e5[e5.Log = 11] = "Log", e5[e5.Drag = 12] = "Drag", e5[e5.StyleDeclaration = 13] = "StyleDeclaration", e5[e5.Selection = 14] = "Selection", e5[e5.AdoptedStyleSheet = 15] = "AdoptedStyleSheet";
  }(ri || (ri = {}));
  var ai = [ri.MouseMove, ri.MouseInteraction, ri.Scroll, ri.ViewportResize, ri.Input, ri.TouchMove, ri.MediaInteraction, ri.Drag];
  var ui = function(e5) {
    return { rrwebMethod: e5, enqueuedAt: Date.now(), attempt: 1 };
  };
  var li = "[SessionRecording]";
  var ci = function() {
    function e5(t2) {
      var n2 = this;
      if (i(this, e5), o(this, "queuedRRWebEvents", []), o(this, "isIdle", false), o(this, "_linkedFlagSeen", false), o(this, "_lastActivityTimestamp", Date.now()), o(this, "windowId", null), o(this, "sessionId", null), o(this, "_linkedFlag", null), o(this, "_sampleRate", null), o(this, "_minimumDuration", null), o(this, "_forceAllowLocalhostNetworkCapture", false), this.instance = t2, this._captureStarted = false, this._endpoint = "/s/", this.stopRrweb = void 0, this.receivedDecide = false, E == null || E.addEventListener("beforeunload", function() {
        n2._flushBuffer();
      }), E == null || E.addEventListener("offline", function() {
        n2._tryAddCustomEvent("browser offline", {});
      }), E == null || E.addEventListener("online", function() {
        n2._tryAddCustomEvent("browser online", {});
      }), !this.instance.sessionManager)
        throw j.error(li + " started without valid sessionManager"), new Error(li + " started without valid sessionManager. This is a bug.");
      this.buffer = this.clearBuffer();
    }
    return s(e5, [{ key: "started", get: function() {
      return this._captureStarted;
    } }, { key: "sessionManager", get: function() {
      if (!this.instance.sessionManager)
        throw j.error(li + " started without valid sessionManager"), new Error(li + " started without valid sessionManager. This is a bug.");
      return this.instance.sessionManager;
    } }, { key: "isSampled", get: function() {
      return R(this._sampleRate) ? this.instance.get_property(He) : null;
    } }, { key: "sessionDuration", get: function() {
      var e6, t2, n2 = (e6 = this.buffer) === null || e6 === void 0 ? void 0 : e6.data[((t2 = this.buffer) === null || t2 === void 0 ? void 0 : t2.data.length) - 1], i2 = this.sessionManager.checkAndGetSessionAndWindowId(true).sessionStartTimestamp;
      return n2 ? n2.timestamp - i2 : null;
    } }, { key: "isRecordingEnabled", get: function() {
      var e6 = !!this.instance.get_property(qe), t2 = !this.instance.config.disable_session_recording;
      return E && e6 && t2;
    } }, { key: "isConsoleLogCaptureEnabled", get: function() {
      var e6 = !!this.instance.get_property(Me), t2 = this.instance.config.enable_recording_console_log;
      return t2 != null ? t2 : e6;
    } }, { key: "canvasRecording", get: function() {
      var e6 = this.instance.get_property(Ne);
      return e6 && e6.fps && e6.quality ? { enabled: e6.enabled, fps: e6.fps, quality: e6.quality } : void 0;
    } }, { key: "recordingVersion", get: function() {
      var e6, t2 = this.instance.get_property(De);
      return ((e6 = this.instance.config.session_recording) === null || e6 === void 0 ? void 0 : e6.recorderVersion) || t2 || "v1";
    } }, { key: "networkPayloadCapture", get: function() {
      var e6, t2, n2 = this.instance.get_property(Le), i2 = { recordHeaders: (e6 = this.instance.config.session_recording) === null || e6 === void 0 ? void 0 : e6.recordHeaders, recordBody: (t2 = this.instance.config.session_recording) === null || t2 === void 0 ? void 0 : t2.recordBody }, r2 = (i2 == null ? void 0 : i2.recordHeaders) || (n2 == null ? void 0 : n2.recordHeaders), s2 = (i2 == null ? void 0 : i2.recordBody) || (n2 == null ? void 0 : n2.recordBody), o2 = this.instance.config.capture_performance || (n2 == null ? void 0 : n2.capturePerformance);
      return r2 || s2 || o2 ? { recordHeaders: r2, recordBody: s2, recordPerformance: o2 } : void 0;
    } }, { key: "status", get: function() {
      return this.receivedDecide ? this.isRecordingEnabled ? F(this._linkedFlag) || this._linkedFlagSeen ? x(this.isSampled) ? this.isSampled ? "sampled" : "disabled" : "active" : "buffering" : "disabled" : "buffering";
    } }, { key: "startRecordingIfEnabled", value: function() {
      this.isRecordingEnabled ? (this._startCapture(), j.info(li + " started")) : (this.stopRecording(), this.clearBuffer());
    } }, { key: "stopRecording", value: function() {
      this._captureStarted && this.stopRrweb && (this.stopRrweb(), this.stopRrweb = void 0, this._captureStarted = false, j.info(li + " stopped"));
    } }, { key: "makeSamplingDecision", value: function(e6) {
      var t2, n2 = this.sessionId !== e6;
      if (R(this._sampleRate)) {
        var i2, r2 = this.isSampled;
        if (n2 || !x(r2))
          i2 = Math.random() < this._sampleRate;
        else
          i2 = r2;
        i2 || j.warn(li + " Sample rate (".concat(this._sampleRate, ") has determined that this sessionId (").concat(e6, ") will not be sent to the server.")), (t2 = this.instance.persistence) === null || t2 === void 0 || t2.register(o({}, He, i2));
      } else {
        var s2;
        (s2 = this.instance.persistence) === null || s2 === void 0 || s2.register(o({}, He, null));
      }
    } }, { key: "afterDecideResponse", value: function(e6) {
      var n2, i2, r2, s2, a2, u2, l2, c2, d2, h2, f2, p2 = this;
      this.instance.persistence && this.instance.persistence.register((o(f2 = {}, qe, !!e6.sessionRecording), o(f2, Me, (a2 = e6.sessionRecording) === null || a2 === void 0 ? void 0 : a2.consoleLogRecordingEnabled), o(f2, De, (u2 = e6.sessionRecording) === null || u2 === void 0 ? void 0 : u2.recorderVersion), o(f2, Le, t({ capturePerformance: e6.capturePerformance }, (l2 = e6.sessionRecording) === null || l2 === void 0 ? void 0 : l2.networkPayloadCapture)), o(f2, Ne, { enabled: (c2 = e6.sessionRecording) === null || c2 === void 0 ? void 0 : c2.recordCanvas, fps: (d2 = e6.sessionRecording) === null || d2 === void 0 ? void 0 : d2.canvasFps, quality: (h2 = e6.sessionRecording) === null || h2 === void 0 ? void 0 : h2.canvasQuality }), f2));
      var g2 = (n2 = e6.sessionRecording) === null || n2 === void 0 ? void 0 : n2.sampleRate;
      this._sampleRate = F(g2) ? null : parseFloat(g2);
      var v2, _2 = (i2 = e6.sessionRecording) === null || i2 === void 0 ? void 0 : i2.minimumDurationMilliseconds;
      (this._minimumDuration = w(_2) ? null : _2, this._linkedFlag = ((r2 = e6.sessionRecording) === null || r2 === void 0 ? void 0 : r2.linkedFlag) || null, (s2 = e6.sessionRecording) !== null && s2 !== void 0 && s2.endpoint) && (this._endpoint = (v2 = e6.sessionRecording) === null || v2 === void 0 ? void 0 : v2.endpoint);
      if (R(this._sampleRate) && this.sessionManager.onSessionId(function(e7) {
        p2.makeSamplingDecision(e7);
      }), !F(this._linkedFlag)) {
        var m2, y2, S2 = k(this._linkedFlag) ? this._linkedFlag : (m2 = this._linkedFlag) === null || m2 === void 0 ? void 0 : m2.flag, x2 = k(this._linkedFlag) ? null : (y2 = this._linkedFlag) === null || y2 === void 0 ? void 0 : y2.variant;
        this.instance.onFeatureFlags(function(e7, t2) {
          var n3 = b(t2) && S2 in t2, i3 = x2 ? t2[S2] === x2 : n3;
          i3 && j.info(li + " linked flag matched", { linkedFlag: S2, linkedVariant: x2 }), p2._linkedFlagSeen = i3;
        });
      }
      this.receivedDecide = true, this.startRecordingIfEnabled();
    } }, { key: "log", value: function(e6) {
      var t2, n2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "log";
      (t2 = this.instance.sessionRecording) === null || t2 === void 0 || t2.onRRwebEmit({ type: 6, data: { plugin: "rrweb/console@1", payload: { level: n2, trace: [], payload: [JSON.stringify(e6)] } }, timestamp: J() });
    } }, { key: "_startCapture", value: function() {
      var e6 = this;
      if (!w(Object.assign) && !(this._captureStarted || this.instance.config.disable_session_recording || ii(this.instance))) {
        this._captureStarted = true, this.sessionManager.checkAndGetSessionAndWindowId();
        var t2 = this.recordingVersion === "v2" ? "recorder-v2.js" : "recorder.js";
        this.instance.__loaded_recorder_version !== this.recordingVersion ? re(this.instance.requestRouter.endpointFor("assets", "/static/".concat(t2, "?v=").concat(f.LIB_VERSION)), function(n2) {
          if (n2)
            return j.error(li + " could not load ".concat(t2), n2);
          e6._onScriptLoaded();
        }) : this._onScriptLoaded();
      }
    } }, { key: "_isInteractiveEvent", value: function(e6) {
      var t2;
      return e6.type === 3 && ai.indexOf((t2 = e6.data) === null || t2 === void 0 ? void 0 : t2.source) !== -1;
    } }, { key: "_updateWindowAndSessionIds", value: function(e6) {
      var t2 = this._isInteractiveEvent(e6);
      t2 || this.isIdle || e6.timestamp - this._lastActivityTimestamp > oi && (this.isIdle = true, this._tryAddCustomEvent("sessionIdle", { reason: "user inactivity", timeSinceLastActive: e6.timestamp - this._lastActivityTimestamp, threshold: oi }));
      var n2 = false;
      if (t2 && (this._lastActivityTimestamp = e6.timestamp, this.isIdle && (this.isIdle = false, this._tryAddCustomEvent("sessionNoLongerIdle", { reason: "user activity", type: e6.type }), n2 = true)), !this.isIdle) {
        var i2 = this.sessionManager.checkAndGetSessionAndWindowId(!t2, e6.timestamp), r2 = i2.windowId, s2 = i2.sessionId, o2 = this.sessionId !== s2, a2 = this.windowId !== r2;
        this.windowId = r2, this.sessionId = s2, (n2 || [qn, Mn].indexOf(e6.type) === -1 && (a2 || o2)) && this._tryTakeFullSnapshot();
      }
    } }, { key: "_tryRRWebMethod", value: function(e6) {
      try {
        return e6.rrwebMethod(), true;
      } catch (t2) {
        return j.warn(li + " could not emit queued rrweb event.", t2), this.queuedRRWebEvents.length < 10 && this.queuedRRWebEvents.push({ enqueuedAt: e6.enqueuedAt || Date.now(), attempt: e6.attempt++, rrwebMethod: e6.rrwebMethod }), false;
      }
    } }, { key: "_tryAddCustomEvent", value: function(e6, t2) {
      var n2 = this;
      return this._tryRRWebMethod(ui(function() {
        return n2.rrwebRecord.addCustomEvent(e6, t2);
      }));
    } }, { key: "_tryTakeFullSnapshot", value: function() {
      var e6 = this;
      return this._tryRRWebMethod(ui(function() {
        return e6.rrwebRecord.takeFullSnapshot();
      }));
    } }, { key: "_onScriptLoaded", value: function() {
      var e6, n2 = this, i2 = { blockClass: "ph-no-capture", blockSelector: void 0, ignoreClass: "ph-ignore-input", maskTextClass: "ph-mask", maskTextSelector: void 0, maskTextFn: void 0, maskAllInputs: true, maskInputOptions: {}, maskInputFn: void 0, slimDOMOptions: {}, collectFonts: false, inlineStylesheet: true, recordCrossOriginIframes: false };
      this.rrwebRecord = E.rrweb ? E.rrweb.record : E.rrwebRecord;
      for (var r2 = this.instance.config.session_recording, s2 = 0, o2 = Object.entries(r2 || {}); s2 < o2.length; s2++) {
        var a2 = u(o2[s2], 2), l2 = a2[0], c2 = a2[1];
        l2 in i2 && (i2[l2] = c2);
      }
      if (this.canvasRecording && this.canvasRecording.enabled && (i2.recordCanvas = true, i2.sampling = { canvas: this.canvasRecording.fps }, i2.dataURLOptions = { type: "image/webp", quality: this.canvasRecording.quality }), this.rrwebRecord) {
        this.mutationRateLimiter = (e6 = this.mutationRateLimiter) !== null && e6 !== void 0 ? e6 : new Dn(this.rrwebRecord, { onBlockedNode: function(e7, t2) {
          var i3 = "Too many mutations on node '".concat(e7, "'. Rate limiting. This could be due to SVG animations or something similar");
          j.info(i3, { node: t2 }), n2.log(li + " " + i3, "warn");
        } }), this._scheduleFullSnapshot();
        var d2 = this._gatherRRWebPlugins();
        this.stopRrweb = this.rrwebRecord(t({ emit: function(e7) {
          n2.onRRwebEmit(e7);
        }, plugins: d2 }, i2)), this.instance._addCaptureHook(function(e7) {
          try {
            if (e7 === "$pageview") {
              var t2 = E ? n2._maskUrl(E.location.href) : "";
              if (!t2)
                return;
              n2._tryAddCustomEvent("$pageview", { href: t2 }), n2._tryTakeFullSnapshot();
            }
          } catch (e8) {
            j.error("Could not add $pageview to rrweb session", e8);
          }
        }), this._lastActivityTimestamp = Date.now(), this.isIdle = false, this._tryAddCustomEvent("$session_options", { sessionRecordingOptions: i2, activePlugins: d2.map(function(e7) {
          return e7 == null ? void 0 : e7.name;
        }) }), this._tryAddCustomEvent("$posthog_config", { config: this.instance.config });
      } else
        j.error(li + "onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.");
    } }, { key: "_scheduleFullSnapshot", value: function() {
      var e6 = this;
      this._fullSnapshotTimer && clearInterval(this._fullSnapshotTimer), this._fullSnapshotTimer = setInterval(function() {
        e6._tryTakeFullSnapshot();
      }, si);
    } }, { key: "_gatherRRWebPlugins", value: function() {
      var e6 = [];
      (B.rrwebConsoleRecord && this.isConsoleLogCaptureEnabled && e6.push(B.rrwebConsoleRecord.getRecordConsolePlugin()), this.networkPayloadCapture && y(B.getRecordNetworkPlugin)) && (!It.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? e6.push(B.getRecordNetworkPlugin(zn(this.instance.config, this.networkPayloadCapture))) : j.info(li + " NetworkCapture not started because we are on localhost."));
      return e6;
    } }, { key: "onRRwebEmit", value: function(e6) {
      if (this._processQueuedEvents(), e6 && b(e6)) {
        if (e6.type === Ln.Meta) {
          var t2 = this._maskUrl(e6.data.href);
          if (!t2)
            return;
          e6.data.href = t2;
        }
        e6.type === Ln.FullSnapshot && this._scheduleFullSnapshot();
        var n2 = this.mutationRateLimiter ? this.mutationRateLimiter.throttleMutations(e6) : e6;
        if (n2) {
          var i2 = function(e7) {
            var t3 = e7;
            if (t3 && b(t3) && t3.type === 6 && b(t3.data) && t3.data.plugin === "rrweb/console@1") {
              t3.data.payload.payload.length > 10 && (t3.data.payload.payload = t3.data.payload.payload.slice(0, 10), t3.data.payload.payload.push("...[truncated]"));
              for (var n3 = [], i3 = 0; i3 < t3.data.payload.payload.length; i3++)
                t3.data.payload.payload[i3] && t3.data.payload.payload[i3].length > 2e3 ? n3.push(t3.data.payload.payload[i3].slice(0, 2e3) + "...[truncated]") : n3.push(t3.data.payload.payload[i3]);
              return t3.data.payload.payload = n3, e7;
            }
            return e7;
          }(n2), r2 = JSON.stringify(i2).length;
          if (this._updateWindowAndSessionIds(i2), !this.isIdle || i2.type === Ln.Custom) {
            var s2 = { $snapshot_bytes: r2, $snapshot_data: i2, $session_id: this.sessionId, $window_id: this.windowId };
            this.status !== "disabled" ? this._captureSnapshotBuffered(s2) : this.clearBuffer();
          }
        }
      }
    } }, { key: "_processQueuedEvents", value: function() {
      var e6 = this;
      if (this.queuedRRWebEvents.length) {
        var t2 = l(this.queuedRRWebEvents);
        this.queuedRRWebEvents = [], t2.forEach(function(n2) {
          Date.now() - n2.enqueuedAt > 2e3 ? e6._tryAddCustomEvent("rrwebQueueTimeout", { enqueuedAt: n2.enqueuedAt, attempt: n2.attempt, queueLength: t2.length }) : e6._tryRRWebMethod(n2) && e6._tryAddCustomEvent("rrwebQueueSuccess", { enqueuedAt: n2.enqueuedAt, attempt: n2.attempt, queueLength: t2.length });
        });
      }
    } }, { key: "_maskUrl", value: function(e6) {
      var t2 = this.instance.config.session_recording;
      if (t2.maskNetworkRequestFn) {
        var n2, i2 = { url: e6 };
        return (n2 = i2 = t2.maskNetworkRequestFn(i2)) === null || n2 === void 0 ? void 0 : n2.url;
      }
      return e6;
    } }, { key: "clearBuffer", value: function() {
      return this.buffer = void 0, { size: 0, data: [], sessionId: this.sessionId, windowId: this.windowId };
    } }, { key: "_flushBuffer", value: function() {
      var e6 = this;
      this.flushBufferTimer && (clearTimeout(this.flushBufferTimer), this.flushBufferTimer = void 0);
      var t2 = this._minimumDuration, n2 = this.sessionDuration, i2 = R(n2) && n2 >= 0, r2 = R(t2) && i2 && n2 < t2;
      return this.status === "buffering" || r2 ? (this.flushBufferTimer = setTimeout(function() {
        e6._flushBuffer();
      }, 2e3), this.buffer || this.clearBuffer()) : this.buffer && this.buffer.data.length !== 0 ? (this._captureSnapshot({ $snapshot_bytes: this.buffer.size, $snapshot_data: this.buffer.data, $session_id: this.buffer.sessionId, $window_id: this.buffer.windowId }), this.clearBuffer()) : this.buffer || this.clearBuffer();
    } }, { key: "_captureSnapshotBuffered", value: function(e6) {
      var t2, n2 = this, i2 = 2 + (((t2 = this.buffer) === null || t2 === void 0 ? void 0 : t2.data.length) || 0);
      (!this.buffer || this.buffer.size + e6.$snapshot_bytes + i2 > 943718.4 || this.buffer.sessionId && this.buffer.sessionId !== this.sessionId) && (this.buffer = this._flushBuffer()), S(this.buffer.sessionId) && !S(this.sessionId) && (this.buffer.sessionId = this.sessionId, this.buffer.windowId = this.windowId), this.buffer.size += e6.$snapshot_bytes, this.buffer.data.push(e6.$snapshot_data), this.flushBufferTimer || (this.flushBufferTimer = setTimeout(function() {
        n2._flushBuffer();
      }, 2e3));
    } }, { key: "_captureSnapshot", value: function(e6) {
      this.instance.capture("$snapshot", e6, { _url: this.instance.requestRouter.endpointFor("api", this._endpoint), _noTruncate: true, _batchKey: "recordings" });
    } }]), e5;
  }();
  var di = function() {
    function e5(t2) {
      i(this, e5), this.instance = t2, this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags();
    }
    return s(e5, [{ key: "call", value: function() {
      var e6 = this, t2 = { token: this.instance.config.token, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), person_properties: this.instance.get_property(Ve), group_properties: this.instance.get_property(We), disable_flags: this.instance.config.advanced_disable_feature_flags || this.instance.config.advanced_disable_feature_flags_on_first_load || void 0 };
      this.instance._send_request({ method: "POST", url: this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), data: t2, compression: et.Base64, timeout: this.instance.config.feature_flag_request_timeout_ms, callback: function(t3) {
        return e6.parseDecideResponse(t3.json);
      } });
    } }, { key: "parseDecideResponse", value: function(e6) {
      var t2, n2 = this;
      this.instance.featureFlags.setReloadingPaused(false), this.instance.featureFlags._startReloadTimer();
      var i2 = !e6;
      if (this.instance.config.advanced_disable_feature_flags_on_first_load || this.instance.config.advanced_disable_feature_flags || this.instance.featureFlags.receivedFeatureFlags(e6 != null ? e6 : {}, i2), i2)
        j.error("Failed to fetch feature flags from PostHog.");
      else {
        if (!A || !A.body)
          return j.info("document not ready yet, trying again in 500 milliseconds..."), void setTimeout(function() {
            n2.parseDecideResponse(e6);
          }, 500);
        this.instance.toolbar.afterDecideResponse(e6), (t2 = this.instance.sessionRecording) === null || t2 === void 0 || t2.afterDecideResponse(e6), tt.afterDecideResponse(e6, this.instance), this.instance._afterDecideResponse(e6);
        var r2 = E == null ? void 0 : E.extendPostHogWithSurveys;
        e6.surveys && !r2 && re(this.instance.requestRouter.endpointFor("assets", "/static/surveys.js"), function(e7) {
          if (e7)
            return j.error("Could not load surveys script", e7);
          E.extendPostHogWithSurveys(n2.instance);
        });
        var s2 = E == null ? void 0 : E.extendPostHogWithExceptionAutoCapture;
        if (e6.autocaptureExceptions && e6.autocaptureExceptions && w(s2) && re(this.instance.requestRouter.endpointFor("assets", "/static/exception-autocapture.js"), function(t3) {
          if (t3)
            return j.error("Could not load exception autocapture script", t3);
          E.extendPostHogWithExceptionAutocapture(n2.instance, e6);
        }), e6.siteApps)
          if (this.instance.config.opt_in_site_apps) {
            var o2, a2 = h(e6.siteApps);
            try {
              var u2 = function() {
                var e7 = o2.value, t3 = e7.id, i3 = e7.url, r3 = n2.instance.requestRouter.endpointFor("api", i3);
                B["__$$ph_site_app_".concat(t3)] = n2.instance, re(r3, function(e8) {
                  e8 && j.error("Error while initializing PostHog app with config id ".concat(t3), e8);
                });
              };
              for (a2.s(); !(o2 = a2.n()).done; )
                u2();
            } catch (e7) {
              a2.e(e7);
            } finally {
              a2.f();
            }
          } else
            e6.siteApps.length > 0 && j.error('PostHog site apps are disabled. Enable the "opt_in_site_apps" config to proceed.');
      }
    } }]), e5;
  }();
  var hi = ["source"];
  var fi = E != null && E.location ? At(E.location.hash, "__posthog") || At(location.hash, "state") : null;
  var pi = function() {
    function e5(t2) {
      i(this, e5), this.instance = t2;
    }
    return s(e5, [{ key: "afterDecideResponse", value: function(e6) {
      var n2 = e6.toolbarParams || e6.editorParams || (e6.toolbarVersion ? { toolbarVersion: e6.toolbarVersion } : {});
      e6.isAuthenticated && n2.toolbarVersion && n2.toolbarVersion.indexOf("toolbar") === 0 && this.loadToolbar(t({}, n2));
    } }, { key: "maybeLoadToolbar", value: function() {
      var e6, t2, n2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0, i2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (!E || !A)
        return false;
      n2 = (e6 = n2) !== null && e6 !== void 0 ? e6 : E.location, r2 = (t2 = r2) !== null && t2 !== void 0 ? t2 : E.history;
      try {
        if (!i2) {
          try {
            E.localStorage.setItem("test", "test"), E.localStorage.removeItem("test");
          } catch (e7) {
            return false;
          }
          i2 = E == null ? void 0 : E.localStorage;
        }
        var s2, o2 = fi || At(n2.hash, "__posthog") || At(n2.hash, "state"), a2 = o2 ? K(function() {
          return JSON.parse(atob(decodeURIComponent(o2)));
        }) || K(function() {
          return JSON.parse(decodeURIComponent(o2));
        }) : null;
        return a2 && a2.action === "ph_authorize" ? ((s2 = a2).source = "url", s2 && Object.keys(s2).length > 0 && (a2.desiredHash ? n2.hash = a2.desiredHash : r2 ? r2.replaceState("", A.title, n2.pathname + n2.search) : n2.hash = "")) : ((s2 = JSON.parse(i2.getItem("_postHogToolbarParams") || "{}")).source = "localstorage", delete s2.userIntent), !(!s2.token || this.instance.config.token !== s2.token) && (this.loadToolbar(s2), true);
      } catch (e7) {
        return false;
      }
    } }, { key: "loadToolbar", value: function(e6) {
      var n2 = this;
      if (!E || B._postHogToolbarLoaded)
        return false;
      B._postHogToolbarLoaded = true;
      var i2 = 3e5, r2 = Math.floor(Date.now() / i2) * i2, s2 = this.instance.requestRouter.endpointFor("assets", "/static/toolbar.js?t=".concat(r2)), o2 = this.instance.requestRouter.region === "custom" && this.instance.config.advanced_disable_toolbar_metrics, u2 = t(t({ token: this.instance.config.token }, e6), {}, { apiURL: this.instance.requestRouter.endpointFor("ui") }, o2 ? { instrument: false } : {});
      u2.source;
      var l2 = a(u2, hi);
      return E.localStorage.setItem("_postHogToolbarParams", JSON.stringify(l2)), re(s2, function(e7) {
        e7 ? j.error("Failed to load toolbar", e7) : (B.ph_load_toolbar || B.ph_load_editor)(u2, n2.instance);
      }), ie(E, "turbolinks:load", function() {
        B._postHogToolbarLoaded = false, n2.loadToolbar(u2);
      }), true;
    } }, { key: "_loadEditor", value: function(e6) {
      return this.loadToolbar(e6);
    } }, { key: "maybeLoadEditor", value: function() {
      var e6 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0, t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      return this.maybeLoadToolbar(e6, t2, n2);
    } }]), e5;
  }();
  var gi = function() {
    function e5(t2) {
      i(this, e5), o(this, "isPaused", true), o(this, "queue", []), o(this, "flushTimeoutMs", 3e3), this.sendRequest = t2;
    }
    return s(e5, [{ key: "enqueue", value: function(e6) {
      this.queue.push(e6), this.flushTimeout || this.setFlushTimeout();
    } }, { key: "unload", value: function() {
      var e6 = this;
      this.clearFlushTimeout();
      var n2 = this.queue.length > 0 ? this.formatQueue() : {}, i2 = Object.values(n2);
      [].concat(l(i2.filter(function(e7) {
        return e7.url.indexOf("/e") === 0;
      })), l(i2.filter(function(e7) {
        return e7.url.indexOf("/e") !== 0;
      }))).map(function(n3) {
        e6.sendRequest(t(t({}, n3), {}, { transport: "sendBeacon" }));
      });
    } }, { key: "enable", value: function() {
      this.isPaused = false, this.setFlushTimeout();
    } }, { key: "setFlushTimeout", value: function() {
      var e6 = this;
      this.isPaused || (this.flushTimeout = setTimeout(function() {
        if (e6.clearFlushTimeout(), e6.queue.length > 0) {
          var t2 = e6.formatQueue(), n2 = function(n3) {
            var i3 = t2[n3], r2 = new Date().getTime();
            i3.data && m(i3.data) && z(i3.data, function(e7) {
              e7.offset = Math.abs(e7.timestamp - r2), delete e7.timestamp;
            }), e6.sendRequest(i3);
          };
          for (var i2 in t2)
            n2(i2);
        }
      }, this.flushTimeoutMs));
    } }, { key: "clearFlushTimeout", value: function() {
      clearTimeout(this.flushTimeout), this.flushTimeout = void 0;
    } }, { key: "formatQueue", value: function() {
      var e6 = {};
      return z(this.queue, function(n2) {
        var i2, r2 = n2, s2 = (r2 ? r2.batchKey : null) || r2.url;
        w(e6[s2]) && (e6[s2] = t(t({}, r2), {}, { data: [] })), (i2 = e6[s2].data) === null || i2 === void 0 || i2.push(r2.data);
      }), this.queue = [], e6;
    } }]), e5;
  }();
  var vi = Uint8Array;
  var _i = Uint16Array;
  var mi = Uint32Array;
  var yi = new vi([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
  var bi = new vi([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
  var wi = new vi([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var ki = function(e5, t2) {
    for (var n2 = new _i(31), i2 = 0; i2 < 31; ++i2)
      n2[i2] = t2 += 1 << e5[i2 - 1];
    var r2 = new mi(n2[30]);
    for (i2 = 1; i2 < 30; ++i2)
      for (var s2 = n2[i2]; s2 < n2[i2 + 1]; ++s2)
        r2[s2] = s2 - n2[i2] << 5 | i2;
    return [n2, r2];
  };
  var Si = ki(yi, 2);
  var Fi = Si[0];
  var Ri = Si[1];
  Fi[28] = 258, Ri[258] = 28;
  for (xi = ki(bi, 0)[1], Pi = new _i(32768), Ei = 0; Ei < 32768; ++Ei) {
    Ii = (43690 & Ei) >>> 1 | (21845 & Ei) << 1;
    Ii = (61680 & (Ii = (52428 & Ii) >>> 2 | (13107 & Ii) << 2)) >>> 4 | (3855 & Ii) << 4, Pi[Ei] = ((65280 & Ii) >>> 8 | (255 & Ii) << 8) >>> 1;
  }
  var Ii;
  var xi;
  var Pi;
  var Ei;
  var Ci = function(e5, t2, n2) {
    for (var i2 = e5.length, r2 = 0, s2 = new _i(t2); r2 < i2; ++r2)
      ++s2[e5[r2] - 1];
    var o2, a2 = new _i(t2);
    for (r2 = 0; r2 < t2; ++r2)
      a2[r2] = a2[r2 - 1] + s2[r2 - 1] << 1;
    if (n2) {
      o2 = new _i(1 << t2);
      var u2 = 15 - t2;
      for (r2 = 0; r2 < i2; ++r2)
        if (e5[r2])
          for (var l2 = r2 << 4 | e5[r2], c2 = t2 - e5[r2], d2 = a2[e5[r2] - 1]++ << c2, h2 = d2 | (1 << c2) - 1; d2 <= h2; ++d2)
            o2[Pi[d2] >>> u2] = l2;
    } else
      for (o2 = new _i(i2), r2 = 0; r2 < i2; ++r2)
        o2[r2] = Pi[a2[e5[r2] - 1]++] >>> 15 - e5[r2];
    return o2;
  };
  var $i = new vi(288);
  for (Ei = 0; Ei < 144; ++Ei)
    $i[Ei] = 8;
  for (Ei = 144; Ei < 256; ++Ei)
    $i[Ei] = 9;
  for (Ei = 256; Ei < 280; ++Ei)
    $i[Ei] = 7;
  for (Ei = 280; Ei < 288; ++Ei)
    $i[Ei] = 8;
  var Ti = new vi(32);
  for (Ei = 0; Ei < 32; ++Ei)
    Ti[Ei] = 5;
  var Oi = Ci($i, 9, 0);
  var Ai = Ci(Ti, 5, 0);
  var qi = function(e5) {
    return (e5 / 8 >> 0) + (7 & e5 && 1);
  };
  var Mi = function(e5, t2, n2) {
    (t2 == null || t2 < 0) && (t2 = 0), (n2 == null || n2 > e5.length) && (n2 = e5.length);
    var i2 = new (e5 instanceof _i ? _i : e5 instanceof mi ? mi : vi)(n2 - t2);
    return i2.set(e5.subarray(t2, n2)), i2;
  };
  var Di = function(e5, t2, n2) {
    n2 <<= 7 & t2;
    var i2 = t2 / 8 >> 0;
    e5[i2] |= n2, e5[i2 + 1] |= n2 >>> 8;
  };
  var Li = function(e5, t2, n2) {
    n2 <<= 7 & t2;
    var i2 = t2 / 8 >> 0;
    e5[i2] |= n2, e5[i2 + 1] |= n2 >>> 8, e5[i2 + 2] |= n2 >>> 16;
  };
  var Ni = function(e5, t2) {
    for (var n2 = [], i2 = 0; i2 < e5.length; ++i2)
      e5[i2] && n2.push({ s: i2, f: e5[i2] });
    var r2 = n2.length, s2 = n2.slice();
    if (!r2)
      return [new vi(0), 0];
    if (r2 == 1) {
      var o2 = new vi(n2[0].s + 1);
      return o2[n2[0].s] = 1, [o2, 1];
    }
    n2.sort(function(e6, t3) {
      return e6.f - t3.f;
    }), n2.push({ s: -1, f: 25001 });
    var a2 = n2[0], u2 = n2[1], l2 = 0, c2 = 1, d2 = 2;
    for (n2[0] = { s: -1, f: a2.f + u2.f, l: a2, r: u2 }; c2 != r2 - 1; )
      a2 = n2[n2[l2].f < n2[d2].f ? l2++ : d2++], u2 = n2[l2 != c2 && n2[l2].f < n2[d2].f ? l2++ : d2++], n2[c2++] = { s: -1, f: a2.f + u2.f, l: a2, r: u2 };
    var h2 = s2[0].s;
    for (i2 = 1; i2 < r2; ++i2)
      s2[i2].s > h2 && (h2 = s2[i2].s);
    var f2 = new _i(h2 + 1), p2 = Bi(n2[c2 - 1], f2, 0);
    if (p2 > t2) {
      i2 = 0;
      var g2 = 0, v2 = p2 - t2, _2 = 1 << v2;
      for (s2.sort(function(e6, t3) {
        return f2[t3.s] - f2[e6.s] || e6.f - t3.f;
      }); i2 < r2; ++i2) {
        var m2 = s2[i2].s;
        if (!(f2[m2] > t2))
          break;
        g2 += _2 - (1 << p2 - f2[m2]), f2[m2] = t2;
      }
      for (g2 >>>= v2; g2 > 0; ) {
        var y2 = s2[i2].s;
        f2[y2] < t2 ? g2 -= 1 << t2 - f2[y2]++ - 1 : ++i2;
      }
      for (; i2 >= 0 && g2; --i2) {
        var b2 = s2[i2].s;
        f2[b2] == t2 && (--f2[b2], ++g2);
      }
      p2 = t2;
    }
    return [new vi(f2), p2];
  };
  var Bi = function e3(t2, n2, i2) {
    return t2.s == -1 ? Math.max(e3(t2.l, n2, i2 + 1), e3(t2.r, n2, i2 + 1)) : n2[t2.s] = i2;
  };
  var Hi = function(e5) {
    for (var t2 = e5.length; t2 && !e5[--t2]; )
      ;
    for (var n2 = new _i(++t2), i2 = 0, r2 = e5[0], s2 = 1, o2 = function(e6) {
      n2[i2++] = e6;
    }, a2 = 1; a2 <= t2; ++a2)
      if (e5[a2] == r2 && a2 != t2)
        ++s2;
      else {
        if (!r2 && s2 > 2) {
          for (; s2 > 138; s2 -= 138)
            o2(32754);
          s2 > 2 && (o2(s2 > 10 ? s2 - 11 << 5 | 28690 : s2 - 3 << 5 | 12305), s2 = 0);
        } else if (s2 > 3) {
          for (o2(r2), --s2; s2 > 6; s2 -= 6)
            o2(8304);
          s2 > 2 && (o2(s2 - 3 << 5 | 8208), s2 = 0);
        }
        for (; s2--; )
          o2(r2);
        s2 = 1, r2 = e5[a2];
      }
    return [n2.subarray(0, i2), t2];
  };
  var ji = function(e5, t2) {
    for (var n2 = 0, i2 = 0; i2 < t2.length; ++i2)
      n2 += e5[i2] * t2[i2];
    return n2;
  };
  var Ui = function(e5, t2, n2) {
    var i2 = n2.length, r2 = qi(t2 + 2);
    e5[r2] = 255 & i2, e5[r2 + 1] = i2 >>> 8, e5[r2 + 2] = 255 ^ e5[r2], e5[r2 + 3] = 255 ^ e5[r2 + 1];
    for (var s2 = 0; s2 < i2; ++s2)
      e5[r2 + s2 + 4] = n2[s2];
    return 8 * (r2 + 4 + i2);
  };
  var Vi = function(e5, t2, n2, i2, r2, s2, o2, a2, u2, l2, c2) {
    Di(t2, c2++, n2), ++r2[256];
    for (var d2 = Ni(r2, 15), h2 = d2[0], f2 = d2[1], p2 = Ni(s2, 15), g2 = p2[0], v2 = p2[1], _2 = Hi(h2), m2 = _2[0], y2 = _2[1], b2 = Hi(g2), w2 = b2[0], k2 = b2[1], S2 = new _i(19), F2 = 0; F2 < m2.length; ++F2)
      S2[31 & m2[F2]]++;
    for (F2 = 0; F2 < w2.length; ++F2)
      S2[31 & w2[F2]]++;
    for (var R2 = Ni(S2, 7), x2 = R2[0], P2 = R2[1], E2 = 19; E2 > 4 && !x2[wi[E2 - 1]]; --E2)
      ;
    var I2, C2, $2, T2, O2 = l2 + 5 << 3, A2 = ji(r2, $i) + ji(s2, Ti) + o2, q2 = ji(r2, h2) + ji(s2, g2) + o2 + 14 + 3 * E2 + ji(S2, x2) + (2 * S2[16] + 3 * S2[17] + 7 * S2[18]);
    if (O2 <= A2 && O2 <= q2)
      return Ui(t2, c2, e5.subarray(u2, u2 + l2));
    if (Di(t2, c2, 1 + (q2 < A2)), c2 += 2, q2 < A2) {
      I2 = Ci(h2, f2, 0), C2 = h2, $2 = Ci(g2, v2, 0), T2 = g2;
      var M2 = Ci(x2, P2, 0);
      Di(t2, c2, y2 - 257), Di(t2, c2 + 5, k2 - 1), Di(t2, c2 + 10, E2 - 4), c2 += 14;
      for (F2 = 0; F2 < E2; ++F2)
        Di(t2, c2 + 3 * F2, x2[wi[F2]]);
      c2 += 3 * E2;
      for (var D2 = [m2, w2], L2 = 0; L2 < 2; ++L2) {
        var N2 = D2[L2];
        for (F2 = 0; F2 < N2.length; ++F2) {
          var B2 = 31 & N2[F2];
          Di(t2, c2, M2[B2]), c2 += x2[B2], B2 > 15 && (Di(t2, c2, N2[F2] >>> 5 & 127), c2 += N2[F2] >>> 12);
        }
      }
    } else
      I2 = Oi, C2 = $i, $2 = Ai, T2 = Ti;
    for (F2 = 0; F2 < a2; ++F2)
      if (i2[F2] > 255) {
        B2 = i2[F2] >>> 18 & 31;
        Li(t2, c2, I2[B2 + 257]), c2 += C2[B2 + 257], B2 > 7 && (Di(t2, c2, i2[F2] >>> 23 & 31), c2 += yi[B2]);
        var H2 = 31 & i2[F2];
        Li(t2, c2, $2[H2]), c2 += T2[H2], H2 > 3 && (Li(t2, c2, i2[F2] >>> 5 & 8191), c2 += bi[H2]);
      } else
        Li(t2, c2, I2[i2[F2]]), c2 += C2[i2[F2]];
    return Li(t2, c2, I2[256]), c2 + C2[256];
  };
  var Wi = new mi([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
  var zi = new vi(0);
  var Gi = function() {
    for (var e5 = new mi(256), t2 = 0; t2 < 256; ++t2) {
      for (var n2 = t2, i2 = 9; --i2; )
        n2 = (1 & n2 && 3988292384) ^ n2 >>> 1;
      e5[t2] = n2;
    }
    return e5;
  }();
  var Qi = function(e5, t2, n2, i2, r2) {
    return function(e6, t3, n3, i3, r3, s2) {
      var o2 = e6.length, a2 = new vi(i3 + o2 + 5 * (1 + Math.floor(o2 / 7e3)) + r3), u2 = a2.subarray(i3, a2.length - r3), l2 = 0;
      if (!t3 || o2 < 8)
        for (var c2 = 0; c2 <= o2; c2 += 65535) {
          var d2 = c2 + 65535;
          d2 < o2 ? l2 = Ui(u2, l2, e6.subarray(c2, d2)) : (u2[c2] = s2, l2 = Ui(u2, l2, e6.subarray(c2, o2)));
        }
      else {
        for (var h2 = Wi[t3 - 1], f2 = h2 >>> 13, p2 = 8191 & h2, g2 = (1 << n3) - 1, v2 = new _i(32768), _2 = new _i(g2 + 1), m2 = Math.ceil(n3 / 3), y2 = 2 * m2, b2 = function(t4) {
          return (e6[t4] ^ e6[t4 + 1] << m2 ^ e6[t4 + 2] << y2) & g2;
        }, w2 = new mi(25e3), k2 = new _i(288), S2 = new _i(32), F2 = 0, R2 = 0, x2 = (c2 = 0, 0), P2 = 0, E2 = 0; c2 < o2; ++c2) {
          var I2 = b2(c2), C2 = 32767 & c2, $2 = _2[I2];
          if (v2[C2] = $2, _2[I2] = C2, P2 <= c2) {
            var T2 = o2 - c2;
            if ((F2 > 7e3 || x2 > 24576) && T2 > 423) {
              l2 = Vi(e6, u2, 0, w2, k2, S2, R2, x2, E2, c2 - E2, l2), x2 = F2 = R2 = 0, E2 = c2;
              for (var O2 = 0; O2 < 286; ++O2)
                k2[O2] = 0;
              for (O2 = 0; O2 < 30; ++O2)
                S2[O2] = 0;
            }
            var A2 = 2, q2 = 0, M2 = p2, D2 = C2 - $2 & 32767;
            if (T2 > 2 && I2 == b2(c2 - D2))
              for (var L2 = Math.min(f2, T2) - 1, N2 = Math.min(32767, c2), B2 = Math.min(258, T2); D2 <= N2 && --M2 && C2 != $2; ) {
                if (e6[c2 + A2] == e6[c2 + A2 - D2]) {
                  for (var H2 = 0; H2 < B2 && e6[c2 + H2] == e6[c2 + H2 - D2]; ++H2)
                    ;
                  if (H2 > A2) {
                    if (A2 = H2, q2 = D2, H2 > L2)
                      break;
                    var j2 = Math.min(D2, H2 - 2), U2 = 0;
                    for (O2 = 0; O2 < j2; ++O2) {
                      var V2 = c2 - D2 + O2 + 32768 & 32767, W2 = V2 - v2[V2] + 32768 & 32767;
                      W2 > U2 && (U2 = W2, $2 = V2);
                    }
                  }
                }
                D2 += (C2 = $2) - ($2 = v2[C2]) + 32768 & 32767;
              }
            if (q2) {
              w2[x2++] = 268435456 | Ri[A2] << 18 | xi[q2];
              var z2 = 31 & Ri[A2], G2 = 31 & xi[q2];
              R2 += yi[z2] + bi[G2], ++k2[257 + z2], ++S2[G2], P2 = c2 + A2, ++F2;
            } else
              w2[x2++] = e6[c2], ++k2[e6[c2]];
          }
        }
        l2 = Vi(e6, u2, s2, w2, k2, S2, R2, x2, E2, c2 - E2, l2), s2 || (l2 = Ui(u2, l2, zi));
      }
      return Mi(a2, 0, i3 + qi(l2) + r3);
    }(e5, t2.level == null ? 6 : t2.level, t2.mem == null ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(e5.length)))) : 12 + t2.mem, n2, i2, !r2);
  };
  var Yi = function(e5, t2, n2) {
    for (; n2; ++t2)
      e5[t2] = n2, n2 >>>= 8;
  };
  function Ji(e5, t2) {
    t2 === void 0 && (t2 = {});
    var n2 = function() {
      var e6 = 4294967295;
      return { p: function(t3) {
        for (var n3 = e6, i3 = 0; i3 < t3.length; ++i3)
          n3 = Gi[255 & n3 ^ t3[i3]] ^ n3 >>> 8;
        e6 = n3;
      }, d: function() {
        return 4294967295 ^ e6;
      } };
    }(), i2 = e5.length;
    n2.p(e5);
    var r2, s2 = Qi(e5, t2, 10 + ((r2 = t2).filename && r2.filename.length + 1 || 0), 8), o2 = s2.length;
    return function(e6, t3) {
      var n3 = t3.filename;
      if (e6[0] = 31, e6[1] = 139, e6[2] = 8, e6[8] = t3.level < 2 ? 4 : t3.level == 9 ? 2 : 0, e6[9] = 3, t3.mtime != 0 && Yi(e6, 4, Math.floor(new Date(t3.mtime || Date.now()) / 1e3)), n3) {
        e6[3] = 8;
        for (var i3 = 0; i3 <= n3.length; ++i3)
          e6[i3 + 10] = n3.charCodeAt(i3);
      }
    }(s2, t2), Yi(s2, o2 - 8, n2.d()), Yi(s2, o2 - 4, i2), s2;
  }
  var Ki = !!D || !!M;
  var Xi = function(e5, n2) {
    var i2 = u(e5.split("?"), 2), r2 = i2[0], s2 = i2[1], o2 = t({}, n2);
    s2 == null || s2.split("&").forEach(function(e6) {
      var t2 = u(e6.split("="), 1)[0];
      delete o2[t2];
    });
    var a2 = Tt(o2);
    return a2 = a2 ? (s2 ? s2 + "&" : "") + a2 : s2, "".concat(r2, "?").concat(a2);
  };
  var Zi = function(e5) {
    return "data=" + encodeURIComponent(typeof e5 == "string" ? e5 : JSON.stringify(e5));
  };
  var er = function(e5) {
    var t2 = e5.data, n2 = e5.compression, i2 = e5.transport, r2 = e5.method;
    if (!t2)
      return null;
    if (n2 === et.GZipJS) {
      var s2 = Ji(function(e6, t3) {
        var n3 = e6.length;
        if (!t3 && typeof TextEncoder != "undefined")
          return new TextEncoder().encode(e6);
        for (var i3 = new vi(e6.length + (e6.length >>> 1)), r3 = 0, s3 = function(e7) {
          i3[r3++] = e7;
        }, o3 = 0; o3 < n3; ++o3) {
          if (r3 + 5 > i3.length) {
            var a3 = new vi(r3 + 8 + (n3 - o3 << 1));
            a3.set(i3), i3 = a3;
          }
          var u2 = e6.charCodeAt(o3);
          u2 < 128 || t3 ? s3(u2) : u2 < 2048 ? (s3(192 | u2 >>> 6), s3(128 | 63 & u2)) : u2 > 55295 && u2 < 57344 ? (s3(240 | (u2 = 65536 + (1047552 & u2) | 1023 & e6.charCodeAt(++o3)) >>> 18), s3(128 | u2 >>> 12 & 63), s3(128 | u2 >>> 6 & 63), s3(128 | 63 & u2)) : (s3(224 | u2 >>> 12), s3(128 | u2 >>> 6 & 63), s3(128 | 63 & u2));
        }
        return Mi(i3, 0, r3);
      }(JSON.stringify(t2)), { mtime: 0 });
      return new Blob([s2], { type: "text/plain" });
    }
    if (i2 === "sendBeacon") {
      var o2 = n2 === et.Base64 ? te(JSON.stringify(t2)) : t2;
      return new Blob([Zi(o2)], { type: "application/x-www-form-urlencoded" });
    }
    if (n2 === et.Base64) {
      var a2 = te(JSON.stringify(t2));
      return Zi(a2);
    }
    return r2 !== "POST" ? null : Zi(t2);
  };
  var tr = function(e5) {
    var t2 = new D();
    t2.open(e5.method || "GET", e5.url, true);
    var n2 = er(e5);
    z(e5.headers, function(e6, n3) {
      t2.setRequestHeader(n3, e6);
    }), e5.method === "POST" && typeof n2 == "string" && t2.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), e5.timeout && (t2.timeout = e5.timeout), t2.withCredentials = true, t2.onreadystatechange = function() {
      if (t2.readyState === 4) {
        var n3, i2 = { statusCode: t2.status, text: t2.responseText };
        if (t2.status === 200)
          try {
            i2.json = JSON.parse(t2.responseText);
          } catch (e6) {
          }
        (n3 = e5.callback) === null || n3 === void 0 || n3.call(e5, i2);
      }
    }, t2.send(n2);
  };
  var nr = function(e5) {
    var t2, n2 = er(e5), i2 = new Headers();
    z(i2, function(e6, t3) {
      i2.append(t3, e6);
    }), e5.method === "POST" && typeof n2 == "string" && i2.append("Content-Type", "application/x-www-form-urlencoded");
    var r2 = e5.url, s2 = null;
    if (L) {
      var o2 = new L();
      s2 = { signal: o2.signal, timeout: setTimeout(function() {
        return o2.abort();
      }, e5.timeout) };
    }
    M(r2, { method: (e5 == null ? void 0 : e5.method) || "GET", headers: i2, keepalive: e5.method === "POST", body: n2, signal: (t2 = s2) === null || t2 === void 0 ? void 0 : t2.signal }).then(function(t3) {
      return t3.text().then(function(n3) {
        var i3, r3 = { statusCode: t3.status, text: n3 };
        if (t3.status === 200)
          try {
            r3.json = JSON.parse(n3);
          } catch (e6) {
            j.error(e6);
          }
        (i3 = e5.callback) === null || i3 === void 0 || i3.call(e5, r3);
      });
    }).catch(function(t3) {
      var n3;
      j.error(t3), (n3 = e5.callback) === null || n3 === void 0 || n3.call(e5, { statusCode: 0, text: t3 });
    }).finally(function() {
      return s2 ? clearTimeout(s2.timeout) : null;
    });
  };
  var ir = function(e5) {
    var t2 = Xi(e5.url, { beacon: "1" });
    try {
      O.sendBeacon(t2, er(e5));
    } catch (e6) {
    }
  };
  var rr = function(e5) {
    var t2;
    if (A) {
      var n2 = A.createElement("script");
      n2.type = "text/javascript", n2.async = true, n2.defer = true, n2.src = e5.url;
      var i2 = A.getElementsByTagName("script")[0];
      (t2 = i2.parentNode) === null || t2 === void 0 || t2.insertBefore(n2, i2);
    }
  };
  var sr = ["retriesPerformedSoFar"];
  var or;
  var ar = function() {
    function e5(t2) {
      var n2 = this;
      i(this, e5), o(this, "isPolling", false), o(this, "pollIntervalMs", 3e3), o(this, "queue", []), this.instance = t2, this.queue = [], this.areWeOnline = true, !w(E) && "onLine" in E.navigator && (this.areWeOnline = E.navigator.onLine, E.addEventListener("online", function() {
        n2.areWeOnline = true, n2.flush();
      }), E.addEventListener("offline", function() {
        n2.areWeOnline = false;
      }));
    }
    return s(e5, [{ key: "retriableRequest", value: function(e6) {
      var n2 = this, i2 = e6.retriesPerformedSoFar, r2 = a(e6, sr);
      R(i2) && i2 > 0 && (r2.url = Xi(r2.url, { retry_count: i2 })), this.instance._send_request(t(t({}, r2), {}, { callback: function(e7) {
        var s2;
        e7.statusCode !== 200 && (e7.statusCode < 400 || e7.statusCode >= 500) && (i2 != null ? i2 : 0) < 10 ? n2.enqueue(t({}, r2)) : (s2 = r2.callback) === null || s2 === void 0 || s2.call(r2, e7);
      } }));
    } }, { key: "enqueue", value: function(e6) {
      var t2 = e6.retriesPerformedSoFar || 0;
      e6.retriesPerformedSoFar = t2 + 1;
      var n2 = function(e7) {
        var t3 = 3e3 * Math.pow(2, e7), n3 = t3 / 2, i3 = Math.min(18e5, t3), r3 = (Math.random() - 0.5) * (i3 - n3);
        return Math.ceil(i3 + r3);
      }(t2), i2 = Date.now() + n2;
      this.queue.push({ retryAt: i2, requestOptions: e6 });
      var r2 = "Enqueued failed request for retry in ".concat(n2);
      navigator.onLine || (r2 += " (Browser is offline)"), j.warn(r2), this.isPolling || (this.isPolling = true, this.poll());
    } }, { key: "poll", value: function() {
      var e6 = this;
      this.poller && clearTimeout(this.poller), this.poller = setTimeout(function() {
        e6.areWeOnline && e6.queue.length > 0 && e6.flush(), e6.poll();
      }, this.pollIntervalMs);
    } }, { key: "flush", value: function() {
      var e6 = Date.now(), t2 = [], n2 = this.queue.filter(function(n3) {
        return n3.retryAt < e6 || (t2.push(n3), false);
      });
      if (this.queue = t2, n2.length > 0) {
        var i2, r2 = h(n2);
        try {
          for (r2.s(); !(i2 = r2.n()).done; ) {
            var s2 = i2.value.requestOptions;
            this.retriableRequest(s2);
          }
        } catch (e7) {
          r2.e(e7);
        } finally {
          r2.f();
        }
      }
    } }, { key: "unload", value: function() {
      this.poller && (clearTimeout(this.poller), this.poller = void 0);
      var e6, n2 = h(this.queue);
      try {
        for (n2.s(); !(e6 = n2.n()).done; ) {
          var i2 = e6.value.requestOptions;
          try {
            this.instance._send_request(t(t({}, i2), {}, { transport: "sendBeacon" }));
          } catch (e7) {
            j.error(e7);
          }
        }
      } catch (e7) {
        n2.e(e7);
      } finally {
        n2.f();
      }
      this.queue = [];
    } }]), e5;
  }();
  var ur = 1800;
  var lr = function() {
    function e5(t2, n2, r2, s2) {
      i(this, e5), o(this, "_sessionIdChangedHandlers", []), this.config = t2, this.persistence = n2, this._windowId = void 0, this._sessionId = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this._sessionIdGenerator = r2 || ft, this._windowIdGenerator = s2 || ft;
      var a2 = t2.persistence_name || t2.token, u2 = t2.session_idle_timeout_seconds || ur;
      if (R(u2) ? u2 > ur ? j.warn("session_idle_timeout_seconds cannot be  greater than 30 minutes. Using 30 minutes instead.") : u2 < 60 && j.warn("session_idle_timeout_seconds cannot be less than 60 seconds. Using 60 seconds instead.") : (j.warn("session_idle_timeout_seconds must be a number. Defaulting to 30 minutes."), u2 = ur), this._sessionTimeoutMs = 1e3 * Math.min(Math.max(u2, 60), ur), this._window_id_storage_key = "ph_" + a2 + "_window_id", this._primary_window_exists_storage_key = "ph_" + a2 + "_primary_window_exists", this._canUseSessionStorage()) {
        var l2 = Et.parse(this._window_id_storage_key), c2 = Et.parse(this._primary_window_exists_storage_key);
        l2 && !c2 ? this._windowId = l2 : Et.remove(this._window_id_storage_key), Et.set(this._primary_window_exists_storage_key, true);
      }
      this._listenToReloadWindow();
    }
    return s(e5, [{ key: "onSessionId", value: function(e6) {
      var t2 = this;
      return w(this._sessionIdChangedHandlers) && (this._sessionIdChangedHandlers = []), this._sessionIdChangedHandlers.push(e6), this._sessionId && e6(this._sessionId, this._windowId), function() {
        t2._sessionIdChangedHandlers = t2._sessionIdChangedHandlers.filter(function(t3) {
          return t3 !== e6;
        });
      };
    } }, { key: "_canUseSessionStorage", value: function() {
      return this.config.persistence !== "memory" && !this.persistence.disabled && Et.is_supported();
    } }, { key: "_setWindowId", value: function(e6) {
      e6 !== this._windowId && (this._windowId = e6, this._canUseSessionStorage() && Et.set(this._window_id_storage_key, e6));
    } }, { key: "_getWindowId", value: function() {
      return this._windowId ? this._windowId : this._canUseSessionStorage() ? Et.parse(this._window_id_storage_key) : null;
    } }, { key: "_setSessionId", value: function(e6, t2, n2) {
      e6 === this._sessionId && t2 === this._sessionActivityTimestamp && n2 === this._sessionStartTimestamp || (this._sessionStartTimestamp = n2, this._sessionActivityTimestamp = t2, this._sessionId = e6, this.persistence.register(o({}, Be, [t2, e6, n2])));
    } }, { key: "_getSessionId", value: function() {
      if (this._sessionId && this._sessionActivityTimestamp && this._sessionStartTimestamp)
        return [this._sessionActivityTimestamp, this._sessionId, this._sessionStartTimestamp];
      var e6 = this.persistence.props[Be];
      return m(e6) && e6.length === 2 && e6.push(e6[0]), e6 || [0, null, 0];
    } }, { key: "resetSessionId", value: function() {
      this._setSessionId(null, null, null);
    } }, { key: "_listenToReloadWindow", value: function() {
      var e6 = this;
      E == null || E.addEventListener("beforeunload", function() {
        e6._canUseSessionStorage() && Et.remove(e6._primary_window_exists_storage_key);
      });
    } }, { key: "checkAndGetSessionAndWindowId", value: function() {
      var e6 = arguments.length > 0 && arguments[0] !== void 0 && arguments[0], t2 = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null) || new Date().getTime(), n2 = u(this._getSessionId(), 3), i2 = n2[0], r2 = n2[1], s2 = n2[2], o2 = this._getWindowId(), a2 = s2 && s2 > 0 && Math.abs(t2 - s2) > 864e5, l2 = false, c2 = !r2, d2 = !e6 && Math.abs(t2 - i2) > this._sessionTimeoutMs;
      c2 || d2 || a2 ? (r2 = this._sessionIdGenerator(), o2 = this._windowIdGenerator(), j.info("[SessionId] new session ID generated", { sessionId: r2, windowId: o2, changeReason: { noSessionId: c2, activityTimeout: d2, sessionPastMaximumLength: a2 } }), s2 = t2, l2 = true) : o2 || (o2 = this._windowIdGenerator(), l2 = true);
      var h2 = i2 === 0 || !e6 || a2 ? t2 : i2, f2 = s2 === 0 ? new Date().getTime() : s2;
      return this._setWindowId(o2), this._setSessionId(r2, h2, f2), l2 && this._sessionIdChangedHandlers.forEach(function(e7) {
        return e7(r2, o2);
      }), { sessionId: r2, windowId: o2, sessionStartTimestamp: f2 };
    } }]), e5;
  }();
  !function(e5) {
    e5.US = "us", e5.EU = "eu", e5.CUSTOM = "custom";
  }(or || (or = {}));
  var cr = function() {
    function e5(t2) {
      i(this, e5), o(this, "_regionCache", {}), this.instance = t2;
    }
    return s(e5, [{ key: "apiHost", get: function() {
      return this.instance.config.api_host.trim().replace(/\/$/, "");
    } }, { key: "uiHost", get: function() {
      var e6;
      return (e6 = this.instance.config.ui_host) === null || e6 === void 0 ? void 0 : e6.replace(/\/$/, "");
    } }, { key: "region", get: function() {
      return this._regionCache[this.apiHost] || (/https:\/\/(app|us|us-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = or.US : /https:\/\/(eu|eu-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = or.EU : this._regionCache[this.apiHost] = or.CUSTOM), this._regionCache[this.apiHost];
    } }, { key: "endpointFor", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      if (t2 && (t2 = t2[0] === "/" ? t2 : "/".concat(t2)), e6 === "ui")
        return (this.uiHost || this.apiHost) + t2;
      if (this.region === or.CUSTOM)
        return this.apiHost + t2;
      var n2 = "i.posthog.com" + t2;
      switch (e6) {
        case "assets":
          return "https://".concat(this.region, "-assets.").concat(n2);
        case "api":
          return "https://".concat(this.region, ".").concat(n2);
      }
    } }]), e5;
  }();
  var dr = s(function e4(t2, n2, r2, s2) {
    i(this, e4), this.name = "posthog-js", this.setupOnce = function(e5) {
      e5(function(e6) {
        var i2, o2, a2, u2, l2;
        if (e6.level !== "error" || !t2.__loaded)
          return e6;
        e6.tags || (e6.tags = {});
        var c2 = t2.requestRouter.endpointFor("ui", "/person/" + t2.get_distinct_id());
        e6.tags["PostHog Person URL"] = c2, t2.sessionRecordingStarted() && (e6.tags["PostHog Recording URL"] = t2.get_session_replay_url({ withTimestamp: true }));
        var d2 = ((i2 = e6.exception) === null || i2 === void 0 ? void 0 : i2.values) || [], h2 = { $exception_message: (o2 = d2[0]) === null || o2 === void 0 ? void 0 : o2.value, $exception_type: (a2 = d2[0]) === null || a2 === void 0 ? void 0 : a2.type, $exception_personURL: c2, $sentry_event_id: e6.event_id, $sentry_exception: e6.exception, $sentry_exception_message: (u2 = d2[0]) === null || u2 === void 0 ? void 0 : u2.value, $sentry_exception_type: (l2 = d2[0]) === null || l2 === void 0 ? void 0 : l2.type, $sentry_tags: e6.tags };
        return n2 && r2 && (h2.$sentry_url = (s2 || "https://sentry.io/organizations/") + n2 + "/issues/?project=" + r2 + "&query=" + e6.event_id), t2.capture("$exception", h2), e6;
      });
    };
  });
  var hr = function() {
    function e5(t2) {
      var n2 = this;
      i(this, e5), o(this, "_hasSeenPageView", false), o(this, "_updateScrollData", function() {
        var e6, t3, i2, r2;
        n2._pageViewData || (n2._pageViewData = n2._createPageViewData());
        var s2 = n2._pageViewData, o2 = n2._scrollY(), a2 = n2._scrollHeight(), u2 = n2._contentY(), l2 = n2._contentHeight();
        s2.lastScrollY = o2, s2.maxScrollY = Math.max(o2, (e6 = s2.maxScrollY) !== null && e6 !== void 0 ? e6 : 0), s2.maxScrollHeight = Math.max(a2, (t3 = s2.maxScrollHeight) !== null && t3 !== void 0 ? t3 : 0), s2.lastContentY = u2, s2.maxContentY = Math.max(u2, (i2 = s2.maxContentY) !== null && i2 !== void 0 ? i2 : 0), s2.maxContentHeight = Math.max(l2, (r2 = s2.maxContentHeight) !== null && r2 !== void 0 ? r2 : 0);
      }), this._instance = t2;
    }
    return s(e5, [{ key: "_createPageViewData", value: function() {
      var e6;
      return { pathname: (e6 = E == null ? void 0 : E.location.pathname) !== null && e6 !== void 0 ? e6 : "" };
    } }, { key: "doPageView", value: function() {
      var e6, n2;
      return this._hasSeenPageView ? (n2 = this._pageViewData, this._pageViewData = this._createPageViewData()) : (this._hasSeenPageView = true, n2 = void 0, this._pageViewData || (this._pageViewData = this._createPageViewData())), setTimeout(this._updateScrollData, 0), t({ $prev_pageview_pathname: (e6 = n2) === null || e6 === void 0 ? void 0 : e6.pathname }, this._calculatePrevPageScrollProperties(n2));
    } }, { key: "doPageLeave", value: function() {
      var e6 = this._pageViewData;
      return t({ $prev_pageview_pathname: e6 == null ? void 0 : e6.pathname }, this._calculatePrevPageScrollProperties(e6));
    } }, { key: "_calculatePrevPageScrollProperties", value: function(e6) {
      if (!e6 || e6.maxScrollHeight == null || e6.lastScrollY == null || e6.maxScrollY == null || e6.maxContentHeight == null || e6.lastContentY == null || e6.maxContentY == null)
        return {};
      var t2 = e6.maxScrollHeight, n2 = e6.lastScrollY, i2 = e6.maxScrollY, r2 = e6.maxContentHeight, s2 = e6.lastContentY, o2 = e6.maxContentY;
      return t2 = Math.ceil(t2), n2 = Math.ceil(n2), i2 = Math.ceil(i2), r2 = Math.ceil(r2), s2 = Math.ceil(s2), o2 = Math.ceil(o2), { $prev_pageview_last_scroll: n2, $prev_pageview_last_scroll_percentage: t2 <= 1 ? 1 : fr(n2 / t2, 0, 1), $prev_pageview_max_scroll: i2, $prev_pageview_max_scroll_percentage: t2 <= 1 ? 1 : fr(i2 / t2, 0, 1), $prev_pageview_last_content: s2, $prev_pageview_last_content_percentage: r2 <= 1 ? 1 : fr(s2 / r2, 0, 1), $prev_pageview_max_content: o2, $prev_pageview_max_content_percentage: r2 <= 1 ? 1 : fr(o2 / r2, 0, 1) };
    } }, { key: "startMeasuringScrollPosition", value: function() {
      E == null || E.addEventListener("scroll", this._updateScrollData, true), E == null || E.addEventListener("scrollend", this._updateScrollData, true), E == null || E.addEventListener("resize", this._updateScrollData);
    } }, { key: "stopMeasuringScrollPosition", value: function() {
      E == null || E.removeEventListener("scroll", this._updateScrollData), E == null || E.removeEventListener("scrollend", this._updateScrollData), E == null || E.removeEventListener("resize", this._updateScrollData);
    } }, { key: "_scrollElement", value: function() {
      if (!this._instance.config.scroll_root_selector)
        return E == null ? void 0 : E.document.documentElement;
      var e6, t2 = h(m(this._instance.config.scroll_root_selector) ? this._instance.config.scroll_root_selector : [this._instance.config.scroll_root_selector]);
      try {
        for (t2.s(); !(e6 = t2.n()).done; ) {
          var n2 = e6.value, i2 = E == null ? void 0 : E.document.querySelector(n2);
          if (i2)
            return i2;
        }
      } catch (e7) {
        t2.e(e7);
      } finally {
        t2.f();
      }
    } }, { key: "_scrollHeight", value: function() {
      var e6 = this._scrollElement();
      return e6 ? Math.max(0, e6.scrollHeight - e6.clientHeight) : 0;
    } }, { key: "_scrollY", value: function() {
      if (this._instance.config.scroll_root_selector) {
        var e6 = this._scrollElement();
        return e6 && e6.scrollTop || 0;
      }
      return E && (E.scrollY || E.pageYOffset || E.document.documentElement.scrollTop) || 0;
    } }, { key: "_contentHeight", value: function() {
      var e6 = this._scrollElement();
      return (e6 == null ? void 0 : e6.scrollHeight) || 0;
    } }, { key: "_contentY", value: function() {
      var e6 = this._scrollElement(), t2 = (e6 == null ? void 0 : e6.clientHeight) || 0;
      return this._scrollY() + t2;
    } }]), e5;
  }();
  function fr(e5, t2, n2) {
    return Math.max(t2, Math.min(e5, n2));
  }
  var pr = { icontains: function(e5) {
    return !!E && E.location.href.toLowerCase().indexOf(e5.toLowerCase()) > -1;
  }, regex: function(e5) {
    return !!E && $t(E.location.href, e5);
  }, exact: function(e5) {
    return (E == null ? void 0 : E.location.href) === e5;
  } };
  var gr = function() {
    function e5(t2) {
      i(this, e5), this.instance = t2;
    }
    return s(e5, [{ key: "getSurveys", value: function(e6) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], i2 = this.instance.get_property(ze);
      if (i2 && !n2)
        return e6(i2);
      this.instance._send_request({ url: this.instance.requestRouter.endpointFor("api", "/api/surveys/?token=".concat(this.instance.config.token)), method: "GET", transport: "XHR", callback: function(n3) {
        var i3;
        if (n3.statusCode !== 200 || !n3.json)
          return e6([]);
        var r2 = n3.json.surveys || [];
        return (i3 = t2.instance.persistence) === null || i3 === void 0 || i3.register(o({}, ze, r2)), e6(r2);
      } });
    } }, { key: "getActiveMatchingSurveys", value: function(e6) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.getSurveys(function(n3) {
        var i2 = n3.filter(function(e7) {
          return !(!e7.start_date || e7.end_date);
        }).filter(function(e7) {
          var t3, n4, i3, r2;
          if (!e7.conditions)
            return true;
          var s2 = (t3 = e7.conditions) === null || t3 === void 0 || !t3.url || pr[(n4 = (i3 = e7.conditions) === null || i3 === void 0 ? void 0 : i3.urlMatchType) !== null && n4 !== void 0 ? n4 : "icontains"](e7.conditions.url), o2 = (r2 = e7.conditions) === null || r2 === void 0 || !r2.selector || (A == null ? void 0 : A.querySelector(e7.conditions.selector));
          return s2 && o2;
        }).filter(function(e7) {
          if (!e7.linked_flag_key && !e7.targeting_flag_key)
            return true;
          var n4 = !e7.linked_flag_key || t2.instance.featureFlags.isFeatureEnabled(e7.linked_flag_key), i3 = !e7.targeting_flag_key || t2.instance.featureFlags.isFeatureEnabled(e7.targeting_flag_key);
          return n4 && i3;
        });
        return e6(i2);
      }, n2);
    } }]), e5;
  }();
  var vr = function() {
    function e5() {
      var t2 = this;
      i(this, e5), o(this, "limits", {}), o(this, "checkForLimiting", function(e6) {
        var n2 = e6.text;
        if (n2 && n2.length)
          try {
            (JSON.parse(n2).quota_limited || []).forEach(function(e7) {
              j.info("[RateLimiter] ".concat(e7 || "events", " is quota limited.")), t2.limits[e7] = new Date().getTime() + 6e4;
            });
          } catch (e7) {
            return void j.warn('[RateLimiter] could not rate limit - continuing. Error: "'.concat(e7 == null ? void 0 : e7.message, '"'), { text: n2 });
          }
      });
    }
    return s(e5, [{ key: "isRateLimited", value: function(e6) {
      var t2 = this.limits[e6 || "events"] || false;
      return t2 !== false && new Date().getTime() < t2;
    } }]), e5;
  }();
  var _r = function() {
    return t({ initialPathName: (q == null ? void 0 : q.pathname) || "", referringDomain: Tn.referringDomain() }, Tn.campaignParams());
  };
  var mr = function() {
    function e5(t2, n2, r2) {
      var s2 = this;
      i(this, e5), o(this, "_onSessionIdCallback", function(e6) {
        var t3 = s2._getStoredProps();
        if (!t3 || t3.sessionId !== e6) {
          var n3 = { sessionId: e6, props: s2._sessionSourceParamGenerator() };
          s2._persistence.register(o({}, Je, n3));
        }
      }), this._sessionIdManager = t2, this._persistence = n2, this._sessionSourceParamGenerator = r2 || _r, this._sessionIdManager.onSessionId(this._onSessionIdCallback);
    }
    return s(e5, [{ key: "_getStoredProps", value: function() {
      return this._persistence.props[Je];
    } }, { key: "getSessionProps", value: function() {
      var e6, t2 = (e6 = this._getStoredProps()) === null || e6 === void 0 ? void 0 : e6.props;
      return t2 ? { $client_session_initial_referring_host: t2.referringDomain, $client_session_initial_pathname: t2.initialPathName, $client_session_initial_utm_source: t2.utm_source, $client_session_initial_utm_campaign: t2.utm_campaign, $client_session_initial_utm_medium: t2.utm_medium, $client_session_initial_utm_content: t2.utm_content, $client_session_initial_utm_term: t2.utm_term } : {};
    } }]), e5;
  }();
  var yr = ["ahrefsbot", "ahrefssiteaudit", "applebot", "baiduspider", "bingbot", "bingpreview", "bot.htm", "bot.php", "crawler", "duckduckbot", "facebookexternal", "facebookcatalog", "gptbot", "http://yandex.com/bots", "hubspot", "ia_archiver", "linkedinbot", "mj12bot", "msnbot", "nessus", "petalbot", "pinterest", "prerender", "rogerbot", "screaming frog", "semrushbot", "sitebulb", "slurp", "turnitin", "twitterbot", "vercelbot", "yahoo! slurp", "yandexbot", "adsbot-google", "apis-google", "duplexweb-google", "feedfetcher-google", "google favicon", "google web preview", "google-read-aloud", "googlebot", "googleweblight", "mediapartners-google", "storebot-google"];
  var br = function(e5, t2) {
    if (!e5)
      return false;
    var n2 = e5.toLowerCase();
    return yr.concat(t2 || []).some(function(e6) {
      var t3 = e6.toLowerCase();
      return n2.includes ? n2.includes(t3) : n2.indexOf(t3) !== -1;
    });
  };
  var wr = {};
  var kr = function() {
  };
  var Sr = "posthog";
  var Fr = !Ki && (N == null ? void 0 : N.indexOf("MSIE")) === -1 && (N == null ? void 0 : N.indexOf("Mozilla")) === -1;
  var Rr = function() {
    var e5, t2, n2;
    return { api_host: "https://app.posthog.com", api_transport: "XHR", ui_host: null, token: "", autocapture: true, rageclick: true, cross_subdomain_cookie: (t2 = A == null ? void 0 : A.location, n2 = t2 == null ? void 0 : t2.hostname, !!k(n2) && n2.split(".").slice(-2).join(".") !== "herokuapp.com"), persistence: "localStorage+cookie", persistence_name: "", cookie_name: "", loaded: kr, store_google: true, custom_campaign_params: [], custom_blocked_useragents: [], save_referrer: true, capture_pageview: true, capture_pageleave: true, debug: false, verbose: false, cookie_expiration: 365, upgrade: false, disable_session_recording: false, disable_persistence: false, disable_cookie: false, enable_recording_console_log: void 0, secure_cookie: (E == null || (e5 = E.location) === null || e5 === void 0 ? void 0 : e5.protocol) === "https:", ip: true, opt_out_capturing_by_default: false, opt_out_persistence_by_default: false, opt_out_useragent_filter: false, opt_out_capturing_persistence_type: "localStorage", opt_out_capturing_cookie_prefix: null, opt_in_site_apps: false, property_blacklist: [], property_denylist: [], respect_dnt: false, sanitize_properties: null, request_headers: {}, inapp_protocol: "//", inapp_link_new_window: false, request_batching: true, properties_string_max_length: 65535, session_recording: {}, mask_all_element_attributes: false, mask_all_text: false, advanced_disable_decide: false, advanced_disable_feature_flags: false, advanced_disable_feature_flags_on_first_load: false, advanced_disable_toolbar_metrics: false, feature_flag_request_timeout_ms: 3e3, on_request_error: function(e6) {
      var t3 = "Bad HTTP status: " + e6.statusCode + " " + e6.text;
      j.error(t3);
    }, get_device_id: function(e6) {
      return e6;
    }, _onCapture: kr, capture_performance: void 0, name: "posthog", bootstrap: {}, disable_compression: false, session_idle_timeout_seconds: 1800 };
  };
  var xr = function() {
    function e5() {
      i(this, e5), o(this, "__forceAllowLocalhost", false);
    }
    return s(e5, [{ key: "_forceAllowLocalhost", get: function() {
      return this.__forceAllowLocalhost;
    }, set: function(e6) {
      j.error("WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`"), this.__forceAllowLocalhost = e6;
    } }]), e5;
  }();
  var Pr = function() {
    function e5() {
      var t2 = this;
      i(this, e5), o(this, "webPerformance", new xr()), o(this, "compression", et.Base64), this.config = Rr(), this.decideEndpointWasHit = false, this.SentryIntegration = dr, this.segmentIntegration = function() {
        return function(e6) {
          Promise && Promise.resolve || j.warn("This browser does not have Promise support, and can not use the segment integration");
          var t3 = function(t4, n2) {
            t4.event.userId || t4.event.anonymousId === e6.get_distinct_id() || e6.reset(), t4.event.userId && t4.event.userId !== e6.get_distinct_id() && (e6.register({ distinct_id: t4.event.userId }), e6.reloadFeatureFlags());
            var i2 = e6._calculate_event_properties(n2, t4.event.properties);
            return t4.event.properties = Object.assign({}, i2, t4.event.properties), t4;
          };
          return { name: "PostHog JS", type: "enrichment", version: "1.0.0", isLoaded: function() {
            return true;
          }, load: function() {
            return Promise.resolve();
          }, track: function(e7) {
            return t3(e7, e7.event.event);
          }, page: function(e7) {
            return t3(e7, "$pageview");
          }, identify: function(e7) {
            return t3(e7, "$identify");
          }, screen: function(e7) {
            return t3(e7, "$screen");
          } };
        }(t2);
      }, this.__captureHooks = [], this.__request_queue = [], this.__loaded = false, this.__loaded_recorder_version = void 0, this.__autocapture = void 0, this.analyticsDefaultEndpoint = "/e/", this.elementsChainAsString = false, this.featureFlags = new ot(this), this.toolbar = new pi(this), this.pageViewManager = new hr(this), this.surveys = new gr(this), this.rateLimiter = new vr(), this.requestRouter = new cr(this), this.people = { set: function(e6, n2, i2) {
        var r2 = k(e6) ? o({}, e6, n2) : e6;
        t2.setPersonProperties(r2), i2 == null || i2({});
      }, set_once: function(e6, n2, i2) {
        var r2 = k(e6) ? o({}, e6, n2) : e6;
        t2.setPersonProperties(void 0, r2), i2 == null || i2({});
      } };
    }
    return s(e5, [{ key: "init", value: function(t2, n2, i2) {
      if (i2 && i2 !== Sr) {
        var r2, s2 = (r2 = wr[i2]) !== null && r2 !== void 0 ? r2 : new e5();
        return s2._init(t2, n2, i2), wr[i2] = s2, wr[Sr][i2] = s2, s2;
      }
      return this._init(t2, n2, i2);
    } }, { key: "_init", value: function(e6) {
      var n2, i2, r2, s2 = this, o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a2 = arguments.length > 2 ? arguments[2] : void 0;
      if (w(e6) || function(e7) {
        return k(e7) && e7.trim().length === 0;
      }(e6))
        j.critical("PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()");
      else {
        if (!this.__loaded) {
          var u2;
          if (this.__loaded = true, this.config = {}, this._triggered_notifs = [], o2.request_headers = o2.request_headers || o2.xhr_headers, this.set_config(G({}, Rr(), o2, { name: a2, token: e6 })), E != null && (n2 = E.rrweb) !== null && n2 !== void 0 && n2.record || E != null && E.rrwebRecord)
            this.__loaded_recorder_version = E == null || (u2 = E.rrweb) === null || u2 === void 0 ? void 0 : u2.version;
          if (this.persistence = new An(this.config), this.sessionPersistence = this.config.persistence === "sessionStorage" ? this.persistence : new An(t(t({}, this.config), {}, { persistence: "sessionStorage" })), this._requestQueue = new gi(function(e7) {
            return s2._send_request(e7);
          }), this._retryQueue = new ar(this), this.__captureHooks = [], this.__request_queue = [], this.sessionManager = new lr(this.config, this.persistence), this.sessionPropsManager = new mr(this.sessionManager, this.persistence), this.sessionRecording = new ci(this), this.sessionRecording.startRecordingIfEnabled(), this.config.disable_scroll_properties || this.pageViewManager.startMeasuringScrollPosition(), this.__autocapture = this.config.autocapture, tt._setIsAutocaptureEnabled(this), tt._isAutocaptureEnabled) {
            this.__autocapture = this.config.autocapture;
            tt.enabledForProject(this.config.token, 100, 100) ? tt.isBrowserSupported() ? tt.init(this) : (this.__autocapture = false, j.info("Disabling Automatic Event Collection because this browser is not supported")) : (this.__autocapture = false, j.info("Not in active bucket: disabling Automatic Event Collection."));
          }
          if (f.DEBUG = f.DEBUG || this.config.debug, this._gdpr_init(), o2.segment && (this.config.get_device_id = function() {
            return o2.segment.user().anonymousId();
          }, o2.segment.user().id() && (this.register({ distinct_id: o2.segment.user().id() }), this.persistence.set_user_state("identified"))), ((i2 = o2.bootstrap) === null || i2 === void 0 ? void 0 : i2.distinctID) !== void 0) {
            var l2, c2, d2 = this.config.get_device_id(ft()), h2 = (l2 = o2.bootstrap) !== null && l2 !== void 0 && l2.isIdentifiedID ? d2 : o2.bootstrap.distinctID;
            this.persistence.set_user_state((c2 = o2.bootstrap) !== null && c2 !== void 0 && c2.isIdentifiedID ? "identified" : "anonymous"), this.register({ distinct_id: o2.bootstrap.distinctID, $device_id: h2 });
          }
          if (this._hasBootstrappedFeatureFlags()) {
            var p2, g2, v2 = Object.keys(((p2 = o2.bootstrap) === null || p2 === void 0 ? void 0 : p2.featureFlags) || {}).filter(function(e7) {
              var t2, n3;
              return !((t2 = o2.bootstrap) === null || t2 === void 0 || (n3 = t2.featureFlags) === null || n3 === void 0 || !n3[e7]);
            }).reduce(function(e7, t2) {
              var n3, i3;
              return e7[t2] = ((n3 = o2.bootstrap) === null || n3 === void 0 || (i3 = n3.featureFlags) === null || i3 === void 0 ? void 0 : i3[t2]) || false, e7;
            }, {}), _2 = Object.keys(((g2 = o2.bootstrap) === null || g2 === void 0 ? void 0 : g2.featureFlagPayloads) || {}).filter(function(e7) {
              return v2[e7];
            }).reduce(function(e7, t2) {
              var n3, i3, r3, s3;
              (n3 = o2.bootstrap) !== null && n3 !== void 0 && (i3 = n3.featureFlagPayloads) !== null && i3 !== void 0 && i3[t2] && (e7[t2] = (r3 = o2.bootstrap) === null || r3 === void 0 || (s3 = r3.featureFlagPayloads) === null || s3 === void 0 ? void 0 : s3[t2]);
              return e7;
            }, {});
            this.featureFlags.receivedFeatureFlags({ featureFlags: v2, featureFlagPayloads: _2 });
          }
          if (!this.get_distinct_id()) {
            var m2 = this.config.get_device_id(ft());
            this.register_once({ distinct_id: m2, $device_id: m2 }, ""), this.persistence.set_user_state("anonymous");
          }
          return E == null || (r2 = E.addEventListener) === null || r2 === void 0 || r2.call(E, "onpagehide" in self ? "pagehide" : "unload", this._handle_unload.bind(this)), this.toolbar.maybeLoadToolbar(), o2.segment ? o2.segment.register(this.segmentIntegration()).then(function() {
            s2._loaded();
          }) : this._loaded(), this;
        }
        j.warn("You have already initialized PostHog! Re-initialising is a no-op");
      }
    } }, { key: "_afterDecideResponse", value: function(e6) {
      var t2;
      this.compression = void 0, e6.supportedCompression && !this.config.disable_compression && (this.compression = Q(e6.supportedCompression, et.GZipJS) ? et.GZipJS : Q(e6.supportedCompression, et.Base64) ? et.Base64 : void 0), (t2 = e6.analytics) !== null && t2 !== void 0 && t2.endpoint && (this.analyticsDefaultEndpoint = e6.analytics.endpoint), e6.elementsChainAsString && (this.elementsChainAsString = e6.elementsChainAsString);
    } }, { key: "_loaded", value: function() {
      var e6 = this, t2 = this.config.advanced_disable_decide;
      t2 || this.featureFlags.setReloadingPaused(true);
      try {
        this.config.loaded(this);
      } catch (e7) {
        j.critical("`loaded` function failed", e7);
      }
      this._start_queue_if_opted_in(), this.config.capture_pageview && setTimeout(function() {
        A && e6.capture("$pageview", { title: A.title }, { send_instantly: true });
      }, 1), t2 || (new di(this).call(), this.featureFlags.resetRequestQueue());
    } }, { key: "_start_queue_if_opted_in", value: function() {
      var e6;
      this.has_opted_out_capturing() || this.config.request_batching && ((e6 = this._requestQueue) === null || e6 === void 0 || e6.enable());
    } }, { key: "_dom_loaded", value: function() {
      var e6 = this;
      this.has_opted_out_capturing() || W(this.__request_queue, function(t2) {
        return e6._send_retriable_request(t2);
      }), this.__request_queue = [], this._start_queue_if_opted_in();
    } }, { key: "_handle_unload", value: function() {
      var e6, t2;
      this.config.request_batching ? (this.config.capture_pageview && this.config.capture_pageleave && this.capture("$pageleave"), (e6 = this._requestQueue) === null || e6 === void 0 || e6.unload(), (t2 = this._retryQueue) === null || t2 === void 0 || t2.unload()) : this.config.capture_pageview && this.config.capture_pageleave && this.capture("$pageleave", null, { transport: "sendBeacon" });
    } }, { key: "_send_request", value: function(e6) {
      var n2 = this;
      this.__loaded && (Fr ? this.__request_queue.push(e6) : this.rateLimiter.isRateLimited(e6.batchKey) || (e6.transport = e6.transport || this.config.api_transport, e6.url = Xi(e6.url, { ip: this.config.ip ? 1 : 0 }), e6.headers = this.config.request_headers, e6.compression = e6.compression === "best-available" ? this.compression : e6.compression, function(e7) {
        var n3 = t({}, e7);
        n3.timeout = n3.timeout || 6e4, n3.url = Xi(n3.url, { _: new Date().getTime().toString(), ver: f.LIB_VERSION, compression: n3.compression }), n3.transport === "sendBeacon" && O != null && O.sendBeacon ? ir(n3) : n3.transport === "fetch" && M ? nr(n3) : D || !A ? tr(n3) : rr(n3);
      }(t(t({}, e6), {}, { callback: function(t2) {
        var i2, r2, s2;
        (n2.rateLimiter.checkForLimiting(t2), t2.statusCode >= 400) && ((r2 = (s2 = n2.config).on_request_error) === null || r2 === void 0 || r2.call(s2, t2));
        (i2 = e6.callback) === null || i2 === void 0 || i2.call(e6, t2);
      } }))));
    } }, { key: "_send_retriable_request", value: function(e6) {
      this._retryQueue ? this._retryQueue.retriableRequest(e6) : this._send_request(e6);
    } }, { key: "_execute_array", value: function(e6) {
      var t2, n2 = this, i2 = [], r2 = [], s2 = [];
      W(e6, function(e7) {
        e7 && (t2 = e7[0], m(t2) ? s2.push(e7) : y(e7) ? e7.call(n2) : m(e7) && t2 === "alias" ? i2.push(e7) : m(e7) && t2.indexOf("capture") !== -1 && y(n2[t2]) ? s2.push(e7) : r2.push(e7));
      });
      var o2 = function(e7, t3) {
        W(e7, function(e8) {
          if (m(e8[0])) {
            var n3 = t3;
            z(e8, function(e9) {
              n3 = n3[e9[0]].apply(n3, e9.slice(1));
            });
          } else
            this[e8[0]].apply(this, e8.slice(1));
        }, t3);
      };
      o2(i2, this), o2(r2, this), o2(s2, this);
    } }, { key: "_hasBootstrappedFeatureFlags", value: function() {
      var e6, t2;
      return ((e6 = this.config.bootstrap) === null || e6 === void 0 ? void 0 : e6.featureFlags) && Object.keys((t2 = this.config.bootstrap) === null || t2 === void 0 ? void 0 : t2.featureFlags).length > 0 || false;
    } }, { key: "push", value: function(e6) {
      this._execute_array([e6]);
    } }, { key: "capture", value: function(e6, n2, i2) {
      var r2;
      if (!this.__loaded || !this.sessionPersistence || !this._requestQueue)
        return j.uninitializedWarning("posthog.capture");
      if (!ii(this))
        if (!w(e6) && k(e6)) {
          if (!N || this.config.opt_out_useragent_filter || !br(N, this.config.custom_blocked_useragents)) {
            this.sessionPersistence.update_search_keyword(), this.config.store_google && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info();
            var s2 = { uuid: ft(), event: e6, properties: this._calculate_event_properties(e6, n2 || {}) };
            e6 === "$identify" && (s2.$set = i2 == null ? void 0 : i2.$set, s2.$set_once = i2 == null ? void 0 : i2.$set_once), (s2 = ee(s2, i2 != null && i2._noTruncate ? null : this.config.properties_string_max_length)).timestamp = (i2 == null ? void 0 : i2.timestamp) || new Date(), w(i2 == null ? void 0 : i2.timestamp) || (s2.properties.$event_time_override_provided = true, s2.properties.$event_time_override_system_time = new Date());
            var o2 = t(t({}, s2.properties.$set), s2.$set);
            (function(e7) {
              if (b(e7)) {
                for (var t2 in e7)
                  if (v.call(e7, t2))
                    return false;
                return true;
              }
              return false;
            })(o2) || this.setPersonPropertiesForFlags(o2), j.info("send", s2);
            var a2 = { method: "POST", url: (r2 = i2 == null ? void 0 : i2._url) !== null && r2 !== void 0 ? r2 : this.requestRouter.endpointFor("api", this.analyticsDefaultEndpoint), data: s2, compression: "best-available", batchKey: i2 == null ? void 0 : i2._batchKey };
            return !this.config.request_batching || i2 && (i2 == null || !i2._batchKey) || i2 != null && i2.send_instantly ? this._send_retriable_request(a2) : this._requestQueue.enqueue(a2), this._invokeCaptureHooks(e6, s2), s2;
          }
        } else
          j.error("No event name provided to posthog.capture");
    } }, { key: "_addCaptureHook", value: function(e6) {
      this.__captureHooks.push(e6);
    } }, { key: "_invokeCaptureHooks", value: function(e6, t2) {
      this.config._onCapture(e6, t2), z(this.__captureHooks, function(t3) {
        return t3(e6);
      });
    } }, { key: "_calculate_event_properties", value: function(e6, n2) {
      if (!this.persistence || !this.sessionPersistence)
        return n2;
      var i2 = this.persistence.remove_event_timer(e6), r2 = t({}, n2);
      if (r2.token = this.config.token, e6 === "$snapshot") {
        var s2 = t(t({}, this.persistence.properties()), this.sessionPersistence.properties());
        return r2.distinct_id = s2.distinct_id, r2;
      }
      var o2 = Tn.properties();
      if (this.sessionManager) {
        var a2 = this.sessionManager.checkAndGetSessionAndWindowId(), u2 = a2.sessionId, c2 = a2.windowId;
        r2.$session_id = u2, r2.$window_id = c2;
      }
      if (this.sessionPropsManager && this.config.__preview_send_client_session_params && (e6 === "$pageview" || e6 === "$pageleave" || e6 === "$autocapture")) {
        var d2 = this.sessionPropsManager.getSessionProps();
        r2 = G(r2, d2);
      }
      if (!this.config.disable_scroll_properties) {
        var h2 = {};
        e6 === "$pageview" ? h2 = this.pageViewManager.doPageView() : e6 === "$pageleave" && (h2 = this.pageViewManager.doPageLeave()), r2 = G(r2, h2);
      }
      if (e6 === "$pageview" && A && (r2.title = A.title), e6 === "$performance_event") {
        var f2 = this.persistence.properties();
        return r2.distinct_id = f2.distinct_id, r2.$current_url = o2.$current_url, r2;
      }
      if (!w(i2)) {
        var p2 = new Date().getTime() - i2;
        r2.$duration = parseFloat((p2 / 1e3).toFixed(3));
      }
      (N && this.config.opt_out_useragent_filter && (r2.$browser_type = br(N, this.config.custom_blocked_useragents) ? "bot" : "browser"), r2 = G({}, Tn.properties(), this.persistence.properties(), this.sessionPersistence.properties(), r2), m(this.config.property_denylist) && m(this.config.property_blacklist)) ? z([].concat(l(this.config.property_blacklist), l(this.config.property_denylist)), function(e7) {
        delete r2[e7];
      }) : j.error("Invalid value for property_denylist config: " + this.config.property_denylist + " or property_blacklist config: " + this.config.property_blacklist);
      var g2 = this.config.sanitize_properties;
      return g2 && (r2 = g2(r2, e6)), r2;
    } }, { key: "register", value: function(e6, t2) {
      var n2;
      (n2 = this.persistence) === null || n2 === void 0 || n2.register(e6, t2);
    } }, { key: "register_once", value: function(e6, t2, n2) {
      var i2;
      (i2 = this.persistence) === null || i2 === void 0 || i2.register_once(e6, t2, n2);
    } }, { key: "register_for_session", value: function(e6) {
      var t2;
      (t2 = this.sessionPersistence) === null || t2 === void 0 || t2.register(e6);
    } }, { key: "unregister", value: function(e6) {
      var t2;
      (t2 = this.persistence) === null || t2 === void 0 || t2.unregister(e6);
    } }, { key: "unregister_for_session", value: function(e6) {
      var t2;
      (t2 = this.sessionPersistence) === null || t2 === void 0 || t2.unregister(e6);
    } }, { key: "_register_single", value: function(e6, t2) {
      this.register(o({}, e6, t2));
    } }, { key: "getFeatureFlag", value: function(e6, t2) {
      return this.featureFlags.getFeatureFlag(e6, t2);
    } }, { key: "getFeatureFlagPayload", value: function(e6) {
      var t2 = this.featureFlags.getFeatureFlagPayload(e6);
      try {
        return JSON.parse(t2);
      } catch (e7) {
        return t2;
      }
    } }, { key: "isFeatureEnabled", value: function(e6, t2) {
      return this.featureFlags.isFeatureEnabled(e6, t2);
    } }, { key: "reloadFeatureFlags", value: function() {
      this.featureFlags.reloadFeatureFlags();
    } }, { key: "updateEarlyAccessFeatureEnrollment", value: function(e6, t2) {
      this.featureFlags.updateEarlyAccessFeatureEnrollment(e6, t2);
    } }, { key: "getEarlyAccessFeatures", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      return this.featureFlags.getEarlyAccessFeatures(e6, t2);
    } }, { key: "onFeatureFlags", value: function(e6) {
      return this.featureFlags.onFeatureFlags(e6);
    } }, { key: "onSessionId", value: function(e6) {
      var t2, n2;
      return (t2 = (n2 = this.sessionManager) === null || n2 === void 0 ? void 0 : n2.onSessionId(e6)) !== null && t2 !== void 0 ? t2 : function() {
      };
    } }, { key: "getSurveys", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.surveys.getSurveys(e6, t2);
    } }, { key: "getActiveMatchingSurveys", value: function(e6) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.surveys.getActiveMatchingSurveys(e6, t2);
    } }, { key: "identify", value: function(e6, t2, n2) {
      if (!this.__loaded || !this.persistence)
        return j.uninitializedWarning("posthog.identify");
      if (R(e6) && (e6 = e6.toString(), j.warn("The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.")), e6)
        if (["distinct_id", "distinctid"].includes(e6.toLowerCase()))
          j.critical('The string "'.concat(e6, '" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.'));
        else {
          var i2 = this.get_distinct_id();
          if (this.register({ $user_id: e6 }), !this.get_property("$device_id")) {
            var r2 = i2;
            this.register_once({ $had_persisted_distinct_id: true, $device_id: r2 }, "");
          }
          e6 !== i2 && e6 !== this.get_property(Te) && (this.unregister(Te), this.register({ distinct_id: e6 }));
          var s2 = this.persistence.get_user_state() === "anonymous";
          e6 !== i2 && s2 ? (this.persistence.set_user_state("identified"), this.setPersonPropertiesForFlags(t2 || {}, false), this.capture("$identify", { distinct_id: e6, $anon_distinct_id: i2 }, { $set: t2 || {}, $set_once: n2 || {} }), this.featureFlags.setAnonymousDistinctId(i2)) : (t2 || n2) && this.setPersonProperties(t2, n2), e6 !== i2 && (this.reloadFeatureFlags(), this.unregister(Ge));
        }
      else
        j.error("Unique user id has not been set in posthog.identify");
    } }, { key: "setPersonProperties", value: function(e6, t2) {
      (e6 || t2) && (this.setPersonPropertiesForFlags(e6 || {}), this.capture("$set", { $set: e6 || {}, $set_once: t2 || {} }));
    } }, { key: "group", value: function(e6, n2, i2) {
      if (e6 && n2) {
        var r2 = this.getGroups();
        r2[e6] !== n2 && this.resetGroupPropertiesForFlags(e6), this.register({ $groups: t(t({}, r2), {}, o({}, e6, n2)) }), i2 && (this.capture("$groupidentify", { $group_type: e6, $group_key: n2, $group_set: i2 }), this.setGroupPropertiesForFlags(o({}, e6, i2))), r2[e6] === n2 || i2 || this.reloadFeatureFlags();
      } else
        j.error("posthog.group requires a group type and group key");
    } }, { key: "resetGroups", value: function() {
      this.register({ $groups: {} }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();
    } }, { key: "setPersonPropertiesForFlags", value: function(e6) {
      var t2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
      this.featureFlags.setPersonPropertiesForFlags(e6, t2);
    } }, { key: "resetPersonPropertiesForFlags", value: function() {
      this.featureFlags.resetPersonPropertiesForFlags();
    } }, { key: "setGroupPropertiesForFlags", value: function(e6) {
      var t2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
      this.featureFlags.setGroupPropertiesForFlags(e6, t2);
    } }, { key: "resetGroupPropertiesForFlags", value: function(e6) {
      this.featureFlags.resetGroupPropertiesForFlags(e6);
    } }, { key: "reset", value: function(e6) {
      var t2, n2, i2, r2;
      if (!this.__loaded)
        return j.uninitializedWarning("posthog.reset");
      var s2 = this.get_property("$device_id");
      (t2 = this.persistence) === null || t2 === void 0 || t2.clear(), (n2 = this.sessionPersistence) === null || n2 === void 0 || n2.clear(), (i2 = this.persistence) === null || i2 === void 0 || i2.set_user_state("anonymous"), (r2 = this.sessionManager) === null || r2 === void 0 || r2.resetSessionId();
      var o2 = this.config.get_device_id(ft());
      this.register_once({ distinct_id: o2, $device_id: e6 ? o2 : s2 }, "");
    } }, { key: "get_distinct_id", value: function() {
      return this.get_property("distinct_id");
    } }, { key: "getGroups", value: function() {
      return this.get_property("$groups") || {};
    } }, { key: "get_session_id", value: function() {
      var e6, t2;
      return (e6 = (t2 = this.sessionManager) === null || t2 === void 0 ? void 0 : t2.checkAndGetSessionAndWindowId(true).sessionId) !== null && e6 !== void 0 ? e6 : "";
    } }, { key: "get_session_replay_url", value: function(e6) {
      if (!this.sessionManager)
        return "";
      var t2 = this.sessionManager.checkAndGetSessionAndWindowId(true), n2 = t2.sessionId, i2 = t2.sessionStartTimestamp, r2 = this.requestRouter.endpointFor("ui", "/replay/" + n2);
      if (e6 != null && e6.withTimestamp && i2) {
        var s2, o2 = (s2 = e6.timestampLookBack) !== null && s2 !== void 0 ? s2 : 10;
        if (!i2)
          return r2;
        var a2 = Math.max(Math.floor((new Date().getTime() - i2) / 1e3) - o2, 0);
        r2 += "?t=".concat(a2);
      }
      return r2;
    } }, { key: "alias", value: function(e6, t2) {
      return e6 === this.get_property($e) ? (j.critical("Attempting to create alias for existing People user - aborting."), -2) : (w(t2) && (t2 = this.get_distinct_id()), e6 !== t2 ? (this._register_single(Te, e6), this.capture("$create_alias", { alias: e6, distinct_id: t2 })) : (j.warn("alias matches current distinct_id - skipping api call."), this.identify(e6), -1));
    } }, { key: "set_config", value: function(e6) {
      var n2, i2 = t({}, this.config);
      if (b(e6) && (G(this.config, e6), this.config.persistence_name || (this.config.persistence_name = this.config.cookie_name), this.config.disable_persistence || (this.config.disable_persistence = this.config.disable_cookie), (n2 = this.persistence) === null || n2 === void 0 || n2.update_config(this.config, i2), this.sessionPersistence = this.config.persistence === "sessionStorage" ? this.persistence : new An(t(t({}, this.config), {}, { persistence: "sessionStorage" })), kt.is_supported() && kt.get("ph_debug") === "true" && (this.config.debug = true), this.config.debug && (f.DEBUG = true), this.sessionRecording && !w(e6.disable_session_recording))) {
        var r2 = i2.disable_session_recording !== e6.disable_session_recording, s2 = !ii(this) && !e6.disable_session_recording && !this.sessionRecording.started;
        (r2 || s2) && (e6.disable_session_recording ? this.sessionRecording.stopRecording() : this.sessionRecording.startRecordingIfEnabled());
      }
    } }, { key: "startSessionRecording", value: function() {
      this.set_config({ disable_session_recording: false });
    } }, { key: "stopSessionRecording", value: function() {
      this.set_config({ disable_session_recording: true });
    } }, { key: "sessionRecordingStarted", value: function() {
      var e6;
      return !((e6 = this.sessionRecording) === null || e6 === void 0 || !e6.started);
    } }, { key: "loadToolbar", value: function(e6) {
      return this.toolbar.loadToolbar(e6);
    } }, { key: "get_property", value: function(e6) {
      var t2;
      return (t2 = this.persistence) === null || t2 === void 0 ? void 0 : t2.props[e6];
    } }, { key: "getSessionProperty", value: function(e6) {
      var t2;
      return (t2 = this.sessionPersistence) === null || t2 === void 0 ? void 0 : t2.props[e6];
    } }, { key: "toString", value: function() {
      var e6, t2 = (e6 = this.config.name) !== null && e6 !== void 0 ? e6 : Sr;
      return t2 !== Sr && (t2 = Sr + "." + t2), t2;
    } }, { key: "_gdpr_init", value: function() {
      this.config.opt_out_capturing_persistence_type === "localStorage" && kt.is_supported() && (!this.has_opted_in_capturing() && this.has_opted_in_capturing({ persistence_type: "cookie" }) && this.opt_in_capturing({ enable_persistence: false }), !this.has_opted_out_capturing() && this.has_opted_out_capturing({ persistence_type: "cookie" }) && this.opt_out_capturing({ clear_persistence: false }), this.clear_opt_in_out_capturing({ persistence_type: "cookie", enable_persistence: false })), this.has_opted_out_capturing() ? this._gdpr_update_persistence({ clear_persistence: true }) : this.has_opted_in_capturing() || !this.config.opt_out_capturing_by_default && !bt.get("ph_optout") || (bt.remove("ph_optout"), this.opt_out_capturing({ clear_persistence: this.config.opt_out_persistence_by_default }));
    } }, { key: "_gdpr_update_persistence", value: function(e6) {
      var t2, n2, i2, r2, s2;
      if (e6 && e6.clear_persistence)
        i2 = true;
      else {
        if (!e6 || !e6.enable_persistence)
          return;
        i2 = false;
      }
      this.config.disable_persistence || ((t2 = this.persistence) === null || t2 === void 0 ? void 0 : t2.disabled) === i2 || ((r2 = this.persistence) === null || r2 === void 0 || r2.set_disabled(i2));
      this.config.disable_persistence || ((n2 = this.sessionPersistence) === null || n2 === void 0 ? void 0 : n2.disabled) === i2 || ((s2 = this.sessionPersistence) === null || s2 === void 0 || s2.set_disabled(i2));
    } }, { key: "_gdpr_call_func", value: function(e6, t2) {
      return t2 = G({ capture: this.capture.bind(this), persistence_type: this.config.opt_out_capturing_persistence_type, cookie_prefix: this.config.opt_out_capturing_cookie_prefix, cookie_expiration: this.config.cookie_expiration, cross_subdomain_cookie: this.config.cross_subdomain_cookie, secure_cookie: this.config.secure_cookie }, t2 || {}), kt.is_supported() || t2.persistence_type !== "localStorage" || (t2.persistence_type = "cookie"), e6(this.config.token, { capture: t2.capture, captureEventName: t2.capture_event_name, captureProperties: t2.capture_properties, persistenceType: t2.persistence_type, persistencePrefix: t2.cookie_prefix, cookieExpiration: t2.cookie_expiration, crossSubdomainCookie: t2.cross_subdomain_cookie, secureCookie: t2.secure_cookie });
    } }, { key: "opt_in_capturing", value: function(e6) {
      e6 = G({ enable_persistence: true }, e6 || {}), this._gdpr_call_func(Qn, e6), this._gdpr_update_persistence(e6);
    } }, { key: "opt_out_capturing", value: function(e6) {
      var t2 = G({ clear_persistence: true }, e6 || {});
      this._gdpr_call_func(Yn, t2), this._gdpr_update_persistence(t2);
    } }, { key: "has_opted_in_capturing", value: function(e6) {
      return this._gdpr_call_func(Jn, e6);
    } }, { key: "has_opted_out_capturing", value: function(e6) {
      return this._gdpr_call_func(Kn, e6);
    } }, { key: "clear_opt_in_out_capturing", value: function(e6) {
      var t2 = G({ enable_persistence: true }, e6 != null ? e6 : {});
      this._gdpr_call_func(Xn, t2), this._gdpr_update_persistence(t2);
    } }, { key: "debug", value: function(e6) {
      e6 === false ? (E == null || E.console.log("You've disabled debug mode."), localStorage && localStorage.removeItem("ph_debug"), this.set_config({ debug: false })) : (E == null || E.console.log("You're now in debug mode. All calls to PostHog will be logged in your console.\nYou can disable this with `posthog.debug(false)`."), localStorage && localStorage.setItem("ph_debug", "true"), this.set_config({ debug: true }));
    } }]), e5;
  }();
  !function(e5, t2) {
    for (var n2 = 0; n2 < t2.length; n2++)
      e5.prototype[t2[n2]] = X(e5.prototype[t2[n2]]);
  }(Pr, ["identify"]);
  var Er;
  var Ir;
  !function(e5) {
    e5.Popover = "popover", e5.API = "api", e5.Widget = "widget";
  }(Er || (Er = {})), function(e5) {
    e5.Open = "open", e5.MultipleChoice = "multiple_choice", e5.SingleChoice = "single_choice", e5.Rating = "rating", e5.Link = "link";
  }(Ir || (Ir = {}));
  var Cr;
  var $r = (Cr = wr[Sr] = new Pr(), function() {
    function e5() {
      e5.done || (e5.done = true, Fr = false, z(wr, function(e6) {
        e6._dom_loaded();
      }));
    }
    A != null && A.addEventListener && (A.readyState === "complete" ? e5() : A.addEventListener("DOMContentLoaded", e5, false)), E && ie(E, "load", e5, true);
  }(), Cr);

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e5) {
      var element = e5.target;
      if (e5.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e5.preventDefault();
          e5.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e5.metaKey || e5.shiftKey);
          e5.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e5) {
      var message = e5.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e5.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h2) => h2.status === status).forEach((h2) => h2.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i2 = 0; i2 < eventBindings.length; i2++) {
        let bind = eventBindings[i2];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e5) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e2) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e2) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data) {
      this.logger(kind, msg, data);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c2) => c2.joinRef() !== channel.joinRef());
    }
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i2 = 0; i2 < this.channels.length; i2++) {
          const channel = this.channels[i2];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i2 = 0; i2 < this.stateChangeCallbacks.message.length; i2++) {
          let [, callback] = this.stateChangeCallbacks.message[i2];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2.isJoined() || c2.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_DISCONNECTED_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      clearTimeout(this.chunkTimer);
      this.uploadChannel.leave();
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e5) => {
        if (e5.target.error === null) {
          this.offset += e5.target.result.byteLength;
          this.pushChunk(e5.target.result);
        } else {
          return logError("Read error: " + e5.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      });
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i2 = 0, len = elems.length; i2 < len; i2++) {
      if (ids.has(elems[i2].id)) {
        console.error(`Multiple IDs detected: ${elems[i2].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i2].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x2 in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e5) {
      let wantsNewTab = e5.ctrlKey || e5.shiftKey || e5.metaKey || e5.button && e5.button === 1;
      return wantsNewTab || e5.target.getAttribute("target") === "_blank";
    },
    isUnloadableFormSubmit(e5) {
      return !e5.defaultPrevented && !this.wantsNewTab(e5);
    },
    isNewPageHref(href, currentLocation) {
      let url;
      try {
        url = new URL(href);
      } catch (e5) {
        try {
          url = new URL(href, currentLocation);
        } catch (e22) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return true;
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    discardError(container, el, phxFeedbackFor) {
      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
      let input = field && container.querySelector(`[id="${field}"], [name="${field}"], [name="${field}[]"]`);
      if (!input) {
        return;
      }
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
        el.classList.add(PHX_NO_FEEDBACK_CLASS);
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i2 = sourceAttrs.length - 1; i2 >= 0; i2--) {
        let name = sourceAttrs[i2].name;
        if (exclude.indexOf(name) < 0) {
          target.setAttribute(name, source.getAttribute(name));
        }
      }
      let targetAttrs = target.attributes;
      for (let i2 = targetAttrs.length - 1; i2 >= 0; i2--) {
        let name = targetAttrs[i2].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _2]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.tabIndex === 0 && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e5) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i2 = toNodeAttrs.length - 1; i2 >= 0; i2--) {
      attr = toNodeAttrs[i2];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d2 = fromNodeAttrs.length - 1; d2 >= 0; d2--) {
      attr = fromNodeAttrs[d2];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i2 = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i2;
                break;
              }
              i2++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i2 = 0, len = keyedRemovalList.length; i2 < len; i2++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i2]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([inserts, deleteIds]) => {
          this.streamInserts = Object.assign(this.streamInserts, inserts);
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              if (!this.maybePendingRemove(child)) {
                child.remove();
                this.onNodeDiscarded(child);
              }
            }
          });
        });
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let streamAt = child.id ? this.streamInserts[child.id] : void 0;
            if (streamAt === void 0) {
              return parent.appendChild(child);
            }
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            dom_default.discardError(targetContainer, el, phxFeedbackFor);
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        externalFormTriggered.submit();
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    maybeReOrderStream(el) {
      let streamAt = el.id ? this.streamInserts[el.id] : void 0;
      if (streamAt === void 0) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i2) => parseInt(i2));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
      return [str, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i2 = 1; i2 < statics.length; i2++) {
        this.dynamicToBuffer(rendered[i2 - 1], templates, output);
        output.buffer += statics[i2];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_inserts, deleteIds] = stream || [{}, []];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d2 = 0; d2 < dynamics.length; d2++) {
        let dynamic = dynamics[d2];
        output.buffer += statics[0];
        for (let i2 = 1; i2 < statics.length; i2++) {
          this.dynamicToBuffer(dynamic[i2 - 1], compTemplates, output);
          output.buffer += statics[i2];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0)) {
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      let [html, streams] = this.recursiveToString(component, components, onlyCids);
      template.innerHTML = html;
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i2) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i2}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return [this.createSpan("", cid).outerHTML, streams];
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return [template.innerHTML, streams];
      } else {
        return [template.innerHTML, streams];
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, {}];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data, target, page_loading, loading, value, dispatcher } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target, callback } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transition_run, transition_start, transition_end] = transition || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, metadata, onlyNames = []) => {
    let _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let formData = new FormData(form);
    if (submitter && submitter.form && submitter.form === form) {
      formData.append(submitter.name, submitter.value);
    }
    let toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    let params = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params.append(key, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_DISCONNECTED_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i2) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i2 === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        return this.onRedirect({ to: this.href });
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        this.displayError();
      }
    }
    displayError() {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            if (ref !== null) {
              this.undoRefs(ref);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i2 = 0; i2 < el.attributes.length; i2++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i2].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      });
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, { _target: opts._target });
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, submitter, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let formData = serializeForm(formEl, { submitter });
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else {
        let formData = serializeForm(formEl, { submitter });
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let input = Array.from(form.elements).find((el) => {
          return dom_default.isFormInput(el) && el.type !== "hidden" && !el.hasAttribute(this.binding("change"));
        });
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, null, null];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e2) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(callback);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        if (document.body.contains(el)) {
          this.execJS(el, el.getAttribute(removeAttr), "remove");
        }
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1001) {
          return this.unload();
        }
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e5) => {
        if (e5.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e5, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e5.key && e5.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e5.key }, this.eventMeta(type, e5, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e5, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data = __spreadValues({ key: e5.key }, this.eventMeta(type, e5, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e5, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e5, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      window.addEventListener("dragover", (e5) => e5.preventDefault());
      window.addEventListener("drop", (e5) => {
        e5.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e5.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e5.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e5.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e5) => {
        let uploadTarget = e5.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e5.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e5, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e5, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e5) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e5.target.getAttribute && e5.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e5.target, e5, browserEventName, () => {
              this.withinOwners(e5.target, (view) => {
                callback(e5, event, view, e5.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e5, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e5, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("click", (e5) => this.clickStartedAtTarget = e5.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e5) => {
        let target = null;
        if (capture) {
          target = e5.target.matches(`[${click}]`) ? e5.target : e5.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e5.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e5, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          let href = e5.target instanceof HTMLAnchorElement ? e5.target.getAttribute("href") : null;
          if (!capture && href !== null && !dom_default.wantsNewTab(e5) && dom_default.isNewPageHref(href, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e5.preventDefault();
        }
        this.debounce(target, e5, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e5, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e5, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e5.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e5, e5.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e2) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e5) => {
        let target = closestPhxBinding(e5.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e5)) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e5.preventDefault();
        e5.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, () => {
          browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
          this.registerNewLocation(window.location);
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e5) => {
        let phxSubmit = e5.target.getAttribute(this.binding("submit"));
        let phxChange = e5.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e5.preventDefault();
          this.withinOwners(e5.target, (view) => {
            view.disableForm(e5.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e5)) {
                this.unload();
              }
              e5.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e5) => {
        let phxEvent = e5.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e5)) {
            this.unload();
          }
          return;
        }
        e5.preventDefault();
        e5.target.disabled = true;
        this.withinOwners(e5.target, (view) => {
          js_default.exec("submit", phxEvent, view, e5.target, ["push", { submitter: e5.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e5) => {
          let phxChange = this.binding("change");
          let input = e5.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at: at2, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at2 === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e5, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e5.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e5) => {
        let form = e5.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e5) => {
        if (!this.silenced) {
          callback(e5);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());
  $r.init("phc_Byagoba6TS6UBZ4AAMOSY5NZpbaEUJltMKH9CsZkv4l", { api_host: "https://app.posthog.com" });
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, { params: { _csrf_token: csrfToken } });
  var searchTimeout;
  document.addEventListener("input", function(event) {
    if (event.target.matches(".search-box-default")) {
      const searchQuery = event.target.value;
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(function() {
        $r.capture("used_search", { query: searchQuery });
      }, 5e3);
    }
  }, false);
  document.addEventListener("click", function(event) {
    if (event.target.matches(".monologue-pdflink")) {
      const linkElement = event.target.closest("a");
      if (linkElement) {
        const clicked_3rdPartyUrl = linkElement.getAttribute("href");
        $r.capture("clicked_3rdPartyUrl", {
          url: clicked_3rdPartyUrl
        });
      }
    }
  }, false);
  document.addEventListener("click", function(event) {
    if (event.target.matches(".tip_jar")) {
      $r.capture("clicked_tipjar");
    }
  }, false);
  document.addEventListener("DOMContentLoaded", function() {
    setTimeout(function() {
      const surveyH1 = document.querySelector(".survey-h1");
      if (surveyH1) {
        surveyH1.classList.add("delayed-survey");
      }
    }, 12e4);
  });
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  var topBarScheduled = void 0;
  window.addEventListener("phx:page-loading-start", () => {
    if (!topBarScheduled) {
      topBarScheduled = setTimeout(() => import_topbar.default.show(), 500);
    }
  });
  window.addEventListener("phx:page-loading-stop", () => {
    clearTimeout(topBarScheduled);
    topBarScheduled = void 0;
    import_topbar.default.hide();
  });
  liveSocket.connect();
  liveSocket.enableDebug();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
