(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

  // vendor/topbar.js
  var require_topbar = __commonJS({
    "vendor/topbar.js"(exports, module) {
      (function(window2, document2) {
        "use strict";
        (function() {
          var lastTime = 0;
          var vendors = ["ms", "moz", "webkit", "o"];
          for (var x2 = 0; x2 < vendors.length && !window2.requestAnimationFrame; ++x2) {
            window2.requestAnimationFrame = window2[vendors[x2] + "RequestAnimationFrame"];
            window2.cancelAnimationFrame = window2[vendors[x2] + "CancelAnimationFrame"] || window2[vendors[x2] + "CancelRequestAnimationFrame"];
          }
          if (!window2.requestAnimationFrame)
            window2.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window2.setTimeout(function() {
                callback(currTime + timeToCall);
              }, timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };
          if (!window2.cancelAnimationFrame)
            window2.cancelAnimationFrame = function(id) {
              clearTimeout(id);
            };
        })();
        var canvas, progressTimerId, fadeTimerId, currentProgress, showing, addEvent = function(elem, type, handler) {
          if (elem.addEventListener)
            elem.addEventListener(type, handler, false);
          else if (elem.attachEvent)
            elem.attachEvent("on" + type, handler);
          else
            elem["on" + type] = handler;
        }, options = {
          autoRun: true,
          barThickness: 3,
          barColors: {
            0: "rgba(26,  188, 156, .9)",
            ".25": "rgba(52,  152, 219, .9)",
            ".50": "rgba(241, 196, 15,  .9)",
            ".75": "rgba(230, 126, 34,  .9)",
            "1.0": "rgba(211, 84,  0,   .9)"
          },
          shadowBlur: 10,
          shadowColor: "rgba(0,   0,   0,   .6)",
          className: null
        }, repaint = function() {
          canvas.width = window2.innerWidth;
          canvas.height = options.barThickness * 5;
          var ctx = canvas.getContext("2d");
          ctx.shadowBlur = options.shadowBlur;
          ctx.shadowColor = options.shadowColor;
          var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
          for (var stop in options.barColors)
            lineGradient.addColorStop(stop, options.barColors[stop]);
          ctx.lineWidth = options.barThickness;
          ctx.beginPath();
          ctx.moveTo(0, options.barThickness / 2);
          ctx.lineTo(Math.ceil(currentProgress * canvas.width), options.barThickness / 2);
          ctx.strokeStyle = lineGradient;
          ctx.stroke();
        }, createCanvas = function() {
          canvas = document2.createElement("canvas");
          var style = canvas.style;
          style.position = "fixed";
          style.top = style.left = style.right = style.margin = style.padding = 0;
          style.zIndex = 100001;
          style.display = "none";
          if (options.className)
            canvas.classList.add(options.className);
          document2.body.appendChild(canvas);
          addEvent(window2, "resize", repaint);
        }, topbar2 = {
          config: function(opts) {
            for (var key in opts)
              if (options.hasOwnProperty(key))
                options[key] = opts[key];
          },
          show: function() {
            if (showing)
              return;
            showing = true;
            if (fadeTimerId !== null)
              window2.cancelAnimationFrame(fadeTimerId);
            if (!canvas)
              createCanvas();
            canvas.style.opacity = 1;
            canvas.style.display = "block";
            topbar2.progress(0);
            if (options.autoRun) {
              (function loop() {
                progressTimerId = window2.requestAnimationFrame(loop);
                topbar2.progress("+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2));
              })();
            }
          },
          progress: function(to) {
            if (typeof to === "undefined")
              return currentProgress;
            if (typeof to === "string") {
              to = (to.indexOf("+") >= 0 || to.indexOf("-") >= 0 ? currentProgress : 0) + parseFloat(to);
            }
            currentProgress = to > 1 ? 1 : to;
            repaint();
            return currentProgress;
          },
          hide: function() {
            if (!showing)
              return;
            showing = false;
            if (progressTimerId != null) {
              window2.cancelAnimationFrame(progressTimerId);
              progressTimerId = null;
            }
            (function loop() {
              if (topbar2.progress("+.1") >= 1) {
                canvas.style.opacity -= 0.05;
                if (canvas.style.opacity <= 0.05) {
                  canvas.style.display = "none";
                  fadeTimerId = null;
                  return;
                }
              }
              fadeTimerId = window2.requestAnimationFrame(loop);
            })();
          }
        };
        if (typeof module === "object" && typeof module.exports === "object") {
          module.exports = topbar2;
        } else if (typeof define === "function" && define.amd) {
          define(function() {
            return topbar2;
          });
        } else {
          this.topbar = topbar2;
        }
      }).call(exports, window, document);
    }
  });

  // js/dark_mode.js
  function setDarkModePreference(isDarkMode) {
    localStorage.setItem("darkMode", isDarkMode ? "true" : "false");
    document.cookie = "darkModePreference=" + (isDarkMode ? "true" : "false") + ";path=/";
    var bodyElement = document.body;
    var lightModeToggle = document.getElementById("light-mode-toggle");
    var darkModeToggle = document.getElementById("dark-mode-toggle");
    if (isDarkMode) {
      bodyElement.classList.add("dark-mode");
      lightModeToggle.style.display = "none";
      darkModeToggle.style.display = "block";
    } else {
      bodyElement.classList.remove("dark-mode");
      lightModeToggle.style.display = "block";
      darkModeToggle.style.display = "none";
    }
  }
  function toggleDarkMode() {
    var isDarkMode = localStorage.getItem("darkMode") === "true";
    setDarkModePreference(!isDarkMode);
  }
  var darkModeIcon = document.getElementById("dark-mode-icon");
  if (darkModeIcon) {
    darkModeIcon.addEventListener("click", toggleDarkMode);
  }
  var initialDarkMode = localStorage.getItem("darkMode") === "true";
  setDarkModePreference(initialDarkMode);
  window.getCookie = function(name) {
    const value = "; " + document.cookie;
    const parts = value.split("; " + name + "=");
    if (parts.length === 2)
      return parts.pop().split(";").shift();
    return null;
  };

  // ../node_modules/posthog-js/dist/es.js
  function e(e6, t2) {
    var n2 = Object.keys(e6);
    if (Object.getOwnPropertySymbols) {
      var r2 = Object.getOwnPropertySymbols(e6);
      t2 && (r2 = r2.filter(function(t3) {
        return Object.getOwnPropertyDescriptor(e6, t3).enumerable;
      })), n2.push.apply(n2, r2);
    }
    return n2;
  }
  function t(t2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var r2 = arguments[n2] != null ? arguments[n2] : {};
      n2 % 2 ? e(Object(r2), true).forEach(function(e6) {
        s(t2, e6, r2[e6]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(r2)) : e(Object(r2)).forEach(function(e6) {
        Object.defineProperty(t2, e6, Object.getOwnPropertyDescriptor(r2, e6));
      });
    }
    return t2;
  }
  function n(e6) {
    return n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e7) {
      return typeof e7;
    } : function(e7) {
      return e7 && typeof Symbol == "function" && e7.constructor === Symbol && e7 !== Symbol.prototype ? "symbol" : typeof e7;
    }, n(e6);
  }
  function r(e6, t2) {
    if (!(e6 instanceof t2))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(e6, t2) {
    for (var n2 = 0; n2 < t2.length; n2++) {
      var r2 = t2[n2];
      r2.enumerable = r2.enumerable || false, r2.configurable = true, "value" in r2 && (r2.writable = true), Object.defineProperty(e6, r2.key, r2);
    }
  }
  function o(e6, t2, n2) {
    return t2 && i(e6.prototype, t2), n2 && i(e6, n2), Object.defineProperty(e6, "prototype", { writable: false }), e6;
  }
  function s(e6, t2, n2) {
    return t2 in e6 ? Object.defineProperty(e6, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : e6[t2] = n2, e6;
  }
  function a(e6, t2) {
    if (typeof t2 != "function" && t2 !== null)
      throw new TypeError("Super expression must either be null or a function");
    e6.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e6, writable: true, configurable: true } }), Object.defineProperty(e6, "prototype", { writable: false }), t2 && l(e6, t2);
  }
  function u(e6) {
    return u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e7) {
      return e7.__proto__ || Object.getPrototypeOf(e7);
    }, u(e6);
  }
  function l(e6, t2) {
    return l = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e7, t3) {
      return e7.__proto__ = t3, e7;
    }, l(e6, t2);
  }
  function c(e6, t2) {
    if (e6 == null)
      return {};
    var n2, r2, i2 = function(e7, t3) {
      if (e7 == null)
        return {};
      var n3, r3, i3 = {}, o3 = Object.keys(e7);
      for (r3 = 0; r3 < o3.length; r3++)
        n3 = o3[r3], t3.indexOf(n3) >= 0 || (i3[n3] = e7[n3]);
      return i3;
    }(e6, t2);
    if (Object.getOwnPropertySymbols) {
      var o2 = Object.getOwnPropertySymbols(e6);
      for (r2 = 0; r2 < o2.length; r2++)
        n2 = o2[r2], t2.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(e6, n2) && (i2[n2] = e6[n2]);
    }
    return i2;
  }
  function d(e6, t2) {
    if (t2 && (typeof t2 == "object" || typeof t2 == "function"))
      return t2;
    if (t2 !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return function(e7) {
      if (e7 === void 0)
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e7;
    }(e6);
  }
  function h(e6) {
    var t2 = function() {
      if (typeof Reflect == "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy == "function")
        return true;
      try {
        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        })), true;
      } catch (e7) {
        return false;
      }
    }();
    return function() {
      var n2, r2 = u(e6);
      if (t2) {
        var i2 = u(this).constructor;
        n2 = Reflect.construct(r2, arguments, i2);
      } else
        n2 = r2.apply(this, arguments);
      return d(this, n2);
    };
  }
  function f(e6, t2) {
    return function(e7) {
      if (Array.isArray(e7))
        return e7;
    }(e6) || function(e7, t3) {
      var n2 = e7 == null ? null : typeof Symbol != "undefined" && e7[Symbol.iterator] || e7["@@iterator"];
      if (n2 == null)
        return;
      var r2, i2, o2 = [], s2 = true, a2 = false;
      try {
        for (n2 = n2.call(e7); !(s2 = (r2 = n2.next()).done) && (o2.push(r2.value), !t3 || o2.length !== t3); s2 = true)
          ;
      } catch (e8) {
        a2 = true, i2 = e8;
      } finally {
        try {
          s2 || n2.return == null || n2.return();
        } finally {
          if (a2)
            throw i2;
        }
      }
      return o2;
    }(e6, t2) || g(e6, t2) || function() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function p(e6) {
    return function(e7) {
      if (Array.isArray(e7))
        return _(e7);
    }(e6) || function(e7) {
      if (typeof Symbol != "undefined" && e7[Symbol.iterator] != null || e7["@@iterator"] != null)
        return Array.from(e7);
    }(e6) || g(e6) || function() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function g(e6, t2) {
    if (e6) {
      if (typeof e6 == "string")
        return _(e6, t2);
      var n2 = Object.prototype.toString.call(e6).slice(8, -1);
      return n2 === "Object" && e6.constructor && (n2 = e6.constructor.name), n2 === "Map" || n2 === "Set" ? Array.from(e6) : n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2) ? _(e6, t2) : void 0;
    }
  }
  function _(e6, t2) {
    (t2 == null || t2 > e6.length) && (t2 = e6.length);
    for (var n2 = 0, r2 = new Array(t2); n2 < t2; n2++)
      r2[n2] = e6[n2];
    return r2;
  }
  function v(e6, t2) {
    var n2 = typeof Symbol != "undefined" && e6[Symbol.iterator] || e6["@@iterator"];
    if (!n2) {
      if (Array.isArray(e6) || (n2 = g(e6)) || t2 && e6 && typeof e6.length == "number") {
        n2 && (e6 = n2);
        var r2 = 0, i2 = function() {
        };
        return { s: i2, n: function() {
          return r2 >= e6.length ? { done: true } : { done: false, value: e6[r2++] };
        }, e: function(e7) {
          throw e7;
        }, f: i2 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o2, s2 = true, a2 = false;
    return { s: function() {
      n2 = n2.call(e6);
    }, n: function() {
      var e7 = n2.next();
      return s2 = e7.done, e7;
    }, e: function(e7) {
      a2 = true, o2 = e7;
    }, f: function() {
      try {
        s2 || n2.return == null || n2.return();
      } finally {
        if (a2)
          throw o2;
      }
    } };
  }
  var m = { DEBUG: false, LIB_VERSION: "1.111.2" };
  var y = Array.isArray;
  var b = Object.prototype;
  var w = b.hasOwnProperty;
  var k = b.toString;
  var S = y || function(e6) {
    return k.call(e6) === "[object Array]";
  };
  var F = function(e6) {
    return k.call(e6) === "[object Uint8Array]";
  };
  var R = function(e6) {
    return typeof e6 == "function";
  };
  var P = function(e6) {
    return e6 === Object(e6) && !S(e6);
  };
  var x = function(e6) {
    return e6 === void 0;
  };
  var E = function(e6) {
    return k.call(e6) == "[object String]";
  };
  var I = function(e6) {
    return e6 === null;
  };
  var C = function(e6) {
    return x(e6) || I(e6);
  };
  var T = function(e6) {
    return k.call(e6) == "[object Number]";
  };
  var $ = function(e6) {
    return k.call(e6) === "[object Boolean]";
  };
  var O = function(e6) {
    return e6 instanceof FormData;
  };
  var A = typeof window != "undefined" ? window : void 0;
  var q = typeof globalThis != "undefined" ? globalThis : A;
  var M = Array.prototype;
  var D = M.forEach;
  var N = M.indexOf;
  var L = q == null ? void 0 : q.navigator;
  var B = q == null ? void 0 : q.document;
  var H = q == null ? void 0 : q.location;
  var j = q == null ? void 0 : q.fetch;
  var U = q == null ? void 0 : q.XMLHttpRequest;
  var V = L == null ? void 0 : L.userAgent;
  var W = A != null ? A : {};
  var z = "[PostHog.js]";
  var G = { _log: function(e6) {
    if (A && (m.DEBUG || W.POSTHOG_DEBUG) && !x(A.console) && A.console) {
      for (var t2 = ("__rrweb_original__" in A.console[e6]) ? A.console[e6].__rrweb_original__ : A.console[e6], n2 = arguments.length, r2 = new Array(n2 > 1 ? n2 - 1 : 0), i2 = 1; i2 < n2; i2++)
        r2[i2 - 1] = arguments[i2];
      t2.apply(void 0, [z].concat(r2));
    }
  }, info: function() {
    for (var e6 = arguments.length, t2 = new Array(e6), n2 = 0; n2 < e6; n2++)
      t2[n2] = arguments[n2];
    G._log.apply(G, ["log"].concat(t2));
  }, warn: function() {
    for (var e6 = arguments.length, t2 = new Array(e6), n2 = 0; n2 < e6; n2++)
      t2[n2] = arguments[n2];
    G._log.apply(G, ["warn"].concat(t2));
  }, error: function() {
    for (var e6 = arguments.length, t2 = new Array(e6), n2 = 0; n2 < e6; n2++)
      t2[n2] = arguments[n2];
    G._log.apply(G, ["error"].concat(t2));
  }, critical: function() {
    for (var e6, t2 = arguments.length, n2 = new Array(t2), r2 = 0; r2 < t2; r2++)
      n2[r2] = arguments[r2];
    (e6 = console).error.apply(e6, [z].concat(n2));
  }, uninitializedWarning: function(e6) {
    G.error("You must initialize PostHog before calling ".concat(e6));
  } };
  var Q = {};
  var Y = function(e6) {
    return e6.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  };
  function J(e6, t2, n2) {
    if (S(e6)) {
      if (D && e6.forEach === D)
        e6.forEach(t2, n2);
      else if ("length" in e6 && e6.length === +e6.length) {
        for (var r2 = 0, i2 = e6.length; r2 < i2; r2++)
          if (r2 in e6 && t2.call(n2, e6[r2], r2) === Q)
            return;
      }
    }
  }
  function K(e6, t2, n2) {
    if (!C(e6)) {
      if (S(e6))
        return J(e6, t2, n2);
      if (O(e6)) {
        var r2, i2 = v(e6.entries());
        try {
          for (i2.s(); !(r2 = i2.n()).done; ) {
            var o2 = r2.value;
            if (t2.call(n2, o2[1], o2[0]) === Q)
              return;
          }
        } catch (e7) {
          i2.e(e7);
        } finally {
          i2.f();
        }
      } else
        for (var s2 in e6)
          if (w.call(e6, s2) && t2.call(n2, e6[s2], s2) === Q)
            return;
    }
  }
  var X = function(e6) {
    for (var t2 = arguments.length, n2 = new Array(t2 > 1 ? t2 - 1 : 0), r2 = 1; r2 < t2; r2++)
      n2[r2 - 1] = arguments[r2];
    return J(n2, function(t3) {
      for (var n3 in t3)
        t3[n3] !== void 0 && (e6[n3] = t3[n3]);
    }), e6;
  };
  function Z(e6, t2) {
    return e6.indexOf(t2) !== -1;
  }
  function ee(e6) {
    for (var t2 = Object.keys(e6), n2 = t2.length, r2 = new Array(n2); n2--; )
      r2[n2] = [t2[n2], e6[t2[n2]]];
    return r2;
  }
  var te = function() {
    return Date.now = Date.now || function() {
      return +new Date();
    }, Date.now();
  };
  var ne = function(e6) {
    try {
      return e6();
    } catch (e7) {
      return;
    }
  };
  var re = function(e6) {
    return function() {
      try {
        for (var t2 = arguments.length, n2 = new Array(t2), r2 = 0; r2 < t2; r2++)
          n2[r2] = arguments[r2];
        return e6.apply(this, n2);
      } catch (e7) {
        G.critical("Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A."), G.critical(e7);
      }
    };
  };
  var ie = function(e6) {
    var t2 = {};
    return K(e6, function(e7, n2) {
      E(e7) && e7.length > 0 && (t2[n2] = e7);
    }), t2;
  };
  function oe(e6, t2) {
    return n2 = e6, r2 = function(e7) {
      return E(e7) && !I(t2) ? e7.slice(0, t2) : e7;
    }, i2 = /* @__PURE__ */ new Set(), function e7(t3, n3) {
      return t3 !== Object(t3) ? r2 ? r2(t3, n3) : t3 : i2.has(t3) ? void 0 : (i2.add(t3), S(t3) ? (o2 = [], J(t3, function(t4) {
        o2.push(e7(t4));
      })) : (o2 = {}, K(t3, function(t4, n4) {
        i2.has(t4) || (o2[n4] = e7(t4, n4));
      })), o2);
      var o2;
    }(n2);
    var n2, r2, i2;
  }
  function se(e6) {
    var t2, n2, r2, i2, o2, s2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", a2 = 0, u2 = 0, l2 = "", c2 = [];
    if (!e6)
      return e6;
    e6 = ae(e6);
    do {
      t2 = (o2 = e6.charCodeAt(a2++) << 16 | e6.charCodeAt(a2++) << 8 | e6.charCodeAt(a2++)) >> 18 & 63, n2 = o2 >> 12 & 63, r2 = o2 >> 6 & 63, i2 = 63 & o2, c2[u2++] = s2.charAt(t2) + s2.charAt(n2) + s2.charAt(r2) + s2.charAt(i2);
    } while (a2 < e6.length);
    switch (l2 = c2.join(""), e6.length % 3) {
      case 1:
        l2 = l2.slice(0, -2) + "==";
        break;
      case 2:
        l2 = l2.slice(0, -1) + "=";
    }
    return l2;
  }
  var ae = function(e6) {
    var t2, n2, r2, i2, o2 = "";
    for (t2 = n2 = 0, r2 = (e6 = (e6 + "").replace(/\r\n/g, "\n").replace(/\r/g, "\n")).length, i2 = 0; i2 < r2; i2++) {
      var s2 = e6.charCodeAt(i2), a2 = null;
      s2 < 128 ? n2++ : a2 = s2 > 127 && s2 < 2048 ? String.fromCharCode(s2 >> 6 | 192, 63 & s2 | 128) : String.fromCharCode(s2 >> 12 | 224, s2 >> 6 & 63 | 128, 63 & s2 | 128), I(a2) || (n2 > t2 && (o2 += e6.substring(t2, n2)), o2 += a2, t2 = n2 = i2 + 1);
    }
    return n2 > t2 && (o2 += e6.substring(t2, e6.length)), o2;
  };
  var ue = function() {
    function e6(t2) {
      return t2 && (t2.preventDefault = e6.preventDefault, t2.stopPropagation = e6.stopPropagation), t2;
    }
    return e6.preventDefault = function() {
      this.returnValue = false;
    }, e6.stopPropagation = function() {
      this.cancelBubble = true;
    }, function(t2, n2, r2, i2, o2) {
      if (t2)
        if (t2.addEventListener && !i2)
          t2.addEventListener(n2, r2, !!o2);
        else {
          var s2 = "on" + n2, a2 = t2[s2];
          t2[s2] = function(t3, n3, r3) {
            return function(i3) {
              if (i3 = i3 || e6(A == null ? void 0 : A.event)) {
                var o3, s3 = true;
                R(r3) && (o3 = r3(i3));
                var a3 = n3.call(t3, i3);
                return o3 !== false && a3 !== false || (s3 = false), s3;
              }
            };
          }(t2, r2, a2);
        }
      else
        G.error("No valid element provided to register_event");
    };
  }();
  function le(e6, t2) {
    var n2 = function() {
      if (!B)
        return t2("document not found");
      var n3 = B.createElement("script");
      n3.type = "text/javascript", n3.src = e6, n3.onload = function(e7) {
        return t2(void 0, e7);
      }, n3.onerror = function(e7) {
        return t2(e7);
      };
      var r2, i2 = B.querySelectorAll("body > script");
      i2.length > 0 ? (r2 = i2[0].parentNode) === null || r2 === void 0 || r2.insertBefore(n3, i2[0]) : B.body.appendChild(n3);
    };
    B != null && B.body ? n2() : B == null || B.addEventListener("DOMContentLoaded", n2);
  }
  function ce(e6) {
    return e6 ? Y(e6).split(/\s+/) : [];
  }
  function de(e6) {
    var t2 = "";
    switch (n(e6.className)) {
      case "string":
        t2 = e6.className;
        break;
      case "object":
        t2 = ("baseVal" in e6.className ? e6.className.baseVal : null) || e6.getAttribute("class") || "";
        break;
      default:
        t2 = "";
    }
    return ce(t2);
  }
  function he(e6) {
    return C(e6) ? null : Y(e6).split(/(\s+)/).filter(Se).join("").replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255);
  }
  function fe(e6) {
    var t2 = "";
    return we(e6) && !ke(e6) && e6.childNodes && e6.childNodes.length && K(e6.childNodes, function(e7) {
      var n2;
      _e(e7) && e7.textContent && (t2 += (n2 = he(e7.textContent)) !== null && n2 !== void 0 ? n2 : "");
    }), Y(t2);
  }
  function pe(e6) {
    return !!e6 && e6.nodeType === 1;
  }
  function ge(e6, t2) {
    return !!e6 && !!e6.tagName && e6.tagName.toLowerCase() === t2.toLowerCase();
  }
  function _e(e6) {
    return !!e6 && e6.nodeType === 3;
  }
  function ve(e6) {
    return !!e6 && e6.nodeType === 11;
  }
  var me = ["a", "button", "form", "input", "select", "textarea", "label"];
  function ye(e6) {
    var t2 = e6.parentNode;
    return !(!t2 || !pe(t2)) && t2;
  }
  function be(e6, t2) {
    var r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0, i2 = arguments.length > 3 ? arguments[3] : void 0, o2 = arguments.length > 4 ? arguments[4] : void 0;
    if (!A || !e6 || ge(e6, "html") || !pe(e6))
      return false;
    if (r2 != null && r2.url_allowlist) {
      var s2 = A.location.href, a2 = r2.url_allowlist;
      if (a2 && !a2.some(function(e7) {
        return s2.match(e7);
      }))
        return false;
    }
    if (r2 != null && r2.dom_event_allowlist) {
      var u2 = r2.dom_event_allowlist;
      if (u2 && !u2.some(function(e7) {
        return t2.type === e7;
      }))
        return false;
    }
    for (var l2 = false, c2 = [e6], d2 = true, h2 = e6; h2.parentNode && !ge(h2, "body"); )
      if (ve(h2.parentNode))
        c2.push(h2.parentNode.host), h2 = h2.parentNode.host;
      else {
        if (!(d2 = ye(h2)))
          break;
        if (i2 || me.indexOf(d2.tagName.toLowerCase()) > -1)
          l2 = true;
        else {
          var f2 = A.getComputedStyle(d2);
          f2 && f2.getPropertyValue("cursor") === "pointer" && (l2 = true);
        }
        c2.push(d2), h2 = d2;
      }
    if (!function(e7, t3) {
      var r3 = t3 == null ? void 0 : t3.element_allowlist;
      if (x(r3))
        return true;
      var i3, o3 = v(e7);
      try {
        var s3 = function() {
          var e8 = i3.value;
          if (r3.some(function(t4) {
            return e8.tagName.toLowerCase() === t4;
          }))
            return { v: true };
        };
        for (o3.s(); !(i3 = o3.n()).done; ) {
          var a3 = s3();
          if (n(a3) === "object")
            return a3.v;
        }
      } catch (e8) {
        o3.e(e8);
      } finally {
        o3.f();
      }
      return false;
    }(c2, r2))
      return false;
    if (!function(e7, t3) {
      var r3 = t3 == null ? void 0 : t3.css_selector_allowlist;
      if (x(r3))
        return true;
      var i3, o3 = v(e7);
      try {
        var s3 = function() {
          var e8 = i3.value;
          if (r3.some(function(t4) {
            return e8.matches(t4);
          }))
            return { v: true };
        };
        for (o3.s(); !(i3 = o3.n()).done; ) {
          var a3 = s3();
          if (n(a3) === "object")
            return a3.v;
        }
      } catch (e8) {
        o3.e(e8);
      } finally {
        o3.f();
      }
      return false;
    }(c2, r2))
      return false;
    var p2 = A.getComputedStyle(e6);
    if (p2 && p2.getPropertyValue("cursor") === "pointer" && t2.type === "click")
      return true;
    var g2 = e6.tagName.toLowerCase();
    switch (g2) {
      case "html":
        return false;
      case "form":
        return (o2 || ["submit"]).indexOf(t2.type) >= 0;
      case "input":
      case "select":
      case "textarea":
        return (o2 || ["change", "click"]).indexOf(t2.type) >= 0;
      default:
        return l2 ? (o2 || ["click"]).indexOf(t2.type) >= 0 : (o2 || ["click"]).indexOf(t2.type) >= 0 && (me.indexOf(g2) > -1 || e6.getAttribute("contenteditable") === "true");
    }
  }
  function we(e6) {
    for (var t2 = e6; t2.parentNode && !ge(t2, "body"); t2 = t2.parentNode) {
      var n2 = de(t2);
      if (Z(n2, "ph-sensitive") || Z(n2, "ph-no-capture"))
        return false;
    }
    if (Z(de(e6), "ph-include"))
      return true;
    var r2 = e6.type || "";
    if (E(r2))
      switch (r2.toLowerCase()) {
        case "hidden":
        case "password":
          return false;
      }
    var i2 = e6.name || e6.id || "";
    if (E(i2)) {
      if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(i2.replace(/[^a-zA-Z0-9]/g, "")))
        return false;
    }
    return true;
  }
  function ke(e6) {
    return !!(ge(e6, "input") && !["button", "checkbox", "submit", "reset"].includes(e6.type) || ge(e6, "select") || ge(e6, "textarea") || e6.getAttribute("contenteditable") === "true");
  }
  function Se(e6) {
    if (C(e6))
      return false;
    if (E(e6)) {
      e6 = Y(e6);
      if (/^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/.test((e6 || "").replace(/[- ]/g, "")))
        return false;
      if (/(^\d{3}-?\d{2}-?\d{4}$)/.test(e6))
        return false;
    }
    return true;
  }
  function Fe(e6) {
    var t2 = fe(e6);
    return Se(t2 = "".concat(t2, " ").concat(Re(e6)).trim()) ? t2 : "";
  }
  function Re(e6) {
    var t2 = "";
    return e6 && e6.childNodes && e6.childNodes.length && K(e6.childNodes, function(e7) {
      var n2;
      if (e7 && ((n2 = e7.tagName) === null || n2 === void 0 ? void 0 : n2.toLowerCase()) === "span")
        try {
          var r2 = fe(e7);
          t2 = "".concat(t2, " ").concat(r2).trim(), e7.childNodes && e7.childNodes.length && (t2 = "".concat(t2, " ").concat(Re(e7)).trim());
        } catch (e8) {
          G.error(e8);
        }
    }), t2;
  }
  function Pe(e6) {
    return function(e7) {
      var n2 = e7.map(function(e8) {
        var n3, r2, i2 = "";
        if (e8.tag_name && (i2 += e8.tag_name), e8.attr_class) {
          e8.attr_class.sort();
          var o2, s2 = v(e8.attr_class);
          try {
            for (s2.s(); !(o2 = s2.n()).done; ) {
              var a2 = o2.value;
              i2 += ".".concat(a2.replace(/"/g, ""));
            }
          } catch (e9) {
            s2.e(e9);
          } finally {
            s2.f();
          }
        }
        var u2 = t(t(t(t({}, e8.text ? { text: e8.text } : {}), {}, { "nth-child": (n3 = e8.nth_child) !== null && n3 !== void 0 ? n3 : 0, "nth-of-type": (r2 = e8.nth_of_type) !== null && r2 !== void 0 ? r2 : 0 }, e8.href ? { href: e8.href } : {}), e8.attr_id ? { attr_id: e8.attr_id } : {}), e8.attributes), l2 = {};
        return ee(u2).sort(function(e9, t2) {
          var n4 = f(e9, 1)[0], r3 = f(t2, 1)[0];
          return n4.localeCompare(r3);
        }).forEach(function(e9) {
          var t2 = f(e9, 2), n4 = t2[0], r3 = t2[1];
          return l2[xe(n4.toString())] = xe(r3.toString());
        }), i2 += ":", i2 += ee(u2).map(function(e9) {
          var t2 = f(e9, 2), n4 = t2[0], r3 = t2[1];
          return "".concat(n4, '="').concat(r3, '"');
        }).join("");
      });
      return n2.join(";");
    }(function(e7) {
      return e7.map(function(e8) {
        var t2, n2, r2 = { text: (t2 = e8.$el_text) === null || t2 === void 0 ? void 0 : t2.slice(0, 400), tag_name: e8.tag_name, href: (n2 = e8.attr__href) === null || n2 === void 0 ? void 0 : n2.slice(0, 2048), attr_class: Ee(e8), attr_id: e8.attr__id, nth_child: e8.nth_child, nth_of_type: e8.nth_of_type, attributes: {} };
        return ee(e8).filter(function(e9) {
          return f(e9, 1)[0].indexOf("attr__") === 0;
        }).forEach(function(e9) {
          var t3 = f(e9, 2), n3 = t3[0], i2 = t3[1];
          return r2.attributes[n3] = i2;
        }), r2;
      });
    }(e6));
  }
  function xe(e6) {
    return e6.replace(/"|\\"/g, '\\"');
  }
  function Ee(e6) {
    var t2 = e6.attr__class;
    return t2 ? S(t2) ? t2 : ce(t2) : void 0;
  }
  var Ie = function() {
    function e6(t2) {
      r(this, e6), this.clicks = [], this.enabled = t2;
    }
    return o(e6, [{ key: "isRageClick", value: function(e7, t2, n2) {
      if (!this.enabled)
        return false;
      var r2 = this.clicks[this.clicks.length - 1];
      if (r2 && Math.abs(e7 - r2.x) + Math.abs(t2 - r2.y) < 30 && n2 - r2.timestamp < 1e3) {
        if (this.clicks.push({ x: e7, y: t2, timestamp: n2 }), this.clicks.length === 3)
          return true;
      } else
        this.clicks = [{ x: e7, y: t2, timestamp: n2 }];
      return false;
    } }]), e6;
  }();
  var Ce = "$people_distinct_id";
  var Te = "__alias";
  var $e = "__timers";
  var Oe = "$autocapture_disabled_server_side";
  var Ae = "$session_recording_enabled_server_side";
  var qe = "$console_log_recording_enabled_server_side";
  var Me = "$session_recording_recorder_version_server_side";
  var De = "$session_recording_network_payload_capture";
  var Ne = "$session_recording_canvas_recording";
  var Le = "$sesid";
  var Be = "$session_is_sampled";
  var He = "$enabled_feature_flags";
  var je = "$early_access_features";
  var Ue = "$stored_person_properties";
  var Ve = "$stored_group_properties";
  var We = "$surveys";
  var ze = "$flag_call_reported";
  var Ge = "$user_state";
  var Qe = "$posthog_quota_limited";
  var Ye = "$client_session_props";
  var Je = [Ce, Te, "__cmpns", $e, Ae, Le, He, Ge, Qe, je, Ve, Ue, We, ze, Ye];
  var Ke = "$copy_autocapture";
  function Xe(e6, t2) {
    return t2.length > e6 ? t2.slice(0, e6) + "..." : t2;
  }
  var Ze = { _initializedTokens: [], _isDisabledServerSide: null, _isAutocaptureEnabled: false, _setIsAutocaptureEnabled: function(e6) {
    var t2, n2 = I(this._isDisabledServerSide) ? !((t2 = e6.persistence) === null || t2 === void 0 || !t2.props[Oe]) : this._isDisabledServerSide, r2 = !!e6.config.autocapture;
    this._isAutocaptureEnabled = r2 && !n2;
  }, _previousElementSibling: function(e6) {
    if (e6.previousElementSibling)
      return e6.previousElementSibling;
    var t2 = e6;
    do {
      t2 = t2.previousSibling;
    } while (t2 && !pe(t2));
    return t2;
  }, _getAugmentPropertiesFromElement: function(e6) {
    if (!we(e6))
      return {};
    var t2 = {};
    return K(e6.attributes, function(e7) {
      if (e7.name.indexOf("data-ph-capture-attribute") === 0) {
        var n2 = e7.name.replace("data-ph-capture-attribute-", ""), r2 = e7.value;
        n2 && r2 && Se(r2) && (t2[n2] = r2);
      }
    }), t2;
  }, _getPropertiesFromElement: function(e6, t2, n2) {
    var r2, i2 = e6.tagName.toLowerCase(), o2 = { tag_name: i2 };
    me.indexOf(i2) > -1 && !n2 && (i2.toLowerCase() === "a" || i2.toLowerCase() === "button" ? o2.$el_text = Xe(1024, Fe(e6)) : o2.$el_text = Xe(1024, fe(e6)));
    var s2 = de(e6);
    s2.length > 0 && (o2.classes = s2.filter(function(e7) {
      return e7 !== "";
    }));
    var a2 = (r2 = this.config) === null || r2 === void 0 ? void 0 : r2.element_attribute_ignorelist;
    K(e6.attributes, function(n3) {
      var r3;
      if ((!ke(e6) || ["name", "id", "class"].indexOf(n3.name) !== -1) && ((a2 == null || !a2.includes(n3.name)) && !t2 && Se(n3.value) && (r3 = n3.name, !E(r3) || r3.substring(0, 10) !== "_ngcontent" && r3.substring(0, 7) !== "_nghost"))) {
        var i3 = n3.value;
        n3.name === "class" && (i3 = ce(i3).join(" ")), o2["attr__" + n3.name] = Xe(1024, i3);
      }
    });
    for (var u2 = 1, l2 = 1, c2 = e6; c2 = this._previousElementSibling(c2); )
      u2++, c2.tagName === e6.tagName && l2++;
    return o2.nth_child = u2, o2.nth_of_type = l2, o2;
  }, _getDefaultProperties: function(e6) {
    return { $event_type: e6, $ce_version: 1 };
  }, _extractCustomPropertyValue: function(e6) {
    var t2 = [];
    return K(B == null ? void 0 : B.querySelectorAll(e6.css_selector), function(e7) {
      var n2;
      ["input", "select"].indexOf(e7.tagName.toLowerCase()) > -1 ? n2 = e7.value : e7.textContent && (n2 = e7.textContent), Se(n2) && t2.push(n2);
    }), t2.join(", ");
  }, _getCustomProperties: function(e6) {
    var t2 = this, n2 = {};
    return K(this._customProperties, function(r2) {
      K(r2.event_selectors, function(i2) {
        K(B == null ? void 0 : B.querySelectorAll(i2), function(i3) {
          Z(e6, i3) && we(i3) && (n2[r2.name] = t2._extractCustomPropertyValue(r2));
        });
      });
    }), n2;
  }, _getEventTarget: function(e6) {
    return x(e6.target) ? e6.srcElement || null : (t2 = e6.target) !== null && t2 !== void 0 && t2.shadowRoot ? e6.composedPath()[0] || null : e6.target || null;
    var t2;
  }, _captureEvent: function(e6, t2) {
    var n2, r2 = this, i2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "$autocapture", o2 = arguments.length > 3 ? arguments[3] : void 0, s2 = this._getEventTarget(e6);
    (_e(s2) && (s2 = s2.parentNode || null), i2 === "$autocapture" && e6.type === "click" && e6 instanceof MouseEvent) && ((n2 = this.rageclicks) !== null && n2 !== void 0 && n2.isRageClick(e6.clientX, e6.clientY, new Date().getTime()) && this._captureEvent(e6, t2, "$rageclick"));
    var a2 = i2 === Ke;
    if (s2 && be(s2, e6, this.config, a2, a2 ? ["copy", "cut"] : void 0)) {
      for (var u2, l2, c2 = [s2], d2 = s2; d2.parentNode && !ge(d2, "body"); )
        ve(d2.parentNode) ? (c2.push(d2.parentNode.host), d2 = d2.parentNode.host) : (c2.push(d2.parentNode), d2 = d2.parentNode);
      var h2, f2 = [], p2 = {}, g2 = false;
      if (K(c2, function(e7) {
        var n3 = we(e7);
        e7.tagName.toLowerCase() === "a" && (h2 = e7.getAttribute("href"), h2 = n3 && Se(h2) && h2), Z(de(e7), "ph-no-capture") && (g2 = true), f2.push(r2._getPropertiesFromElement(e7, t2.config.mask_all_element_attributes, t2.config.mask_all_text));
        var i3 = r2._getAugmentPropertiesFromElement(e7);
        X(p2, i3);
      }), t2.config.mask_all_text || (s2.tagName.toLowerCase() === "a" || s2.tagName.toLowerCase() === "button" ? f2[0].$el_text = Fe(s2) : f2[0].$el_text = fe(s2)), h2 && (f2[0].attr__href = h2), g2)
        return false;
      var _2 = X(this._getDefaultProperties(e6.type), t2.elementsChainAsString ? { $elements_chain: Pe(f2) } : { $elements: f2 }, (u2 = f2[0]) !== null && u2 !== void 0 && u2.$el_text ? { $el_text: (l2 = f2[0]) === null || l2 === void 0 ? void 0 : l2.$el_text } : {}, this._getCustomProperties(c2), p2, o2 || {});
      if (i2 === Ke) {
        var v2, m2 = he(A == null || (v2 = A.getSelection()) === null || v2 === void 0 ? void 0 : v2.toString()), y2 = e6.type || "clipboard";
        if (!m2)
          return false;
        _2.$selected_content = m2, _2.$copy_type = y2;
      }
      return t2.capture(i2, _2), true;
    }
  }, _navigate: function(e6) {
    A && (A.location.href = e6);
  }, _addDomEventHandlers: function(e6) {
    var t2 = this;
    if (A && B) {
      var n2 = function(n3) {
        n3 = n3 || (A == null ? void 0 : A.event), t2._captureEvent(n3, e6);
      }, r2 = function(n3) {
        n3 = n3 || (A == null ? void 0 : A.event), t2._captureEvent(n3, e6, Ke);
      };
      ue(B, "submit", n2, false, true), ue(B, "change", n2, false, true), ue(B, "click", n2, false, true), P(e6.config.autocapture) && e6.config.autocapture.capture_copied_text && (ue(B, "copy", r2, false, true), ue(B, "cut", r2, false, true));
    }
  }, _customProperties: [], rageclicks: null, config: void 0, init: function(e6) {
    var t2;
    $(e6.__autocapture) || (this.config = e6.__autocapture), (t2 = this.config) !== null && t2 !== void 0 && t2.url_allowlist && (this.config.url_allowlist = this.config.url_allowlist.map(function(e7) {
      return new RegExp(e7);
    })), this.rageclicks = new Ie(e6.config.rageclick);
  }, afterDecideResponse: function(e6, t2) {
    var n2 = t2.config.token;
    this._initializedTokens.indexOf(n2) > -1 ? G.info('autocapture already initialized for token "' + n2 + '"') : (t2.persistence && t2.persistence.register(s({}, Oe, !!e6.autocapture_opt_out)), this._isDisabledServerSide = !!e6.autocapture_opt_out, this._setIsAutocaptureEnabled(t2), this._initializedTokens.push(n2), e6 && e6.config && e6.config.enable_collect_everything && this._isAutocaptureEnabled ? (e6.custom_properties && (this._customProperties = e6.custom_properties), this._addDomEventHandlers(t2)) : t2.__autocapture = false);
  }, enabledForProject: function(e6, t2, n2) {
    if (!e6)
      return true;
    t2 = x(t2) ? 10 : t2, n2 = x(n2) ? 10 : n2;
    for (var r2 = 0, i2 = 0; i2 < e6.length; i2++)
      r2 += e6.charCodeAt(i2);
    return r2 % t2 < n2;
  }, isBrowserSupported: function() {
    return R(B == null ? void 0 : B.querySelectorAll);
  } };
  !function(e6) {
    for (var t2 in e6)
      R(e6[t2]) && (e6[t2] = e6[t2].bind(e6));
  }(Ze), function(e6) {
    for (var t2 in e6)
      R(e6[t2]) && (e6[t2] = re(e6[t2]));
  }(Ze);
  var et = "$active_feature_flags";
  var tt = "$override_feature_flags";
  var nt = "$feature_flag_payloads";
  var rt = function(e6) {
    var t2, n2 = {}, r2 = v(ee(e6 || {}));
    try {
      for (r2.s(); !(t2 = r2.n()).done; ) {
        var i2 = f(t2.value, 2), o2 = i2[0], s2 = i2[1];
        s2 && (n2[o2] = s2);
      }
    } catch (e7) {
      r2.e(e7);
    } finally {
      r2.f();
    }
    return n2;
  };
  var it = function() {
    function e6(t2) {
      r(this, e6), this.instance = t2, this._override_warning = false, this.featureFlagEventHandlers = [], this.reloadFeatureFlagsQueued = false, this.reloadFeatureFlagsInAction = false;
    }
    return o(e6, [{ key: "getFlags", value: function() {
      return Object.keys(this.getFlagVariants());
    } }, { key: "getFlagVariants", value: function() {
      var e7 = this.instance.get_property(He), t2 = this.instance.get_property(tt);
      if (!t2)
        return e7 || {};
      for (var n2 = X({}, e7), r2 = Object.keys(t2), i2 = 0; i2 < r2.length; i2++)
        t2[r2[i2]] === false ? delete n2[r2[i2]] : n2[r2[i2]] = t2[r2[i2]];
      return this._override_warning || (G.warn(" Overriding feature flags!", { enabledFlags: e7, overriddenFlags: t2, finalFlags: n2 }), this._override_warning = true), n2;
    } }, { key: "getFlagPayloads", value: function() {
      return this.instance.get_property(nt) || {};
    } }, { key: "reloadFeatureFlags", value: function() {
      this.reloadFeatureFlagsQueued || (this.reloadFeatureFlagsQueued = true, this._startReloadTimer());
    } }, { key: "setAnonymousDistinctId", value: function(e7) {
      this.$anon_distinct_id = e7;
    } }, { key: "setReloadingPaused", value: function(e7) {
      this.reloadFeatureFlagsInAction = e7;
    } }, { key: "resetRequestQueue", value: function() {
      this.reloadFeatureFlagsQueued = false;
    } }, { key: "_startReloadTimer", value: function() {
      var e7 = this;
      this.reloadFeatureFlagsQueued && !this.reloadFeatureFlagsInAction && setTimeout(function() {
        !e7.reloadFeatureFlagsInAction && e7.reloadFeatureFlagsQueued && (e7.reloadFeatureFlagsQueued = false, e7._reloadFeatureFlagsRequest());
      }, 5);
    } }, { key: "_reloadFeatureFlagsRequest", value: function() {
      var e7 = this;
      if (!this.instance.config.advanced_disable_feature_flags) {
        this.setReloadingPaused(true);
        var t2 = this.instance.config.token, n2 = this.instance.get_property(Ue), r2 = this.instance.get_property(Ve), i2 = se(JSON.stringify({ token: t2, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), $anon_distinct_id: this.$anon_distinct_id, person_properties: n2, group_properties: r2, disable_flags: this.instance.config.advanced_disable_feature_flags || void 0 }));
        this.instance._send_request(this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), { data: i2 }, { method: "POST" }, function(t3) {
          e7.$anon_distinct_id = void 0, e7.receivedFeatureFlags(t3), e7.setReloadingPaused(false), e7._startReloadTimer();
        });
      }
    } }, { key: "getFeatureFlag", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0) {
        var n2, r2 = this.getFlagVariants()[e7], i2 = "".concat(r2), o2 = this.instance.get_property(ze) || {};
        if (t2.send_event || !("send_event" in t2)) {
          if (!(e7 in o2) || !o2[e7].includes(i2))
            S(o2[e7]) ? o2[e7].push(i2) : o2[e7] = [i2], (n2 = this.instance.persistence) === null || n2 === void 0 || n2.register(s({}, ze, o2)), this.instance.capture("$feature_flag_called", { $feature_flag: e7, $feature_flag_response: r2 });
        }
        return r2;
      }
      G.warn('getFeatureFlag for key "' + e7 + `" failed. Feature flags didn't load in time.`);
    } }, { key: "getFeatureFlagPayload", value: function(e7) {
      return this.getFlagPayloads()[e7];
    } }, { key: "isFeatureEnabled", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (this.instance.decideEndpointWasHit || this.getFlags() && this.getFlags().length > 0)
        return !!this.getFeatureFlag(e7, t2);
      G.warn('isFeatureEnabled for key "' + e7 + `" failed. Feature flags didn't load in time.`);
    } }, { key: "addFeatureFlagsHandler", value: function(e7) {
      this.featureFlagEventHandlers.push(e7);
    } }, { key: "removeFeatureFlagsHandler", value: function(e7) {
      this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter(function(t2) {
        return t2 !== e7;
      });
    } }, { key: "receivedFeatureFlags", value: function(e7) {
      if (this.instance.persistence) {
        this.instance.decideEndpointWasHit = true;
        var n2 = this.getFlagVariants(), r2 = this.getFlagPayloads();
        !function(e8, n3) {
          var r3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {}, o2 = e8.featureFlags, a2 = e8.featureFlagPayloads;
          if (o2)
            if (S(o2)) {
              var u2, l2 = {};
              if (o2)
                for (var c2 = 0; c2 < o2.length; c2++)
                  l2[o2[c2]] = true;
              n3 && n3.register((s(u2 = {}, et, o2), s(u2, He, l2), u2));
            } else {
              var d2, h2 = o2, f2 = a2;
              e8.errorsWhileComputingFlags && (h2 = t(t({}, r3), h2), f2 = t(t({}, i2), f2)), n3 && n3.register((s(d2 = {}, et, Object.keys(rt(h2))), s(d2, He, h2 || {}), s(d2, nt, f2 || {}), d2));
            }
        }(e7, this.instance.persistence, n2, r2), this._fireFeatureFlagsCallbacks();
      }
    } }, { key: "override", value: function(e7) {
      if (!this.instance.__loaded || !this.instance.persistence)
        return G.uninitializedWarning("posthog.feature_flags.override");
      if (this._override_warning = false, e7 === false)
        this.instance.persistence.unregister(tt);
      else if (S(e7)) {
        for (var t2 = {}, n2 = 0; n2 < e7.length; n2++)
          t2[e7[n2]] = true;
        this.instance.persistence.register(s({}, tt, t2));
      } else
        this.instance.persistence.register(s({}, tt, e7));
    } }, { key: "onFeatureFlags", value: function(e7) {
      var t2 = this;
      if (this.addFeatureFlagsHandler(e7), this.instance.decideEndpointWasHit) {
        var n2 = this._prepareFeatureFlagsForCallbacks(), r2 = n2.flags, i2 = n2.flagVariants;
        e7(r2, i2);
      }
      return function() {
        return t2.removeFeatureFlagsHandler(e7);
      };
    } }, { key: "updateEarlyAccessFeatureEnrollment", value: function(e7, n2) {
      var r2, i2, o2 = s({}, "$feature_enrollment/".concat(e7), n2);
      this.instance.capture("$feature_enrollment_update", { $feature_flag: e7, $feature_enrollment: n2, $set: o2 }), this.setPersonPropertiesForFlags(o2, false);
      var a2 = t(t({}, this.getFlagVariants()), {}, s({}, e7, n2));
      (r2 = this.instance.persistence) === null || r2 === void 0 || r2.register((s(i2 = {}, et, Object.keys(rt(a2))), s(i2, He, a2), i2)), this._fireFeatureFlagsCallbacks();
    } }, { key: "getEarlyAccessFeatures", value: function(e7) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], r2 = this.instance.get_property(je);
      if (r2 && !n2)
        return e7(r2);
      this.instance._send_request(this.instance.requestRouter.endpointFor("api", "/api/early_access_features/?token=".concat(this.instance.config.token)), {}, { method: "GET" }, function(n3) {
        var r3, i2 = n3.earlyAccessFeatures;
        return (r3 = t2.instance.persistence) === null || r3 === void 0 || r3.register(s({}, je, i2)), e7(i2);
      });
    } }, { key: "_prepareFeatureFlagsForCallbacks", value: function() {
      var e7 = this.getFlags(), t2 = this.getFlagVariants();
      return { flags: e7.filter(function(e8) {
        return t2[e8];
      }), flagVariants: Object.keys(t2).filter(function(e8) {
        return t2[e8];
      }).reduce(function(e8, n2) {
        return e8[n2] = t2[n2], e8;
      }, {}) };
    } }, { key: "_fireFeatureFlagsCallbacks", value: function() {
      var e7 = this._prepareFeatureFlagsForCallbacks(), t2 = e7.flags, n2 = e7.flagVariants;
      this.featureFlagEventHandlers.forEach(function(e8) {
        return e8(t2, n2);
      });
    } }, { key: "setPersonPropertiesForFlags", value: function(e7) {
      var n2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], r2 = this.instance.get_property(Ue) || {};
      this.instance.register(s({}, Ue, t(t({}, r2), e7))), n2 && this.instance.reloadFeatureFlags();
    } }, { key: "resetPersonPropertiesForFlags", value: function() {
      this.instance.unregister(Ue);
    } }, { key: "setGroupPropertiesForFlags", value: function(e7) {
      var n2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1], r2 = this.instance.get_property(Ve) || {};
      Object.keys(r2).length !== 0 && Object.keys(r2).forEach(function(n3) {
        r2[n3] = t(t({}, r2[n3]), e7[n3]), delete e7[n3];
      }), this.instance.register(s({}, Ve, t(t({}, r2), e7))), n2 && this.instance.reloadFeatureFlags();
    } }, { key: "resetGroupPropertiesForFlags", value: function(e7) {
      if (e7) {
        var n2 = this.instance.get_property(Ve) || {};
        this.instance.register(s({}, Ve, t(t({}, n2), {}, s({}, e7, {}))));
      } else
        this.instance.unregister(Ve);
    } }]), e6;
  }();
  Math.trunc || (Math.trunc = function(e6) {
    return e6 < 0 ? Math.ceil(e6) : Math.floor(e6);
  }), Number.isInteger || (Number.isInteger = function(e6) {
    return T(e6) && isFinite(e6) && Math.floor(e6) === e6;
  });
  var ot = "0123456789abcdef";
  var st = function() {
    function e6(t2) {
      if (r(this, e6), this.bytes = t2, t2.length !== 16)
        throw new TypeError("not 128-bit length");
    }
    return o(e6, [{ key: "toString", value: function() {
      for (var e7 = "", t2 = 0; t2 < this.bytes.length; t2++)
        e7 = e7 + ot.charAt(this.bytes[t2] >>> 4) + ot.charAt(15 & this.bytes[t2]), t2 !== 3 && t2 !== 5 && t2 !== 7 && t2 !== 9 || (e7 += "-");
      if (e7.length !== 36)
        throw new Error("Invalid UUIDv7 was generated");
      return e7;
    } }, { key: "clone", value: function() {
      return new e6(this.bytes.slice(0));
    } }, { key: "equals", value: function(e7) {
      return this.compareTo(e7) === 0;
    } }, { key: "compareTo", value: function(e7) {
      for (var t2 = 0; t2 < 16; t2++) {
        var n2 = this.bytes[t2] - e7.bytes[t2];
        if (n2 !== 0)
          return Math.sign(n2);
      }
      return 0;
    } }], [{ key: "fromFieldsV7", value: function(t2, n2, r2, i2) {
      if (!Number.isInteger(t2) || !Number.isInteger(n2) || !Number.isInteger(r2) || !Number.isInteger(i2) || t2 < 0 || n2 < 0 || r2 < 0 || i2 < 0 || t2 > 281474976710655 || n2 > 4095 || r2 > 1073741823 || i2 > 4294967295)
        throw new RangeError("invalid field value");
      var o2 = new Uint8Array(16);
      return o2[0] = t2 / Math.pow(2, 40), o2[1] = t2 / Math.pow(2, 32), o2[2] = t2 / Math.pow(2, 24), o2[3] = t2 / Math.pow(2, 16), o2[4] = t2 / Math.pow(2, 8), o2[5] = t2, o2[6] = 112 | n2 >>> 8, o2[7] = n2, o2[8] = 128 | r2 >>> 24, o2[9] = r2 >>> 16, o2[10] = r2 >>> 8, o2[11] = r2, o2[12] = i2 >>> 24, o2[13] = i2 >>> 16, o2[14] = i2 >>> 8, o2[15] = i2, new e6(o2);
    } }]), e6;
  }();
  var at = function() {
    function e6() {
      r(this, e6), s(this, "timestamp", 0), s(this, "counter", 0), s(this, "random", new ct());
    }
    return o(e6, [{ key: "generate", value: function() {
      var e7 = this.generateOrAbort();
      if (x(e7)) {
        this.timestamp = 0;
        var t2 = this.generateOrAbort();
        if (x(t2))
          throw new Error("Could not generate UUID after timestamp reset");
        return t2;
      }
      return e7;
    } }, { key: "generateOrAbort", value: function() {
      var e7 = Date.now();
      if (e7 > this.timestamp)
        this.timestamp = e7, this.resetCounter();
      else {
        if (!(e7 + 1e4 > this.timestamp))
          return;
        this.counter++, this.counter > 4398046511103 && (this.timestamp++, this.resetCounter());
      }
      return st.fromFieldsV7(this.timestamp, Math.trunc(this.counter / Math.pow(2, 30)), this.counter & Math.pow(2, 30) - 1, this.random.nextUint32());
    } }, { key: "resetCounter", value: function() {
      this.counter = 1024 * this.random.nextUint32() + (1023 & this.random.nextUint32());
    } }]), e6;
  }();
  var ut = function(e6) {
    if (typeof UUIDV7_DENY_WEAK_RNG != "undefined" && UUIDV7_DENY_WEAK_RNG)
      throw new Error("no cryptographically strong RNG available");
    for (var t2 = 0; t2 < e6.length; t2++)
      e6[t2] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());
    return e6;
  };
  A && !x(A.crypto) && crypto.getRandomValues && (ut = function(e6) {
    return crypto.getRandomValues(e6);
  });
  var lt;
  var ct = function() {
    function e6() {
      r(this, e6), s(this, "buffer", new Uint32Array(8)), s(this, "cursor", 1 / 0);
    }
    return o(e6, [{ key: "nextUint32", value: function() {
      return this.cursor >= this.buffer.length && (ut(this.buffer), this.cursor = 0), this.buffer[this.cursor++];
    } }]), e6;
  }();
  var dt = function() {
    return ht().toString();
  };
  var ht = function() {
    return (lt || (lt = new at())).generate();
  };
  var ft = "Thu, 01 Jan 1970 00:00:00 GMT";
  var pt = "";
  var gt = /[a-z0-9][a-z0-9-]+\.[a-z]{2,}$/i;
  function _t(e6, t2) {
    if (t2) {
      var n2 = function(e7) {
        var t3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : B;
        if (pt)
          return pt;
        if (!t3)
          return "";
        if (["localhost", "127.0.0.1"].includes(e7))
          return "";
        for (var n3 = e7.split("."), r3 = Math.min(n3.length, 8), i2 = "dmn_chk_" + dt(), o2 = new RegExp("(^|;)\\s*" + i2 + "=1"); !pt && r3--; ) {
          var s2 = n3.slice(r3).join("."), a2 = i2 + "=1;domain=." + s2;
          t3.cookie = a2, o2.test(t3.cookie) && (t3.cookie = a2 + ";expires=" + ft, pt = s2);
        }
        return pt;
      }(e6);
      if (!n2) {
        var r2 = function(e7) {
          var t3 = e7.match(gt);
          return t3 ? t3[0] : "";
        }(e6);
        r2 !== n2 && G.info("Warning: cookie subdomain discovery mismatch", r2, n2), n2 = r2;
      }
      return n2 ? "; domain=." + n2 : "";
    }
    return "";
  }
  var vt;
  var mt = { is_supported: function() {
    return !!B;
  }, error: function(e6) {
    G.error("cookieStore error: " + e6);
  }, get: function(e6) {
    if (B) {
      try {
        for (var t2 = e6 + "=", n2 = B.cookie.split(";").filter(function(e7) {
          return e7.length;
        }), r2 = 0; r2 < n2.length; r2++) {
          for (var i2 = n2[r2]; i2.charAt(0) == " "; )
            i2 = i2.substring(1, i2.length);
          if (i2.indexOf(t2) === 0)
            return decodeURIComponent(i2.substring(t2.length, i2.length));
        }
      } catch (e7) {
      }
      return null;
    }
  }, parse: function(e6) {
    var t2;
    try {
      t2 = JSON.parse(mt.get(e6)) || {};
    } catch (e7) {
    }
    return t2;
  }, set: function(e6, t2, n2, r2, i2) {
    if (B)
      try {
        var o2 = "", s2 = "", a2 = _t(B.location.hostname, r2);
        if (n2) {
          var u2 = new Date();
          u2.setTime(u2.getTime() + 24 * n2 * 60 * 60 * 1e3), o2 = "; expires=" + u2.toUTCString();
        }
        i2 && (s2 = "; secure");
        var l2 = e6 + "=" + encodeURIComponent(JSON.stringify(t2)) + o2 + "; SameSite=Lax; path=/" + a2 + s2;
        return l2.length > 3686.4 && G.warn("cookieStore warning: large cookie, len=" + l2.length), B.cookie = l2, l2;
      } catch (e7) {
        return;
      }
  }, remove: function(e6, t2) {
    try {
      mt.set(e6, "", -1, t2);
    } catch (e7) {
      return;
    }
  } };
  var yt = null;
  var bt = { is_supported: function() {
    if (!I(yt))
      return yt;
    var e6 = true;
    if (x(A))
      e6 = false;
    else
      try {
        var t2 = "__mplssupport__";
        bt.set(t2, "xyz"), bt.get(t2) !== '"xyz"' && (e6 = false), bt.remove(t2);
      } catch (t3) {
        e6 = false;
      }
    return e6 || G.error("localStorage unsupported; falling back to cookie store"), yt = e6, e6;
  }, error: function(e6) {
    G.error("localStorage error: " + e6);
  }, get: function(e6) {
    try {
      return A == null ? void 0 : A.localStorage.getItem(e6);
    } catch (e7) {
      bt.error(e7);
    }
    return null;
  }, parse: function(e6) {
    try {
      return JSON.parse(bt.get(e6)) || {};
    } catch (e7) {
    }
    return null;
  }, set: function(e6, t2) {
    try {
      A == null || A.localStorage.setItem(e6, JSON.stringify(t2));
    } catch (e7) {
      bt.error(e7);
    }
  }, remove: function(e6) {
    try {
      A == null || A.localStorage.removeItem(e6);
    } catch (e7) {
      bt.error(e7);
    }
  } };
  var wt = ["distinct_id", Le, Be];
  var kt = t(t({}, bt), {}, { parse: function(e6) {
    try {
      var t2 = {};
      try {
        t2 = mt.parse(e6) || {};
      } catch (e7) {
      }
      var n2 = X(t2, JSON.parse(bt.get(e6) || "{}"));
      return bt.set(e6, n2), n2;
    } catch (e7) {
    }
    return null;
  }, set: function(e6, t2, n2, r2, i2) {
    try {
      bt.set(e6, t2);
      var o2 = {};
      wt.forEach(function(e7) {
        t2[e7] && (o2[e7] = t2[e7]);
      }), Object.keys(o2).length && mt.set(e6, o2, n2, r2, i2);
    } catch (e7) {
      bt.error(e7);
    }
  }, remove: function(e6, t2) {
    try {
      A == null || A.localStorage.removeItem(e6), mt.remove(e6, t2);
    } catch (e7) {
      bt.error(e7);
    }
  } });
  var St = {};
  var Ft = { is_supported: function() {
    return true;
  }, error: function(e6) {
    G.error("memoryStorage error: " + e6);
  }, get: function(e6) {
    return St[e6] || null;
  }, parse: function(e6) {
    return St[e6] || null;
  }, set: function(e6, t2) {
    St[e6] = t2;
  }, remove: function(e6) {
    delete St[e6];
  } };
  var Rt = null;
  var Pt = { is_supported: function() {
    if (!I(Rt))
      return Rt;
    if (Rt = true, x(A))
      Rt = false;
    else
      try {
        var e6 = "__support__";
        Pt.set(e6, "xyz"), Pt.get(e6) !== '"xyz"' && (Rt = false), Pt.remove(e6);
      } catch (e7) {
        Rt = false;
      }
    return Rt;
  }, error: function(e6) {
    G.error("sessionStorage error: ", e6);
  }, get: function(e6) {
    try {
      return A == null ? void 0 : A.sessionStorage.getItem(e6);
    } catch (e7) {
      Pt.error(e7);
    }
    return null;
  }, parse: function(e6) {
    try {
      return JSON.parse(Pt.get(e6)) || null;
    } catch (e7) {
    }
    return null;
  }, set: function(e6, t2) {
    try {
      A == null || A.sessionStorage.setItem(e6, JSON.stringify(t2));
    } catch (e7) {
      Pt.error(e7);
    }
  }, remove: function(e6) {
    try {
      A == null || A.sessionStorage.removeItem(e6);
    } catch (e7) {
      Pt.error(e7);
    }
  } };
  var xt = ["localhost", "127.0.0.1"];
  var Et = !(!U || !("withCredentials" in new U())) || !!j;
  var It = function(e6) {
    var t2 = B == null ? void 0 : B.createElement("a");
    return x(t2) ? null : (t2.href = e6, t2);
  };
  var Ct = function(e6, t2) {
    return !!function(e7) {
      try {
        new RegExp(e7);
      } catch (e8) {
        return false;
      }
      return true;
    }(t2) && new RegExp(t2).test(e6);
  };
  var Tt = function(e6) {
    var t2, n2, r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "&", i2 = [];
    return K(e6, function(e7, r3) {
      x(e7) || x(r3) || r3 === "undefined" || (t2 = encodeURIComponent(function(e8) {
        return e8 instanceof File;
      }(e7) ? e7.name : e7.toString()), n2 = encodeURIComponent(r3), i2[i2.length] = n2 + "=" + t2);
    }), i2.join(r2);
  };
  var $t = function(e6, t2) {
    for (var n2, r2 = ((e6.split("#")[0] || "").split("?")[1] || "").split("&"), i2 = 0; i2 < r2.length; i2++) {
      var o2 = r2[i2].split("=");
      if (o2[0] === t2) {
        n2 = o2;
        break;
      }
    }
    if (!S(n2) || n2.length < 2)
      return "";
    var s2 = n2[1];
    try {
      s2 = decodeURIComponent(s2);
    } catch (e7) {
      G.error("Skipping decoding for malformed query param: " + s2);
    }
    return s2.replace(/\+/g, " ");
  };
  var Ot = function(e6, t2) {
    var n2 = e6.match(new RegExp(t2 + "=([^&]*)"));
    return n2 ? n2[1] : null;
  };
  var At = "Mobile";
  var qt = "iOS";
  var Mt = "Android";
  var Dt = "Tablet";
  var Nt = Mt + " " + Dt;
  var Lt = "iPad";
  var Bt = "Apple";
  var Ht = Bt + " Watch";
  var jt = "Safari";
  var Ut = "BlackBerry";
  var Vt = "Samsung";
  var Wt = Vt + "Browser";
  var zt = Vt + " Internet";
  var Gt = "Chrome";
  var Qt = Gt + " OS";
  var Yt = Gt + " " + qt;
  var Jt = "Internet Explorer";
  var Kt = Jt + " " + At;
  var Xt = "Opera";
  var Zt = Xt + " Mini";
  var en = "Edge";
  var tn = "Microsoft " + en;
  var nn = "Firefox";
  var rn = nn + " " + qt;
  var on = "Nintendo";
  var sn = "PlayStation";
  var an = "Xbox";
  var un = Mt + " " + At;
  var ln = At + " " + jt;
  var cn = "Windows";
  var dn = cn + " Phone";
  var hn = "Nokia";
  var fn = "Ouya";
  var pn = "Generic";
  var gn = pn + " " + At.toLowerCase();
  var _n = pn + " " + Dt.toLowerCase();
  var vn = "Konqueror";
  var mn = "(\\d+(\\.\\d+)?)";
  var yn = new RegExp("Version/" + mn);
  var bn = new RegExp(an, "i");
  var wn = new RegExp(sn + " \\w+", "i");
  var kn = new RegExp(on + " \\w+", "i");
  var Sn = new RegExp(Ut + "|PlayBook|BB10", "i");
  var Fn = { "NT3.51": "NT 3.11", "NT4.0": "NT 4.0", "5.0": "2000", 5.1: "XP", 5.2: "XP", "6.0": "Vista", 6.1: "7", 6.2: "8", 6.3: "8.1", 6.4: "10", "10.0": "10" };
  var Rn = function(e6, t2) {
    return t2 && Z(t2, Bt) || function(e7) {
      return Z(e7, jt) && !Z(e7, Gt) && !Z(e7, Mt);
    }(e6);
  };
  var Pn = function(e6, t2, n2) {
    return n2 ? Xt : (t2 = t2 || "", Z(e6, " OPR/") && Z(e6, "Mini") ? Zt : Z(e6, " OPR/") ? Xt : Sn.test(e6) ? Ut : Z(e6, "IE" + At) || Z(e6, "WPDesktop") ? Kt : Z(e6, Wt) ? zt : Z(e6, en) || Z(e6, "Edg/") ? tn : Z(e6, "FBIOS") ? "Facebook " + At : Z(e6, Gt) ? Gt : Z(e6, "CriOS") ? Yt : Z(e6, "UCWEB") || Z(e6, "UCBrowser") ? "UC Browser" : Z(e6, "FxiOS") ? rn : Z(e6, Mt) ? un : Z(e6.toLowerCase(), vn.toLowerCase()) ? vn : Rn(e6, t2) ? Z(e6, At) ? ln : jt : Z(e6, nn) ? nn : Z(e6, "MSIE") || Z(e6, "Trident/") ? Jt : Z(e6, "Gecko") ? nn : "");
  };
  var xn = (s(vt = {}, Kt, [new RegExp("rv:" + mn)]), s(vt, tn, [new RegExp(en + "?\\/" + mn)]), s(vt, Gt, [new RegExp(Gt + "/" + mn)]), s(vt, Yt, [new RegExp("CriOS\\/" + mn)]), s(vt, "UC Browser", [new RegExp("(UCBrowser|UCWEB)\\/" + mn)]), s(vt, jt, [yn]), s(vt, ln, [yn]), s(vt, Xt, [new RegExp("(Opera|OPR)\\/" + mn)]), s(vt, nn, [new RegExp(nn + "\\/" + mn)]), s(vt, rn, [new RegExp("FxiOS\\/" + mn)]), s(vt, vn, [new RegExp("Konqueror[:/]?" + mn, "i")]), s(vt, Ut, [new RegExp(Ut + " " + mn), yn]), s(vt, un, [new RegExp("android\\s" + mn)]), s(vt, zt, [new RegExp(Wt + "\\/" + mn)]), s(vt, Jt, [new RegExp("(rv:|MSIE )" + mn)]), s(vt, "Mozilla", [new RegExp("rv:" + mn)]), vt);
  var En = [[new RegExp(an + "; " + an + " (.*?)[);]", "i"), function(e6) {
    return [an, e6 && e6[1] || ""];
  }], [new RegExp(on, "i"), [on, ""]], [new RegExp(sn, "i"), [sn, ""]], [Sn, [Ut, ""]], [new RegExp(cn, "i"), function(e6, t2) {
    if (/Phone/.test(t2) || /WPDesktop/.test(t2))
      return [dn, ""];
    if (new RegExp(At).test(t2) && !/IEMobile\b/.test(t2))
      return [cn + " " + At, ""];
    var n2 = /Windows NT ([0-9.]+)/i.exec(t2);
    if (n2 && n2[1]) {
      var r2 = n2[1], i2 = Fn[r2] || "";
      return /arm/i.test(t2) && (i2 = "RT"), [cn, i2];
    }
    return [cn, ""];
  }], [/((iPhone|iPad|iPod).*?OS (\d+)_(\d+)_?(\d+)?|iPhone)/, function(e6) {
    if (e6 && e6[3]) {
      var t2 = [e6[3], e6[4], e6[5] || "0"];
      return [qt, t2.join(".")];
    }
    return [qt, ""];
  }], [/(watch.*\/(\d+\.\d+\.\d+)|watch os,(\d+\.\d+),)/i, function(e6) {
    var t2 = "";
    return e6 && e6.length >= 3 && (t2 = x(e6[2]) ? e6[3] : e6[2]), ["watchOS", t2];
  }], [new RegExp("(" + Mt + " (\\d+)\\.(\\d+)\\.?(\\d+)?|" + Mt + ")", "i"), function(e6) {
    if (e6 && e6[2]) {
      var t2 = [e6[2], e6[3], e6[4] || "0"];
      return [Mt, t2.join(".")];
    }
    return [Mt, ""];
  }], [/Mac OS X (\d+)[_.](\d+)[_.]?(\d+)?/i, function(e6) {
    var t2 = ["Mac OS X", ""];
    if (e6 && e6[1]) {
      var n2 = [e6[1], e6[2], e6[3] || "0"];
      t2[1] = n2.join(".");
    }
    return t2;
  }], [/Mac/i, ["Mac OS X", ""]], [/CrOS/, [Qt, ""]], [/Linux|debian/i, ["Linux", ""]]];
  var In = function(e6) {
    return kn.test(e6) ? on : wn.test(e6) ? sn : bn.test(e6) ? an : new RegExp(fn, "i").test(e6) ? fn : new RegExp("(" + dn + "|WPDesktop)", "i").test(e6) ? dn : /iPad/.test(e6) ? Lt : /iPod/.test(e6) ? "iPod Touch" : /iPhone/.test(e6) ? "iPhone" : /(watch)(?: ?os[,/]|\d,\d\/)[\d.]+/i.test(e6) ? Ht : Sn.test(e6) ? Ut : /(kobo)\s(ereader|touch)/i.test(e6) ? "Kobo" : new RegExp(hn, "i").test(e6) ? hn : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i.test(e6) || /(kf[a-z]+)( bui|\)).+silk\//i.test(e6) ? "Kindle Fire" : /(Android|ZTE)/i.test(e6) ? !new RegExp(At).test(e6) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(e6) ? /pixel[\daxl ]{1,6}/i.test(e6) && !/pixel c/i.test(e6) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(e6) || /lmy47v/i.test(e6) && !/QTAQZ3/i.test(e6) ? Mt : Nt : Mt : new RegExp("(pda|" + At + ")", "i").test(e6) ? gn : new RegExp(Dt, "i").test(e6) && !new RegExp(Dt + " pc", "i").test(e6) ? _n : "";
  };
  var Cn = "https?://(.*)";
  var Tn = { campaignParams: function(e6) {
    var t2 = ["utm_source", "utm_medium", "utm_campaign", "utm_content", "utm_term", "gclid", "gad_source", "gbraid", "wbraid", "fbclid", "msclkid"].concat(e6 || []), n2 = {};
    return K(t2, function(e7) {
      var t3 = B ? $t(B.URL, e7) : "";
      t3.length && (n2[e7] = t3);
    }), n2;
  }, searchEngine: function() {
    var e6 = B == null ? void 0 : B.referrer;
    return e6 ? e6.search(Cn + "google.([^/?]*)") === 0 ? "google" : e6.search(Cn + "bing.com") === 0 ? "bing" : e6.search(Cn + "yahoo.com") === 0 ? "yahoo" : e6.search(Cn + "duckduckgo.com") === 0 ? "duckduckgo" : null : null;
  }, searchInfo: function() {
    var e6 = Tn.searchEngine(), t2 = e6 != "yahoo" ? "q" : "p", n2 = {};
    if (!I(e6)) {
      n2.$search_engine = e6;
      var r2 = B ? $t(B.referrer, t2) : "";
      r2.length && (n2.ph_keyword = r2);
    }
    return n2;
  }, browser: Pn, browserVersion: function(e6, t2, n2) {
    var r2 = Pn(e6, t2, n2), i2 = xn[r2];
    if (x(i2))
      return null;
    for (var o2 = 0; o2 < i2.length; o2++) {
      var s2 = i2[o2], a2 = e6.match(s2);
      if (a2)
        return parseFloat(a2[a2.length - 2]);
    }
    return null;
  }, browserLanguage: function() {
    return navigator.language || navigator.userLanguage;
  }, os: function(e6) {
    for (var t2 = 0; t2 < En.length; t2++) {
      var n2 = f(En[t2], 2), r2 = n2[0], i2 = n2[1], o2 = r2.exec(e6), s2 = o2 && (R(i2) ? i2(o2, e6) : i2);
      if (s2)
        return s2;
    }
    return ["", ""];
  }, device: In, deviceType: function(e6) {
    var t2 = In(e6);
    return t2 === Lt || t2 === Nt || t2 === "Kobo" || t2 === "Kindle Fire" || t2 === _n ? Dt : t2 === on || t2 === an || t2 === sn || t2 === fn ? "Console" : t2 === Ht ? "Wearable" : t2 ? At : "Desktop";
  }, referrer: function() {
    return (B == null ? void 0 : B.referrer) || "$direct";
  }, referringDomain: function() {
    var e6;
    return B != null && B.referrer && ((e6 = It(B.referrer)) === null || e6 === void 0 ? void 0 : e6.host) || "$direct";
  }, properties: function() {
    if (!V)
      return {};
    var e6 = f(Tn.os(V), 2), t2 = e6[0], n2 = e6[1];
    return X(ie({ $os: t2, $os_version: n2, $browser: Tn.browser(V, navigator.vendor, W.opera), $device: Tn.device(V), $device_type: Tn.deviceType(V) }), { $current_url: H == null ? void 0 : H.href, $host: H == null ? void 0 : H.host, $pathname: H == null ? void 0 : H.pathname, $raw_user_agent: V.length > 1e3 ? V.substring(0, 997) + "..." : V, $browser_version: Tn.browserVersion(V, navigator.vendor, W.opera), $browser_language: Tn.browserLanguage(), $screen_height: A == null ? void 0 : A.screen.height, $screen_width: A == null ? void 0 : A.screen.width, $viewport_height: A == null ? void 0 : A.innerHeight, $viewport_width: A == null ? void 0 : A.innerWidth, $lib: "web", $lib_version: m.LIB_VERSION, $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10), $time: te() / 1e3 });
  }, people_properties: function() {
    if (!V)
      return {};
    var e6 = f(Tn.os(V), 2), t2 = e6[0], n2 = e6[1];
    return X(ie({ $os: t2, $os_version: n2, $browser: Tn.browser(V, navigator.vendor, W.opera) }), { $browser_version: Tn.browserVersion(V, navigator.vendor, W.opera) });
  } };
  var $n = ["cookie", "localstorage", "localstorage+cookie", "sessionstorage", "memory"];
  var On = function() {
    function e6(t2) {
      r(this, e6), this.config = t2, this.props = {}, this.campaign_params_saved = false, this.name = function(e7) {
        var t3 = "";
        return e7.token && (t3 = e7.token.replace(/\+/g, "PL").replace(/\//g, "SL").replace(/=/g, "EQ")), e7.persistence_name ? "ph_" + e7.persistence_name : "ph_" + t3 + "_posthog";
      }(t2), this.storage = this.buildStorage(t2), this.load(), this.update_config(t2, t2), this.save();
    }
    return o(e6, [{ key: "buildStorage", value: function(e7) {
      $n.indexOf(e7.persistence.toLowerCase()) === -1 && (G.critical("Unknown persistence type " + e7.persistence + "; falling back to localStorage+cookie"), e7.persistence = "localStorage+cookie");
      var t2 = e7.persistence.toLowerCase();
      return t2 === "localstorage" && bt.is_supported() ? bt : t2 === "localstorage+cookie" && kt.is_supported() ? kt : t2 === "sessionstorage" && Pt.is_supported() ? Pt : t2 === "memory" ? Ft : t2 === "cookie" ? mt : kt.is_supported() ? kt : mt;
    } }, { key: "properties", value: function() {
      var e7 = {};
      return K(this.props, function(t2, n2) {
        if (n2 === He && P(t2))
          for (var r2 = Object.keys(t2), i2 = 0; i2 < r2.length; i2++)
            e7["$feature/".concat(r2[i2])] = t2[r2[i2]];
        else
          s2 = n2, a2 = false, (I(o2 = Je) ? a2 : N && o2.indexOf === N ? o2.indexOf(s2) != -1 : (K(o2, function(e8) {
            if (a2 || (a2 = e8 === s2))
              return Q;
          }), a2)) || (e7[n2] = t2);
        var o2, s2, a2;
      }), e7;
    } }, { key: "load", value: function() {
      if (!this.disabled) {
        var e7 = this.storage.parse(this.name);
        e7 && (this.props = X({}, e7));
      }
    } }, { key: "save", value: function() {
      this.disabled || this.storage.set(this.name, this.props, this.expire_days, this.cross_subdomain, this.secure);
    } }, { key: "remove", value: function() {
      this.storage.remove(this.name, false), this.storage.remove(this.name, true);
    } }, { key: "clear", value: function() {
      this.remove(), this.props = {};
    } }, { key: "register_once", value: function(e7, t2, n2) {
      var r2 = this;
      if (P(e7)) {
        x(t2) && (t2 = "None"), this.expire_days = x(n2) ? this.default_expiry : n2;
        var i2 = false;
        if (K(e7, function(e8, n3) {
          r2.props.hasOwnProperty(n3) && r2.props[n3] !== t2 || (r2.props[n3] = e8, i2 = true);
        }), i2)
          return this.save(), true;
      }
      return false;
    } }, { key: "register", value: function(e7, t2) {
      var n2 = this;
      if (P(e7)) {
        this.expire_days = x(t2) ? this.default_expiry : t2;
        var r2 = false;
        if (K(e7, function(t3, i2) {
          e7.hasOwnProperty(i2) && n2.props[i2] !== t3 && (n2.props[i2] = t3, r2 = true);
        }), r2)
          return this.save(), true;
      }
      return false;
    } }, { key: "unregister", value: function(e7) {
      e7 in this.props && (delete this.props[e7], this.save());
    } }, { key: "update_campaign_params", value: function() {
      this.campaign_params_saved || (this.register(Tn.campaignParams(this.config.custom_campaign_params)), this.campaign_params_saved = true);
    } }, { key: "update_search_keyword", value: function() {
      this.register(Tn.searchInfo());
    } }, { key: "update_referrer_info", value: function() {
      this.register({ $referrer: this.props.$referrer || Tn.referrer(), $referring_domain: this.props.$referring_domain || Tn.referringDomain() });
    } }, { key: "get_referrer_info", value: function() {
      return ie({ $referrer: this.props.$referrer, $referring_domain: this.props.$referring_domain });
    } }, { key: "safe_merge", value: function(e7) {
      return K(this.props, function(t2, n2) {
        n2 in e7 || (e7[n2] = t2);
      }), e7;
    } }, { key: "update_config", value: function(e7, t2) {
      if (this.default_expiry = this.expire_days = e7.cookie_expiration, this.set_disabled(e7.disable_persistence), this.set_cross_subdomain(e7.cross_subdomain_cookie), this.set_secure(e7.secure_cookie), e7.persistence !== t2.persistence) {
        var n2 = this.buildStorage(e7), r2 = this.props;
        this.clear(), this.storage = n2, this.props = r2, this.save();
      }
    } }, { key: "set_disabled", value: function(e7) {
      this.disabled = e7, this.disabled ? this.remove() : this.save();
    } }, { key: "set_cross_subdomain", value: function(e7) {
      e7 !== this.cross_subdomain && (this.cross_subdomain = e7, this.remove(), this.save());
    } }, { key: "get_cross_subdomain", value: function() {
      return !!this.cross_subdomain;
    } }, { key: "set_secure", value: function(e7) {
      e7 !== this.secure && (this.secure = e7, this.remove(), this.save());
    } }, { key: "set_event_timer", value: function(e7, t2) {
      var n2 = this.props[$e] || {};
      n2[e7] = t2, this.props[$e] = n2, this.save();
    } }, { key: "remove_event_timer", value: function(e7) {
      var t2 = (this.props[$e] || {})[e7];
      return x(t2) || (delete this.props[$e][e7], this.save()), t2;
    } }, { key: "get_user_state", value: function() {
      return this.props[Ge] || "anonymous";
    } }, { key: "set_user_state", value: function(e7) {
      this.props[Ge] = e7, this.save();
    } }, { key: "get_quota_limits", value: function() {
      return this.props[Qe] || {};
    } }, { key: "set_quota_limits", value: function(e7) {
      this.props[Qe] = e7, this.save();
    } }]), e6;
  }();
  var An = 2;
  var qn = 4;
  var Mn = o(function e2(t2) {
    var n2, i2, o2 = this, a2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    r(this, e2), s(this, "bucketSize", 100), s(this, "refillRate", 10), s(this, "mutationBuckets", {}), s(this, "loggedTracker", {}), s(this, "refillBuckets", function() {
      Object.keys(o2.mutationBuckets).forEach(function(e6) {
        o2.mutationBuckets[e6] = o2.mutationBuckets[e6] + o2.refillRate, o2.mutationBuckets[e6] >= o2.bucketSize && delete o2.mutationBuckets[e6];
      });
    }), s(this, "getNodeOrRelevantParent", function(e6) {
      var t3 = o2.rrweb.mirror.getNode(e6);
      if ((t3 == null ? void 0 : t3.nodeName) !== "svg" && t3 instanceof Element) {
        var n3 = t3.closest("svg");
        if (n3)
          return [o2.rrweb.mirror.getId(n3), n3];
      }
      return [e6, t3];
    }), s(this, "numberOfChanges", function(e6) {
      var t3, n3, r2, i3, o3, s2, a3, u2;
      return ((t3 = (n3 = e6.removes) === null || n3 === void 0 ? void 0 : n3.length) !== null && t3 !== void 0 ? t3 : 0) + ((r2 = (i3 = e6.attributes) === null || i3 === void 0 ? void 0 : i3.length) !== null && r2 !== void 0 ? r2 : 0) + ((o3 = (s2 = e6.texts) === null || s2 === void 0 ? void 0 : s2.length) !== null && o3 !== void 0 ? o3 : 0) + ((a3 = (u2 = e6.adds) === null || u2 === void 0 ? void 0 : u2.length) !== null && a3 !== void 0 ? a3 : 0);
    }), s(this, "throttleMutations", function(e6) {
      if (e6.type !== 3 || e6.data.source !== 0)
        return e6;
      var t3 = e6.data, n3 = o2.numberOfChanges(t3);
      t3.attributes && (t3.attributes = t3.attributes.filter(function(e7) {
        var t4, n4, r3, i3 = f(o2.getNodeOrRelevantParent(e7.id), 2), s2 = i3[0], a3 = i3[1];
        if (o2.mutationBuckets[s2] === 0)
          return false;
        (o2.mutationBuckets[s2] = (t4 = o2.mutationBuckets[s2]) !== null && t4 !== void 0 ? t4 : o2.bucketSize, o2.mutationBuckets[s2] = Math.max(o2.mutationBuckets[s2] - 1, 0), o2.mutationBuckets[s2] === 0) && (o2.loggedTracker[s2] || (o2.loggedTracker[s2] = true, (n4 = (r3 = o2.options).onBlockedNode) === null || n4 === void 0 || n4.call(r3, s2, a3)));
        return e7;
      }));
      var r2 = o2.numberOfChanges(t3);
      return r2 !== 0 || n3 === r2 ? e6 : void 0;
    }), this.rrweb = t2, this.options = a2, this.refillRate = (n2 = this.options.refillRate) !== null && n2 !== void 0 ? n2 : this.refillRate, this.bucketSize = (i2 = this.options.bucketSize) !== null && i2 !== void 0 ? i2 : this.bucketSize, setInterval(function() {
      o2.refillBuckets();
    }, 1e3);
  });
  var Dn = function(e6) {
    return e6[e6.DomContentLoaded = 0] = "DomContentLoaded", e6[e6.Load = 1] = "Load", e6[e6.FullSnapshot = 2] = "FullSnapshot", e6[e6.IncrementalSnapshot = 3] = "IncrementalSnapshot", e6[e6.Meta = 4] = "Meta", e6[e6.Custom = 5] = "Custom", e6[e6.Plugin = 6] = "Plugin", e6;
  }(Dn || {});
  var Nn = { initiatorTypes: ["audio", "beacon", "body", "css", "early-hint", "embed", "fetch", "frame", "iframe", "icon", "image", "img", "input", "link", "navigation", "object", "ping", "script", "track", "video", "xmlhttprequest"], maskRequestFn: function(e6) {
    return e6;
  }, recordHeaders: false, recordBody: false, recordInitialRequests: false, recordPerformance: false, performanceEntryTypeToObserve: ["first-input", "navigation", "paint", "resource"], payloadSizeLimitBytes: 1e6 };
  var Ln = ["authorization", "x-forwarded-for", "authorization", "cookie", "set-cookie", "x-api-key", "x-real-ip", "remote-addr", "forwarded", "proxy-authorization", "x-csrf-token", "x-csrftoken", "x-xsrf-token"];
  var Bn = ["/s/", "/e/", "/i/"];
  function Hn(e6, t2, n2, r2) {
    if (C(e6))
      return e6;
    var i2 = (t2 == null ? void 0 : t2["content-length"]) || function(e7) {
      return new Blob([e7]).size;
    }(e6);
    return E(i2) && (i2 = parseInt(i2)), i2 > n2 ? "[SessionReplay] ".concat(r2, " body too large to record (").concat(i2, " bytes)") : e6;
  }
  var jn = function(e6, n2) {
    var r2, i2, o2, s2 = e6.session_recording, a2 = s2.recordHeaders !== false && n2.recordHeaders, u2 = s2.recordBody !== false && n2.recordBody, l2 = s2.recordPerformance !== false && n2.recordPerformance, c2 = (r2 = s2, o2 = Math.min(1e6, (i2 = r2.payloadSizeLimitBytes) !== null && i2 !== void 0 ? i2 : 1e6), function(e7) {
      return e7 != null && e7.requestBody && (e7.requestBody = Hn(e7.requestBody, e7.requestHeaders, o2, "Request")), e7 != null && e7.responseBody && (e7.responseBody = Hn(e7.responseBody, e7.responseHeaders, o2, "Response")), e7;
    }), d2 = function(e7) {
      return c2(function(e8) {
        var t3 = It(e8.name);
        if (!(t3 && t3.pathname && Bn.some(function(e9) {
          return t3.pathname.indexOf(e9) === 0;
        })))
          return e8;
      }((t2 = e7, Object.keys((n3 = t2.requestHeaders) !== null && n3 !== void 0 ? n3 : {}).forEach(function(e8) {
        var n4;
        Ln.includes(e8.toLowerCase()) && ((n4 = t2.requestHeaders) === null || n4 === void 0 || delete n4[e8]);
      }), t2)));
      var t2, n3;
    }, h2 = R(e6.session_recording.maskNetworkRequestFn);
    return h2 && R(e6.session_recording.maskCapturedNetworkRequestFn) && G.warn("Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored."), h2 && (e6.session_recording.maskCapturedNetworkRequestFn = function(n3) {
      var r3 = e6.session_recording.maskNetworkRequestFn({ url: n3.name });
      return t(t({}, n3), {}, { name: r3 == null ? void 0 : r3.url });
    }), s2.maskRequestFn = R(e6.session_recording.maskCapturedNetworkRequestFn) ? function(t2) {
      var n3, r3, i3, o3 = d2(t2);
      return o3 && (n3 = (r3 = (i3 = e6.session_recording).maskCapturedNetworkRequestFn) === null || r3 === void 0 ? void 0 : r3.call(i3, o3)) !== null && n3 !== void 0 ? n3 : void 0;
    } : void 0, s2.maskRequestFn || (s2.maskRequestFn = d2), t(t(t({}, Nn), s2), {}, { recordHeaders: a2, recordBody: u2, recordPerformance: l2, recordInitialRequests: l2 });
  };
  var Un = "__ph_opt_in_out_";
  function Vn(e6, t2) {
    Xn(true, e6, t2);
  }
  function Wn(e6, t2) {
    Xn(false, e6, t2);
  }
  function zn(e6, t2) {
    return Kn(e6, t2) === "1";
  }
  function Gn(e6, t2) {
    return !!function(e7) {
      if (e7 && e7.respectDnt) {
        var t3 = e7 && e7.window || A, n2 = t3 == null ? void 0 : t3.navigator, r2 = false;
        return K([n2 == null ? void 0 : n2.doNotTrack, n2.msDoNotTrack, t3.doNotTrack], function(e8) {
          Z([true, 1, "1", "yes"], e8) && (r2 = true);
        }), r2;
      }
      return false;
    }(t2) || Kn(e6, t2) === "0";
  }
  function Qn(e6, t2) {
    Yn(t2 = t2 || {}).remove(Jn(e6, t2), !!t2.crossSubdomainCookie);
  }
  function Yn(e6) {
    return (e6 = e6 || {}).persistenceType === "localStorage" ? bt : e6.persistenceType === "localStorage+cookie" ? kt : mt;
  }
  function Jn(e6, t2) {
    return ((t2 = t2 || {}).persistencePrefix || Un) + e6;
  }
  function Kn(e6, t2) {
    return Yn(t2).get(Jn(e6, t2));
  }
  function Xn(e6, t2, n2) {
    E(t2) && t2.length ? (Yn(n2 = n2 || {}).set(Jn(t2, n2), e6 ? 1 : 0, T(n2.cookieExpiration) ? n2.cookieExpiration : null, n2.crossSubdomainCookie, n2.secureCookie), n2.capture && e6 && n2.capture(n2.captureEventName || "$opt_in", n2.captureProperties || {}, { send_instantly: true })) : G.error("gdpr." + (e6 ? "optIn" : "optOut") + " called with an invalid token");
  }
  function Zn(e6) {
    var t2 = false;
    try {
      var n2 = e6.config.token, r2 = e6.config.respect_dnt, i2 = e6.config.opt_out_capturing_persistence_type, o2 = e6.config.opt_out_capturing_cookie_prefix || void 0, s2 = e6.config.window;
      n2 && (t2 = Gn(n2, { respectDnt: r2, persistenceType: i2, persistencePrefix: o2, window: s2 }));
    } catch (e7) {
      G.error("Unexpected error when checking capturing opt-out status: " + e7);
    }
    return t2;
  }
  var er;
  var tr = 3e5;
  var nr = tr;
  !function(e6) {
    e6[e6.Mutation = 0] = "Mutation", e6[e6.MouseMove = 1] = "MouseMove", e6[e6.MouseInteraction = 2] = "MouseInteraction", e6[e6.Scroll = 3] = "Scroll", e6[e6.ViewportResize = 4] = "ViewportResize", e6[e6.Input = 5] = "Input", e6[e6.TouchMove = 6] = "TouchMove", e6[e6.MediaInteraction = 7] = "MediaInteraction", e6[e6.StyleSheetRule = 8] = "StyleSheetRule", e6[e6.CanvasMutation = 9] = "CanvasMutation", e6[e6.Font = 10] = "Font", e6[e6.Log = 11] = "Log", e6[e6.Drag = 12] = "Drag", e6[e6.StyleDeclaration = 13] = "StyleDeclaration", e6[e6.Selection = 14] = "Selection", e6[e6.AdoptedStyleSheet = 15] = "AdoptedStyleSheet";
  }(er || (er = {}));
  var rr = [er.MouseMove, er.MouseInteraction, er.Scroll, er.ViewportResize, er.Input, er.TouchMove, er.MediaInteraction, er.Drag];
  var ir = function(e6) {
    return { rrwebMethod: e6, enqueuedAt: Date.now(), attempt: 1 };
  };
  var or = "[SessionRecording]";
  var sr = function() {
    function e6(t2) {
      var n2 = this;
      if (r(this, e6), s(this, "queuedRRWebEvents", []), s(this, "isIdle", false), s(this, "_linkedFlagSeen", false), s(this, "_lastActivityTimestamp", Date.now()), s(this, "windowId", null), s(this, "sessionId", null), s(this, "_linkedFlag", null), s(this, "_sampleRate", null), s(this, "_minimumDuration", null), s(this, "_forceAllowLocalhostNetworkCapture", false), this.instance = t2, this._captureStarted = false, this._endpoint = "/s/", this.stopRrweb = void 0, this.receivedDecide = false, A == null || A.addEventListener("beforeunload", function() {
        n2._flushBuffer();
      }), A == null || A.addEventListener("offline", function() {
        n2._tryAddCustomEvent("browser offline", {});
      }), A == null || A.addEventListener("online", function() {
        n2._tryAddCustomEvent("browser online", {});
      }), !this.instance.sessionManager)
        throw G.error(or + " started without valid sessionManager"), new Error(or + " started without valid sessionManager. This is a bug.");
      this.buffer = this.clearBuffer();
    }
    return o(e6, [{ key: "started", get: function() {
      return this._captureStarted;
    } }, { key: "sessionManager", get: function() {
      if (!this.instance.sessionManager)
        throw G.error(or + " started without valid sessionManager"), new Error(or + " started without valid sessionManager. This is a bug.");
      return this.instance.sessionManager;
    } }, { key: "isSampled", get: function() {
      return T(this._sampleRate) ? this.instance.get_property(Be) : null;
    } }, { key: "sessionDuration", get: function() {
      var e7, t2, n2 = (e7 = this.buffer) === null || e7 === void 0 ? void 0 : e7.data[((t2 = this.buffer) === null || t2 === void 0 ? void 0 : t2.data.length) - 1], r2 = this.sessionManager.checkAndGetSessionAndWindowId(true).sessionStartTimestamp;
      return n2 ? n2.timestamp - r2 : null;
    } }, { key: "isRecordingEnabled", get: function() {
      var e7 = !!this.instance.get_property(Ae), t2 = !this.instance.config.disable_session_recording;
      return A && e7 && t2;
    } }, { key: "isConsoleLogCaptureEnabled", get: function() {
      var e7 = !!this.instance.get_property(qe), t2 = this.instance.config.enable_recording_console_log;
      return t2 != null ? t2 : e7;
    } }, { key: "canvasRecording", get: function() {
      var e7 = this.instance.get_property(Ne);
      return e7 && e7.fps && e7.quality ? { enabled: e7.enabled, fps: e7.fps, quality: e7.quality } : void 0;
    } }, { key: "recordingVersion", get: function() {
      var e7, t2 = this.instance.get_property(Me);
      return ((e7 = this.instance.config.session_recording) === null || e7 === void 0 ? void 0 : e7.recorderVersion) || t2 || "v1";
    } }, { key: "networkPayloadCapture", get: function() {
      var e7, t2, n2 = this.instance.get_property(De), r2 = { recordHeaders: (e7 = this.instance.config.session_recording) === null || e7 === void 0 ? void 0 : e7.recordHeaders, recordBody: (t2 = this.instance.config.session_recording) === null || t2 === void 0 ? void 0 : t2.recordBody }, i2 = (r2 == null ? void 0 : r2.recordHeaders) || (n2 == null ? void 0 : n2.recordHeaders), o2 = (r2 == null ? void 0 : r2.recordBody) || (n2 == null ? void 0 : n2.recordBody), s2 = this.instance.config.capture_performance || (n2 == null ? void 0 : n2.capturePerformance);
      return i2 || o2 || s2 ? { recordHeaders: i2, recordBody: o2, recordPerformance: s2 } : void 0;
    } }, { key: "status", get: function() {
      return this.receivedDecide ? this.isRecordingEnabled ? C(this._linkedFlag) || this._linkedFlagSeen ? $(this.isSampled) ? this.isSampled ? "sampled" : "disabled" : "active" : "buffering" : "disabled" : "buffering";
    } }, { key: "startRecordingIfEnabled", value: function() {
      this.isRecordingEnabled ? (this._startCapture(), G.info(or + " started")) : (this.stopRecording(), this.clearBuffer());
    } }, { key: "stopRecording", value: function() {
      this._captureStarted && this.stopRrweb && (this.stopRrweb(), this.stopRrweb = void 0, this._captureStarted = false, G.info(or + " stopped"));
    } }, { key: "makeSamplingDecision", value: function(e7) {
      var t2, n2 = this.sessionId !== e7;
      if (T(this._sampleRate)) {
        var r2, i2 = this.isSampled;
        if (n2 || !$(i2))
          r2 = Math.random() < this._sampleRate;
        else
          r2 = i2;
        r2 || G.warn(or + " Sample rate (".concat(this._sampleRate, ") has determined that this sessionId (").concat(e7, ") will not be sent to the server.")), (t2 = this.instance.persistence) === null || t2 === void 0 || t2.register(s({}, Be, r2));
      } else {
        var o2;
        (o2 = this.instance.persistence) === null || o2 === void 0 || o2.register(s({}, Be, null));
      }
    } }, { key: "afterDecideResponse", value: function(e7) {
      var n2, r2, i2, o2, a2, u2, l2, c2, d2, h2, f2, p2 = this;
      this.instance.persistence && this.instance.persistence.register((s(f2 = {}, Ae, !!e7.sessionRecording), s(f2, qe, (a2 = e7.sessionRecording) === null || a2 === void 0 ? void 0 : a2.consoleLogRecordingEnabled), s(f2, Me, (u2 = e7.sessionRecording) === null || u2 === void 0 ? void 0 : u2.recorderVersion), s(f2, De, t({ capturePerformance: e7.capturePerformance }, (l2 = e7.sessionRecording) === null || l2 === void 0 ? void 0 : l2.networkPayloadCapture)), s(f2, Ne, { enabled: (c2 = e7.sessionRecording) === null || c2 === void 0 ? void 0 : c2.recordCanvas, fps: (d2 = e7.sessionRecording) === null || d2 === void 0 ? void 0 : d2.canvasFps, quality: (h2 = e7.sessionRecording) === null || h2 === void 0 ? void 0 : h2.canvasQuality }), f2));
      var g2 = (n2 = e7.sessionRecording) === null || n2 === void 0 ? void 0 : n2.sampleRate;
      this._sampleRate = C(g2) ? null : parseFloat(g2);
      var _2, v2 = (r2 = e7.sessionRecording) === null || r2 === void 0 ? void 0 : r2.minimumDurationMilliseconds;
      (this._minimumDuration = x(v2) ? null : v2, this._linkedFlag = ((i2 = e7.sessionRecording) === null || i2 === void 0 ? void 0 : i2.linkedFlag) || null, (o2 = e7.sessionRecording) !== null && o2 !== void 0 && o2.endpoint) && (this._endpoint = (_2 = e7.sessionRecording) === null || _2 === void 0 ? void 0 : _2.endpoint);
      if (T(this._sampleRate) && this.sessionManager.onSessionId(function(e8) {
        p2.makeSamplingDecision(e8);
      }), !C(this._linkedFlag)) {
        var m2, y2, b2 = E(this._linkedFlag) ? this._linkedFlag : (m2 = this._linkedFlag) === null || m2 === void 0 ? void 0 : m2.flag, w2 = E(this._linkedFlag) ? null : (y2 = this._linkedFlag) === null || y2 === void 0 ? void 0 : y2.variant;
        this.instance.onFeatureFlags(function(e8, t2) {
          var n3 = P(t2) && b2 in t2, r3 = w2 ? t2[b2] === w2 : n3;
          r3 && G.info(or + " linked flag matched", { linkedFlag: b2, linkedVariant: w2 }), p2._linkedFlagSeen = r3;
        });
      }
      this.receivedDecide = true, this.startRecordingIfEnabled();
    } }, { key: "log", value: function(e7) {
      var t2, n2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "log";
      (t2 = this.instance.sessionRecording) === null || t2 === void 0 || t2.onRRwebEmit({ type: 6, data: { plugin: "rrweb/console@1", payload: { level: n2, trace: [], payload: [JSON.stringify(e7)] } }, timestamp: te() });
    } }, { key: "_startCapture", value: function() {
      var e7 = this;
      if (!x(Object.assign) && !(this._captureStarted || this.instance.config.disable_session_recording || Zn(this.instance))) {
        this._captureStarted = true, this.sessionManager.checkAndGetSessionAndWindowId();
        var t2 = this.recordingVersion === "v2" ? "recorder-v2.js" : "recorder.js";
        this.instance.__loaded_recorder_version !== this.recordingVersion ? le(this.instance.requestRouter.endpointFor("assets", "/static/".concat(t2, "?v=").concat(m.LIB_VERSION)), function(n2) {
          if (n2)
            return G.error(or + " could not load ".concat(t2), n2);
          e7._onScriptLoaded();
        }) : this._onScriptLoaded();
      }
    } }, { key: "_isInteractiveEvent", value: function(e7) {
      var t2;
      return e7.type === 3 && rr.indexOf((t2 = e7.data) === null || t2 === void 0 ? void 0 : t2.source) !== -1;
    } }, { key: "_updateWindowAndSessionIds", value: function(e7) {
      var t2 = this._isInteractiveEvent(e7);
      t2 || this.isIdle || e7.timestamp - this._lastActivityTimestamp > nr && (this.isIdle = true, this._tryAddCustomEvent("sessionIdle", { reason: "user inactivity", timeSinceLastActive: e7.timestamp - this._lastActivityTimestamp, threshold: nr }));
      var n2 = false;
      if (t2 && (this._lastActivityTimestamp = e7.timestamp, this.isIdle && (this.isIdle = false, this._tryAddCustomEvent("sessionNoLongerIdle", { reason: "user activity", type: e7.type }), n2 = true)), !this.isIdle) {
        var r2 = this.sessionManager.checkAndGetSessionAndWindowId(!t2, e7.timestamp), i2 = r2.windowId, o2 = r2.sessionId, s2 = this.sessionId !== o2, a2 = this.windowId !== i2;
        this.windowId = i2, this.sessionId = o2, (n2 || [An, qn].indexOf(e7.type) === -1 && (a2 || s2)) && this._tryTakeFullSnapshot();
      }
    } }, { key: "_tryRRWebMethod", value: function(e7) {
      try {
        return e7.rrwebMethod(), true;
      } catch (t2) {
        return G.warn(or + " could not emit queued rrweb event.", t2), this.queuedRRWebEvents.length < 10 && this.queuedRRWebEvents.push({ enqueuedAt: e7.enqueuedAt || Date.now(), attempt: e7.attempt++, rrwebMethod: e7.rrwebMethod }), false;
      }
    } }, { key: "_tryAddCustomEvent", value: function(e7, t2) {
      var n2 = this;
      return this._tryRRWebMethod(ir(function() {
        return n2.rrwebRecord.addCustomEvent(e7, t2);
      }));
    } }, { key: "_tryTakeFullSnapshot", value: function() {
      var e7 = this;
      return this._tryRRWebMethod(ir(function() {
        return e7.rrwebRecord.takeFullSnapshot();
      }));
    } }, { key: "_onScriptLoaded", value: function() {
      var e7, n2 = this, r2 = { blockClass: "ph-no-capture", blockSelector: void 0, ignoreClass: "ph-ignore-input", maskTextClass: "ph-mask", maskTextSelector: void 0, maskTextFn: void 0, maskAllInputs: true, maskInputOptions: {}, maskInputFn: void 0, slimDOMOptions: {}, collectFonts: false, inlineStylesheet: true, recordCrossOriginIframes: false };
      this.rrwebRecord = A.rrweb ? A.rrweb.record : A.rrwebRecord;
      for (var i2 = this.instance.config.session_recording, o2 = 0, s2 = Object.entries(i2 || {}); o2 < s2.length; o2++) {
        var a2 = f(s2[o2], 2), u2 = a2[0], l2 = a2[1];
        u2 in r2 && (r2[u2] = l2);
      }
      if (this.canvasRecording && this.canvasRecording.enabled && (r2.recordCanvas = true, r2.sampling = { canvas: this.canvasRecording.fps }, r2.dataURLOptions = { type: "image/webp", quality: this.canvasRecording.quality }), this.rrwebRecord) {
        this.mutationRateLimiter = (e7 = this.mutationRateLimiter) !== null && e7 !== void 0 ? e7 : new Mn(this.rrwebRecord, { onBlockedNode: function(e8, t2) {
          var r3 = "Too many mutations on node '".concat(e8, "'. Rate limiting. This could be due to SVG animations or something similar");
          G.info(r3, { node: t2 }), n2.log(or + " " + r3, "warn");
        } }), this._scheduleFullSnapshot();
        var c2 = this._gatherRRWebPlugins();
        this.stopRrweb = this.rrwebRecord(t({ emit: function(e8) {
          n2.onRRwebEmit(e8);
        }, plugins: c2 }, r2)), this.instance._addCaptureHook(function(e8) {
          try {
            if (e8 === "$pageview") {
              var t2 = A ? n2._maskUrl(A.location.href) : "";
              if (!t2)
                return;
              n2._tryAddCustomEvent("$pageview", { href: t2 }), n2._tryTakeFullSnapshot();
            }
          } catch (e9) {
            G.error("Could not add $pageview to rrweb session", e9);
          }
        }), this._lastActivityTimestamp = Date.now(), this.isIdle = false, this._tryAddCustomEvent("$session_options", { sessionRecordingOptions: r2, activePlugins: c2.map(function(e8) {
          return e8 == null ? void 0 : e8.name;
        }) }), this._tryAddCustomEvent("$posthog_config", { config: this.instance.config });
      } else
        G.error(or + "onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.");
    } }, { key: "_scheduleFullSnapshot", value: function() {
      var e7 = this;
      this._fullSnapshotTimer && clearInterval(this._fullSnapshotTimer), this._fullSnapshotTimer = setInterval(function() {
        e7._tryTakeFullSnapshot();
      }, tr);
    } }, { key: "_gatherRRWebPlugins", value: function() {
      var e7 = [];
      (W.rrwebConsoleRecord && this.isConsoleLogCaptureEnabled && e7.push(W.rrwebConsoleRecord.getRecordConsolePlugin()), this.networkPayloadCapture && R(W.getRecordNetworkPlugin)) && (!xt.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? e7.push(W.getRecordNetworkPlugin(jn(this.instance.config, this.networkPayloadCapture))) : G.info(or + " NetworkCapture not started because we are on localhost."));
      return e7;
    } }, { key: "onRRwebEmit", value: function(e7) {
      if (this._processQueuedEvents(), e7 && P(e7)) {
        if (e7.type === Dn.Meta) {
          var t2 = this._maskUrl(e7.data.href);
          if (!t2)
            return;
          e7.data.href = t2;
        }
        e7.type === Dn.FullSnapshot && this._scheduleFullSnapshot();
        var n2 = this.mutationRateLimiter ? this.mutationRateLimiter.throttleMutations(e7) : e7;
        if (n2) {
          var r2 = function(e8) {
            var t3 = e8;
            if (t3 && P(t3) && t3.type === 6 && P(t3.data) && t3.data.plugin === "rrweb/console@1") {
              t3.data.payload.payload.length > 10 && (t3.data.payload.payload = t3.data.payload.payload.slice(0, 10), t3.data.payload.payload.push("...[truncated]"));
              for (var n3 = [], r3 = 0; r3 < t3.data.payload.payload.length; r3++)
                t3.data.payload.payload[r3] && t3.data.payload.payload[r3].length > 2e3 ? n3.push(t3.data.payload.payload[r3].slice(0, 2e3) + "...[truncated]") : n3.push(t3.data.payload.payload[r3]);
              return t3.data.payload.payload = n3, e8;
            }
            return e8;
          }(n2), i2 = JSON.stringify(r2).length;
          if (this._updateWindowAndSessionIds(r2), !this.isIdle || r2.type === Dn.Custom) {
            var o2 = { $snapshot_bytes: i2, $snapshot_data: r2, $session_id: this.sessionId, $window_id: this.windowId };
            this.status !== "disabled" ? this._captureSnapshotBuffered(o2) : this.clearBuffer();
          }
        }
      }
    } }, { key: "_processQueuedEvents", value: function() {
      var e7 = this;
      if (this.queuedRRWebEvents.length) {
        var t2 = p(this.queuedRRWebEvents);
        this.queuedRRWebEvents = [], t2.forEach(function(n2) {
          Date.now() - n2.enqueuedAt > 2e3 ? e7._tryAddCustomEvent("rrwebQueueTimeout", { enqueuedAt: n2.enqueuedAt, attempt: n2.attempt, queueLength: t2.length }) : e7._tryRRWebMethod(n2) && e7._tryAddCustomEvent("rrwebQueueSuccess", { enqueuedAt: n2.enqueuedAt, attempt: n2.attempt, queueLength: t2.length });
        });
      }
    } }, { key: "_maskUrl", value: function(e7) {
      var t2 = this.instance.config.session_recording;
      if (t2.maskNetworkRequestFn) {
        var n2, r2 = { url: e7 };
        return (n2 = r2 = t2.maskNetworkRequestFn(r2)) === null || n2 === void 0 ? void 0 : n2.url;
      }
      return e7;
    } }, { key: "clearBuffer", value: function() {
      return this.buffer = void 0, { size: 0, data: [], sessionId: this.sessionId, windowId: this.windowId };
    } }, { key: "_flushBuffer", value: function() {
      var e7 = this;
      this.flushBufferTimer && (clearTimeout(this.flushBufferTimer), this.flushBufferTimer = void 0);
      var t2 = this._minimumDuration, n2 = this.sessionDuration, r2 = T(n2) && n2 >= 0, i2 = T(t2) && r2 && n2 < t2;
      return this.status === "buffering" || i2 ? (this.flushBufferTimer = setTimeout(function() {
        e7._flushBuffer();
      }, 2e3), this.buffer || this.clearBuffer()) : this.buffer && this.buffer.data.length !== 0 ? (this._captureSnapshot({ $snapshot_bytes: this.buffer.size, $snapshot_data: this.buffer.data, $session_id: this.buffer.sessionId, $window_id: this.buffer.windowId }), this.clearBuffer()) : this.buffer || this.clearBuffer();
    } }, { key: "_captureSnapshotBuffered", value: function(e7) {
      var t2, n2 = this, r2 = 2 + (((t2 = this.buffer) === null || t2 === void 0 ? void 0 : t2.data.length) || 0);
      (!this.buffer || this.buffer.size + e7.$snapshot_bytes + r2 > 943718.4 || this.buffer.sessionId && this.buffer.sessionId !== this.sessionId) && (this.buffer = this._flushBuffer()), I(this.buffer.sessionId) && !I(this.sessionId) && (this.buffer.sessionId = this.sessionId, this.buffer.windowId = this.windowId), this.buffer.size += e7.$snapshot_bytes, this.buffer.data.push(e7.$snapshot_data), this.flushBufferTimer || (this.flushBufferTimer = setTimeout(function() {
        n2._flushBuffer();
      }, 2e3));
    } }, { key: "_captureSnapshot", value: function(e7) {
      this.instance.capture("$snapshot", e7, { method: "POST", _url: this.instance.requestRouter.endpointFor("api", this._endpoint), _noTruncate: true, _batchKey: "recordings", _metrics: { rrweb_full_snapshot: e7.$snapshot_data.type === An } });
    } }]), e6;
  }();
  var ar = function() {
    function e6(t2) {
      r(this, e6), this.instance = t2, this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags();
    }
    return o(e6, [{ key: "call", value: function() {
      var e7 = this, t2 = se(JSON.stringify({ token: this.instance.config.token, distinct_id: this.instance.get_distinct_id(), groups: this.instance.getGroups(), person_properties: this.instance.get_property(Ue), group_properties: this.instance.get_property(Ve), disable_flags: this.instance.config.advanced_disable_feature_flags || this.instance.config.advanced_disable_feature_flags_on_first_load || void 0 }));
      this.instance._send_request(this.instance.requestRouter.endpointFor("api", "/decide/?v=3"), { data: t2, verbose: true }, { method: "POST" }, function(t3) {
        return e7.parseDecideResponse(t3);
      });
    } }, { key: "parseDecideResponse", value: function(e7) {
      var t2, n2 = this;
      if (this.instance.featureFlags.setReloadingPaused(false), this.instance.featureFlags._startReloadTimer(), (e7 == null ? void 0 : e7.status) !== 0) {
        if (!B || !B.body)
          return G.info("document not ready yet, trying again in 500 milliseconds..."), void setTimeout(function() {
            n2.parseDecideResponse(e7);
          }, 500);
        this.instance.toolbar.afterDecideResponse(e7), (t2 = this.instance.sessionRecording) === null || t2 === void 0 || t2.afterDecideResponse(e7), Ze.afterDecideResponse(e7, this.instance), this.instance._afterDecideResponse(e7), this.instance.config.advanced_disable_feature_flags_on_first_load || this.instance.config.advanced_disable_feature_flags || this.instance.featureFlags.receivedFeatureFlags(e7);
        var r2 = A == null ? void 0 : A.extendPostHogWithSurveys;
        e7.surveys && !r2 && le(this.instance.requestRouter.endpointFor("assets", "/static/surveys.js"), function(e8) {
          if (e8)
            return G.error("Could not load surveys script", e8);
          A.extendPostHogWithSurveys(n2.instance);
        });
        var i2 = A == null ? void 0 : A.extendPostHogWithExceptionAutoCapture;
        if (e7.autocaptureExceptions && e7.autocaptureExceptions && x(i2) && le(this.instance.requestRouter.endpointFor("assets", "/static/exception-autocapture.js"), function(t3) {
          if (t3)
            return G.error("Could not load exception autocapture script", t3);
          A.extendPostHogWithExceptionAutocapture(n2.instance, e7);
        }), e7.siteApps)
          if (this.instance.config.opt_in_site_apps) {
            var o2, s2 = v(e7.siteApps);
            try {
              var a2 = function() {
                var e8 = o2.value, t3 = e8.id, r3 = e8.url, i3 = n2.instance.requestRouter.endpointFor("api", r3);
                W["__$$ph_site_app_".concat(t3)] = n2.instance, le(i3, function(e9) {
                  e9 && G.error("Error while initializing PostHog app with config id ".concat(t3), e9);
                });
              };
              for (s2.s(); !(o2 = s2.n()).done; )
                a2();
            } catch (e8) {
              s2.e(e8);
            } finally {
              s2.f();
            }
          } else
            e7.siteApps.length > 0 && G.error('PostHog site apps are disabled. Enable the "opt_in_site_apps" config to proceed.');
      } else
        G.error("Failed to fetch feature flags from PostHog.");
    } }]), e6;
  }();
  var ur = ["source"];
  var lr = A != null && A.location ? Ot(A.location.hash, "__posthog") || Ot(location.hash, "state") : null;
  var cr = function() {
    function e6(t2) {
      r(this, e6), this.instance = t2;
    }
    return o(e6, [{ key: "afterDecideResponse", value: function(e7) {
      var n2 = e7.toolbarParams || e7.editorParams || (e7.toolbarVersion ? { toolbarVersion: e7.toolbarVersion } : {});
      e7.isAuthenticated && n2.toolbarVersion && n2.toolbarVersion.indexOf("toolbar") === 0 && this.loadToolbar(t({}, n2));
    } }, { key: "maybeLoadToolbar", value: function() {
      var e7, t2, n2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0, r2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, i2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      if (!A || !B)
        return false;
      n2 = (e7 = n2) !== null && e7 !== void 0 ? e7 : A.location, i2 = (t2 = i2) !== null && t2 !== void 0 ? t2 : A.history;
      try {
        if (!r2) {
          try {
            A.localStorage.setItem("test", "test"), A.localStorage.removeItem("test");
          } catch (e8) {
            return false;
          }
          r2 = A == null ? void 0 : A.localStorage;
        }
        var o2, s2 = lr || Ot(n2.hash, "__posthog") || Ot(n2.hash, "state"), a2 = s2 ? ne(function() {
          return JSON.parse(atob(decodeURIComponent(s2)));
        }) || ne(function() {
          return JSON.parse(decodeURIComponent(s2));
        }) : null;
        return a2 && a2.action === "ph_authorize" ? ((o2 = a2).source = "url", o2 && Object.keys(o2).length > 0 && (a2.desiredHash ? n2.hash = a2.desiredHash : i2 ? i2.replaceState("", B.title, n2.pathname + n2.search) : n2.hash = "")) : ((o2 = JSON.parse(r2.getItem("_postHogToolbarParams") || "{}")).source = "localstorage", delete o2.userIntent), !(!o2.token || this.instance.config.token !== o2.token) && (this.loadToolbar(o2), true);
      } catch (e8) {
        return false;
      }
    } }, { key: "loadToolbar", value: function(e7) {
      var n2 = this;
      if (!A || W._postHogToolbarLoaded)
        return false;
      W._postHogToolbarLoaded = true;
      var r2 = 3e5, i2 = Math.floor(Date.now() / r2) * r2, o2 = this.instance.requestRouter.endpointFor("assets", "/static/toolbar.js?t=".concat(i2)), s2 = this.instance.requestRouter.region === "custom" && this.instance.config.advanced_disable_toolbar_metrics, a2 = t(t({ token: this.instance.config.token }, e7), {}, { apiURL: this.instance.requestRouter.endpointFor("ui") }, s2 ? { instrument: false } : {});
      a2.source;
      var u2 = c(a2, ur);
      return A.localStorage.setItem("_postHogToolbarParams", JSON.stringify(u2)), le(o2, function(e8) {
        e8 ? G.error("Failed to load toolbar", e8) : (W.ph_load_toolbar || W.ph_load_editor)(a2, n2.instance);
      }), ue(A, "turbolinks:load", function() {
        W._postHogToolbarLoaded = false, n2.loadToolbar(a2);
      }), true;
    } }, { key: "_loadEditor", value: function(e7) {
      return this.loadToolbar(e7);
    } }, { key: "maybeLoadEditor", value: function() {
      var e7 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0, t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, n2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
      return this.maybeLoadToolbar(e7, t2, n2);
    } }]), e6;
  }();
  var dr = function() {
    function e6() {
      var t2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 3e3;
      r(this, e6), this.isPolling = true, this._event_queue = [], this._empty_queue_count = 0, this._poller = void 0, this._pollInterval = t2;
    }
    return o(e6, [{ key: "setPollInterval", value: function(e7) {
      this._pollInterval = e7, this.isPolling && this.poll();
    } }, { key: "poll", value: function() {
    } }, { key: "unload", value: function() {
    } }, { key: "getTime", value: function() {
      return new Date().getTime();
    } }]), e6;
  }();
  var hr = function(e6) {
    a(i2, dr);
    var n2 = h(i2);
    function i2(e7) {
      var t2, o2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 3e3;
      return r(this, i2), (t2 = n2.call(this, o2)).handlePollRequest = e7, t2;
    }
    return o(i2, [{ key: "enqueue", value: function(e7, t2, n3) {
      this._event_queue.push({ url: e7, data: t2, options: n3 }), this.isPolling || (this.isPolling = true, this.poll());
    } }, { key: "poll", value: function() {
      var e7 = this;
      clearTimeout(this._poller), this._poller = setTimeout(function() {
        if (e7._event_queue.length > 0) {
          var t2 = e7.formatQueue(), n3 = function(n4) {
            var r3 = t2[n4], i3 = r3.url, o2 = r3.data, s2 = r3.options;
            K(o2, function(t3, n5) {
              o2[n5].offset = Math.abs(o2[n5].timestamp - e7.getTime()), delete o2[n5].timestamp;
            }), e7.handlePollRequest(i3, o2, s2);
          };
          for (var r2 in t2)
            n3(r2);
          e7._event_queue.length = 0, e7._empty_queue_count = 0;
        } else
          e7._empty_queue_count++;
        e7._empty_queue_count > 4 && (e7.isPolling = false, e7._empty_queue_count = 0), e7.isPolling && e7.poll();
      }, this._pollInterval);
    } }, { key: "unload", value: function() {
      var e7 = this;
      clearTimeout(this._poller);
      var n3 = this._event_queue.length > 0 ? this.formatQueue() : {};
      this._event_queue.length = 0;
      var r2 = Object.values(n3);
      [].concat(p(r2.filter(function(e8) {
        return e8.url.indexOf("/e") === 0;
      })), p(r2.filter(function(e8) {
        return e8.url.indexOf("/e") !== 0;
      }))).map(function(n4) {
        var r3 = n4.url, i3 = n4.data, o2 = n4.options;
        e7.handlePollRequest(r3, i3, t(t({}, o2), {}, { transport: "sendBeacon" }));
      });
    } }, { key: "formatQueue", value: function() {
      var e7 = {};
      return K(this._event_queue, function(t2) {
        var n3 = t2.url, r2 = t2.data, i3 = t2.options, o2 = (i3 ? i3._batchKey : null) || n3;
        x(e7[o2]) && (e7[o2] = { data: [], url: n3, options: i3 }), i3 && e7[o2].options && e7[o2].options._metrics && !e7[o2].options._metrics.rrweb_full_snapshot && (e7[o2].options._metrics.rrweb_full_snapshot = i3._metrics.rrweb_full_snapshot), e7[o2].data.push(r2);
      }), e7;
    } }]), i2;
  }();
  var fr = Uint8Array;
  var pr = Uint16Array;
  var gr = Uint32Array;
  var _r = new fr([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);
  var vr = new fr([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);
  var mr = new fr([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var yr = function(e6, t2) {
    for (var n2 = new pr(31), r2 = 0; r2 < 31; ++r2)
      n2[r2] = t2 += 1 << e6[r2 - 1];
    var i2 = new gr(n2[30]);
    for (r2 = 1; r2 < 30; ++r2)
      for (var o2 = n2[r2]; o2 < n2[r2 + 1]; ++o2)
        i2[o2] = o2 - n2[r2] << 5 | r2;
    return [n2, i2];
  };
  var br = yr(_r, 2);
  var wr = br[0];
  var kr = br[1];
  wr[28] = 258, kr[258] = 28;
  for (Sr = yr(vr, 0)[1], Fr = new pr(32768), Rr = 0; Rr < 32768; ++Rr) {
    Pr = (43690 & Rr) >>> 1 | (21845 & Rr) << 1;
    Pr = (61680 & (Pr = (52428 & Pr) >>> 2 | (13107 & Pr) << 2)) >>> 4 | (3855 & Pr) << 4, Fr[Rr] = ((65280 & Pr) >>> 8 | (255 & Pr) << 8) >>> 1;
  }
  var Pr;
  var Sr;
  var Fr;
  var Rr;
  var xr = function(e6, t2, n2) {
    for (var r2 = e6.length, i2 = 0, o2 = new pr(t2); i2 < r2; ++i2)
      ++o2[e6[i2] - 1];
    var s2, a2 = new pr(t2);
    for (i2 = 0; i2 < t2; ++i2)
      a2[i2] = a2[i2 - 1] + o2[i2 - 1] << 1;
    if (n2) {
      s2 = new pr(1 << t2);
      var u2 = 15 - t2;
      for (i2 = 0; i2 < r2; ++i2)
        if (e6[i2])
          for (var l2 = i2 << 4 | e6[i2], c2 = t2 - e6[i2], d2 = a2[e6[i2] - 1]++ << c2, h2 = d2 | (1 << c2) - 1; d2 <= h2; ++d2)
            s2[Fr[d2] >>> u2] = l2;
    } else
      for (s2 = new pr(r2), i2 = 0; i2 < r2; ++i2)
        s2[i2] = Fr[a2[e6[i2] - 1]++] >>> 15 - e6[i2];
    return s2;
  };
  var Er = new fr(288);
  for (Rr = 0; Rr < 144; ++Rr)
    Er[Rr] = 8;
  for (Rr = 144; Rr < 256; ++Rr)
    Er[Rr] = 9;
  for (Rr = 256; Rr < 280; ++Rr)
    Er[Rr] = 7;
  for (Rr = 280; Rr < 288; ++Rr)
    Er[Rr] = 8;
  var Ir = new fr(32);
  for (Rr = 0; Rr < 32; ++Rr)
    Ir[Rr] = 5;
  var Cr;
  var Tr = xr(Er, 9, 0);
  var $r = xr(Ir, 5, 0);
  var Or = function(e6) {
    return (e6 / 8 >> 0) + (7 & e6 && 1);
  };
  var Ar = function(e6, t2, n2) {
    (t2 == null || t2 < 0) && (t2 = 0), (n2 == null || n2 > e6.length) && (n2 = e6.length);
    var r2 = new (e6 instanceof pr ? pr : e6 instanceof gr ? gr : fr)(n2 - t2);
    return r2.set(e6.subarray(t2, n2)), r2;
  };
  var qr = function(e6, t2, n2) {
    n2 <<= 7 & t2;
    var r2 = t2 / 8 >> 0;
    e6[r2] |= n2, e6[r2 + 1] |= n2 >>> 8;
  };
  var Mr = function(e6, t2, n2) {
    n2 <<= 7 & t2;
    var r2 = t2 / 8 >> 0;
    e6[r2] |= n2, e6[r2 + 1] |= n2 >>> 8, e6[r2 + 2] |= n2 >>> 16;
  };
  var Dr = function(e6, t2) {
    for (var n2 = [], r2 = 0; r2 < e6.length; ++r2)
      e6[r2] && n2.push({ s: r2, f: e6[r2] });
    var i2 = n2.length, o2 = n2.slice();
    if (!i2)
      return [new fr(0), 0];
    if (i2 == 1) {
      var s2 = new fr(n2[0].s + 1);
      return s2[n2[0].s] = 1, [s2, 1];
    }
    n2.sort(function(e7, t3) {
      return e7.f - t3.f;
    }), n2.push({ s: -1, f: 25001 });
    var a2 = n2[0], u2 = n2[1], l2 = 0, c2 = 1, d2 = 2;
    for (n2[0] = { s: -1, f: a2.f + u2.f, l: a2, r: u2 }; c2 != i2 - 1; )
      a2 = n2[n2[l2].f < n2[d2].f ? l2++ : d2++], u2 = n2[l2 != c2 && n2[l2].f < n2[d2].f ? l2++ : d2++], n2[c2++] = { s: -1, f: a2.f + u2.f, l: a2, r: u2 };
    var h2 = o2[0].s;
    for (r2 = 1; r2 < i2; ++r2)
      o2[r2].s > h2 && (h2 = o2[r2].s);
    var f2 = new pr(h2 + 1), p2 = Nr(n2[c2 - 1], f2, 0);
    if (p2 > t2) {
      r2 = 0;
      var g2 = 0, _2 = p2 - t2, v2 = 1 << _2;
      for (o2.sort(function(e7, t3) {
        return f2[t3.s] - f2[e7.s] || e7.f - t3.f;
      }); r2 < i2; ++r2) {
        var m2 = o2[r2].s;
        if (!(f2[m2] > t2))
          break;
        g2 += v2 - (1 << p2 - f2[m2]), f2[m2] = t2;
      }
      for (g2 >>>= _2; g2 > 0; ) {
        var y2 = o2[r2].s;
        f2[y2] < t2 ? g2 -= 1 << t2 - f2[y2]++ - 1 : ++r2;
      }
      for (; r2 >= 0 && g2; --r2) {
        var b2 = o2[r2].s;
        f2[b2] == t2 && (--f2[b2], ++g2);
      }
      p2 = t2;
    }
    return [new fr(f2), p2];
  };
  var Nr = function e3(t2, n2, r2) {
    return t2.s == -1 ? Math.max(e3(t2.l, n2, r2 + 1), e3(t2.r, n2, r2 + 1)) : n2[t2.s] = r2;
  };
  var Lr = function(e6) {
    for (var t2 = e6.length; t2 && !e6[--t2]; )
      ;
    for (var n2 = new pr(++t2), r2 = 0, i2 = e6[0], o2 = 1, s2 = function(e7) {
      n2[r2++] = e7;
    }, a2 = 1; a2 <= t2; ++a2)
      if (e6[a2] == i2 && a2 != t2)
        ++o2;
      else {
        if (!i2 && o2 > 2) {
          for (; o2 > 138; o2 -= 138)
            s2(32754);
          o2 > 2 && (s2(o2 > 10 ? o2 - 11 << 5 | 28690 : o2 - 3 << 5 | 12305), o2 = 0);
        } else if (o2 > 3) {
          for (s2(i2), --o2; o2 > 6; o2 -= 6)
            s2(8304);
          o2 > 2 && (s2(o2 - 3 << 5 | 8208), o2 = 0);
        }
        for (; o2--; )
          s2(i2);
        o2 = 1, i2 = e6[a2];
      }
    return [n2.subarray(0, r2), t2];
  };
  var Br = function(e6, t2) {
    for (var n2 = 0, r2 = 0; r2 < t2.length; ++r2)
      n2 += e6[r2] * t2[r2];
    return n2;
  };
  var Hr = function(e6, t2, n2) {
    var r2 = n2.length, i2 = Or(t2 + 2);
    e6[i2] = 255 & r2, e6[i2 + 1] = r2 >>> 8, e6[i2 + 2] = 255 ^ e6[i2], e6[i2 + 3] = 255 ^ e6[i2 + 1];
    for (var o2 = 0; o2 < r2; ++o2)
      e6[i2 + o2 + 4] = n2[o2];
    return 8 * (i2 + 4 + r2);
  };
  var jr = function(e6, t2, n2, r2, i2, o2, s2, a2, u2, l2, c2) {
    qr(t2, c2++, n2), ++i2[256];
    for (var d2 = Dr(i2, 15), h2 = d2[0], f2 = d2[1], p2 = Dr(o2, 15), g2 = p2[0], _2 = p2[1], v2 = Lr(h2), m2 = v2[0], y2 = v2[1], b2 = Lr(g2), w2 = b2[0], k2 = b2[1], S2 = new pr(19), F2 = 0; F2 < m2.length; ++F2)
      S2[31 & m2[F2]]++;
    for (F2 = 0; F2 < w2.length; ++F2)
      S2[31 & w2[F2]]++;
    for (var R2 = Dr(S2, 7), P2 = R2[0], x2 = R2[1], E2 = 19; E2 > 4 && !P2[mr[E2 - 1]]; --E2)
      ;
    var I2, C2, T2, $2, O2 = l2 + 5 << 3, A2 = Br(i2, Er) + Br(o2, Ir) + s2, q2 = Br(i2, h2) + Br(o2, g2) + s2 + 14 + 3 * E2 + Br(S2, P2) + (2 * S2[16] + 3 * S2[17] + 7 * S2[18]);
    if (O2 <= A2 && O2 <= q2)
      return Hr(t2, c2, e6.subarray(u2, u2 + l2));
    if (qr(t2, c2, 1 + (q2 < A2)), c2 += 2, q2 < A2) {
      I2 = xr(h2, f2, 0), C2 = h2, T2 = xr(g2, _2, 0), $2 = g2;
      var M2 = xr(P2, x2, 0);
      qr(t2, c2, y2 - 257), qr(t2, c2 + 5, k2 - 1), qr(t2, c2 + 10, E2 - 4), c2 += 14;
      for (F2 = 0; F2 < E2; ++F2)
        qr(t2, c2 + 3 * F2, P2[mr[F2]]);
      c2 += 3 * E2;
      for (var D2 = [m2, w2], N2 = 0; N2 < 2; ++N2) {
        var L2 = D2[N2];
        for (F2 = 0; F2 < L2.length; ++F2) {
          var B2 = 31 & L2[F2];
          qr(t2, c2, M2[B2]), c2 += P2[B2], B2 > 15 && (qr(t2, c2, L2[F2] >>> 5 & 127), c2 += L2[F2] >>> 12);
        }
      }
    } else
      I2 = Tr, C2 = Er, T2 = $r, $2 = Ir;
    for (F2 = 0; F2 < a2; ++F2)
      if (r2[F2] > 255) {
        B2 = r2[F2] >>> 18 & 31;
        Mr(t2, c2, I2[B2 + 257]), c2 += C2[B2 + 257], B2 > 7 && (qr(t2, c2, r2[F2] >>> 23 & 31), c2 += _r[B2]);
        var H2 = 31 & r2[F2];
        Mr(t2, c2, T2[H2]), c2 += $2[H2], H2 > 3 && (Mr(t2, c2, r2[F2] >>> 5 & 8191), c2 += vr[H2]);
      } else
        Mr(t2, c2, I2[r2[F2]]), c2 += C2[r2[F2]];
    return Mr(t2, c2, I2[256]), c2 + C2[256];
  };
  var Ur = new gr([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
  var Vr = new fr(0);
  var Wr = function() {
    for (var e6 = new gr(256), t2 = 0; t2 < 256; ++t2) {
      for (var n2 = t2, r2 = 9; --r2; )
        n2 = (1 & n2 && 3988292384) ^ n2 >>> 1;
      e6[t2] = n2;
    }
    return e6;
  }();
  var zr = function() {
    var e6 = 4294967295;
    return { p: function(t2) {
      for (var n2 = e6, r2 = 0; r2 < t2.length; ++r2)
        n2 = Wr[255 & n2 ^ t2[r2]] ^ n2 >>> 8;
      e6 = n2;
    }, d: function() {
      return 4294967295 ^ e6;
    } };
  };
  var Gr = function(e6, t2, n2, r2, i2) {
    return function(e7, t3, n3, r3, i3, o2) {
      var s2 = e7.length, a2 = new fr(r3 + s2 + 5 * (1 + Math.floor(s2 / 7e3)) + i3), u2 = a2.subarray(r3, a2.length - i3), l2 = 0;
      if (!t3 || s2 < 8)
        for (var c2 = 0; c2 <= s2; c2 += 65535) {
          var d2 = c2 + 65535;
          d2 < s2 ? l2 = Hr(u2, l2, e7.subarray(c2, d2)) : (u2[c2] = o2, l2 = Hr(u2, l2, e7.subarray(c2, s2)));
        }
      else {
        for (var h2 = Ur[t3 - 1], f2 = h2 >>> 13, p2 = 8191 & h2, g2 = (1 << n3) - 1, _2 = new pr(32768), v2 = new pr(g2 + 1), m2 = Math.ceil(n3 / 3), y2 = 2 * m2, b2 = function(t4) {
          return (e7[t4] ^ e7[t4 + 1] << m2 ^ e7[t4 + 2] << y2) & g2;
        }, w2 = new gr(25e3), k2 = new pr(288), S2 = new pr(32), F2 = 0, R2 = 0, P2 = (c2 = 0, 0), x2 = 0, E2 = 0; c2 < s2; ++c2) {
          var I2 = b2(c2), C2 = 32767 & c2, T2 = v2[I2];
          if (_2[C2] = T2, v2[I2] = C2, x2 <= c2) {
            var $2 = s2 - c2;
            if ((F2 > 7e3 || P2 > 24576) && $2 > 423) {
              l2 = jr(e7, u2, 0, w2, k2, S2, R2, P2, E2, c2 - E2, l2), P2 = F2 = R2 = 0, E2 = c2;
              for (var O2 = 0; O2 < 286; ++O2)
                k2[O2] = 0;
              for (O2 = 0; O2 < 30; ++O2)
                S2[O2] = 0;
            }
            var A2 = 2, q2 = 0, M2 = p2, D2 = C2 - T2 & 32767;
            if ($2 > 2 && I2 == b2(c2 - D2))
              for (var N2 = Math.min(f2, $2) - 1, L2 = Math.min(32767, c2), B2 = Math.min(258, $2); D2 <= L2 && --M2 && C2 != T2; ) {
                if (e7[c2 + A2] == e7[c2 + A2 - D2]) {
                  for (var H2 = 0; H2 < B2 && e7[c2 + H2] == e7[c2 + H2 - D2]; ++H2)
                    ;
                  if (H2 > A2) {
                    if (A2 = H2, q2 = D2, H2 > N2)
                      break;
                    var j2 = Math.min(D2, H2 - 2), U2 = 0;
                    for (O2 = 0; O2 < j2; ++O2) {
                      var V2 = c2 - D2 + O2 + 32768 & 32767, W2 = V2 - _2[V2] + 32768 & 32767;
                      W2 > U2 && (U2 = W2, T2 = V2);
                    }
                  }
                }
                D2 += (C2 = T2) - (T2 = _2[C2]) + 32768 & 32767;
              }
            if (q2) {
              w2[P2++] = 268435456 | kr[A2] << 18 | Sr[q2];
              var z2 = 31 & kr[A2], G2 = 31 & Sr[q2];
              R2 += _r[z2] + vr[G2], ++k2[257 + z2], ++S2[G2], x2 = c2 + A2, ++F2;
            } else
              w2[P2++] = e7[c2], ++k2[e7[c2]];
          }
        }
        l2 = jr(e7, u2, o2, w2, k2, S2, R2, P2, E2, c2 - E2, l2), o2 || (l2 = Hr(u2, l2, Vr));
      }
      return Ar(a2, 0, r3 + Or(l2) + i3);
    }(e6, t2.level == null ? 6 : t2.level, t2.mem == null ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(e6.length)))) : 12 + t2.mem, n2, r2, !i2);
  };
  var Qr = function(e6, t2, n2) {
    for (; n2; ++t2)
      e6[t2] = n2, n2 >>>= 8;
  };
  var Yr = function(e6, t2) {
    var n2 = t2.filename;
    if (e6[0] = 31, e6[1] = 139, e6[2] = 8, e6[8] = t2.level < 2 ? 4 : t2.level == 9 ? 2 : 0, e6[9] = 3, t2.mtime != 0 && Qr(e6, 4, Math.floor(new Date(t2.mtime || Date.now()) / 1e3)), n2) {
      e6[3] = 8;
      for (var r2 = 0; r2 <= n2.length; ++r2)
        e6[r2 + 10] = n2.charCodeAt(r2);
    }
  };
  var Jr = function(e6) {
    return 10 + (e6.filename && e6.filename.length + 1 || 0);
  };
  function Kr(e6, t2) {
    t2 === void 0 && (t2 = {});
    var n2 = zr(), r2 = e6.length;
    n2.p(e6);
    var i2 = Gr(e6, t2, Jr(t2), 8), o2 = i2.length;
    return Yr(i2, t2), Qr(i2, o2 - 8, n2.d()), Qr(i2, o2 - 4, r2), i2;
  }
  function Xr(e6, t2) {
    var n2 = e6.length;
    if (!t2 && typeof TextEncoder != "undefined")
      return new TextEncoder().encode(e6);
    for (var r2 = new fr(e6.length + (e6.length >>> 1)), i2 = 0, o2 = function(e7) {
      r2[i2++] = e7;
    }, s2 = 0; s2 < n2; ++s2) {
      if (i2 + 5 > r2.length) {
        var a2 = new fr(i2 + 8 + (n2 - s2 << 1));
        a2.set(r2), r2 = a2;
      }
      var u2 = e6.charCodeAt(s2);
      u2 < 128 || t2 ? o2(u2) : u2 < 2048 ? (o2(192 | u2 >>> 6), o2(128 | 63 & u2)) : u2 > 55295 && u2 < 57344 ? (o2(240 | (u2 = 65536 + (1047552 & u2) | 1023 & e6.charCodeAt(++s2)) >>> 18), o2(128 | u2 >>> 12 & 63), o2(128 | u2 >>> 6 & 63), o2(128 | 63 & u2)) : (o2(224 | u2 >>> 12), o2(128 | u2 >>> 6 & 63), o2(128 | 63 & u2));
    }
    return Ar(r2, 0, i2);
  }
  !function(e6) {
    e6.GZipJS = "gzip-js", e6.Base64 = "base64";
  }(Cr || (Cr = {}));
  var Zr = function(e6, t2, n2) {
    var r2 = t2 || {};
    r2.ip = n2.ip ? 1 : 0, r2._ = new Date().getTime().toString(), r2.ver = m.LIB_VERSION;
    var i2 = e6.split("?");
    if (i2.length > 1) {
      var o2, s2 = v(i2[1].split("&"));
      try {
        for (s2.s(); !(o2 = s2.n()).done; ) {
          var a2 = o2.value.split("=")[0];
          x(r2[a2]) || delete r2[a2];
        }
      } catch (e7) {
        s2.e(e7);
      } finally {
        s2.f();
      }
    }
    var u2 = e6.indexOf("?") > -1 ? "&" : "?";
    return e6 + u2 + Tt(r2);
  };
  var ei = function e4(t2, n2) {
    if (n2.blob && t2.buffer)
      return new Blob([F(t2) ? t2 : t2.buffer], { type: "text/plain" });
    if (n2.sendBeacon || n2.blob) {
      var r2 = e4(t2, { method: "POST" });
      return new Blob([r2], { type: "application/x-www-form-urlencoded" });
    }
    return n2.method !== "POST" ? null : (i2 = S(t2) || F(t2) ? "data=" + encodeURIComponent(t2) : "data=" + encodeURIComponent(t2.data), "compression" in t2 && t2.compression && (i2 += "&compression=" + t2.compression), i2);
    var i2;
  };
  var ti = function(e6) {
    if (j && e6.options.transport === "fetch") {
      var n2, r2 = ei(e6.data, e6.options), i2 = new Headers();
      K(i2, function(e7, t2) {
        i2.append(t2, e7);
      }), e6.options.method !== "POST" || e6.options.blob || i2.append("Content-Type", "application/x-www-form-urlencoded");
      var o2 = e6.url;
      return T(e6.retriesPerformedSoFar) && e6.retriesPerformedSoFar > 0 && (o2 = Zr(o2, { retry_count: e6.retriesPerformedSoFar }, {})), void j(o2, { method: ((n2 = e6.options) === null || n2 === void 0 ? void 0 : n2.method) || "GET", headers: i2, keepalive: e6.options.method === "POST", body: r2 }).then(function(n3) {
        var r3 = n3.status;
        return n3.text().then(function(n4) {
          var o3, s2;
          if ((o3 = e6.onResponse) === null || o3 === void 0 || o3.call(e6, { statusCode: r3, responseText: n4 }), r3 !== 200)
            R(e6.onError) && e6.onError({ statusCode: r3, responseText: n4 }), (r3 < 400 || r3 > 500) && e6.retryQueue.enqueue(t(t({}, e6), {}, { headers: i2, retriesPerformedSoFar: (e6.retriesPerformedSoFar || 0) + 1 })), (s2 = e6.callback) === null || s2 === void 0 || s2.call(e6, { status: 0 });
          else
            try {
              var a2;
              (a2 = e6.callback) === null || a2 === void 0 || a2.call(e6, JSON.parse(n4));
            } catch (e7) {
              G.error(e7);
            }
        });
      }).catch(function(t2) {
        var n3;
        G.error(t2), (n3 = e6.callback) === null || n3 === void 0 || n3.call(e6, { status: 0 });
      });
    }
    return ni(e6);
  };
  var ni = function(e6) {
    var t2 = e6.url, n2 = e6.data, r2 = e6.headers, i2 = e6.options, o2 = e6.callback, s2 = e6.retriesPerformedSoFar, a2 = e6.retryQueue, u2 = e6.onError, l2 = e6.timeout, c2 = l2 === void 0 ? 6e4 : l2, d2 = e6.onResponse;
    T(s2) && s2 > 0 && (t2 = Zr(t2, { retry_count: s2 }, {}));
    var h2 = new XMLHttpRequest();
    h2.open(i2.method || "GET", t2, true);
    var f2 = ei(n2, i2);
    K(r2, function(e7, t3) {
      h2.setRequestHeader(t3, e7);
    }), i2.method !== "POST" || i2.blob || h2.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), h2.timeout = c2, h2.withCredentials = true, h2.onreadystatechange = function() {
      if (h2.readyState === 4) {
        var e7 = { statusCode: h2.status, responseText: h2.responseText };
        if (d2 == null || d2(e7), h2.status === 200) {
          if (o2) {
            var l3;
            try {
              l3 = JSON.parse(h2.responseText);
            } catch (e8) {
              return void G.error(e8);
            }
            o2(l3);
          }
        } else
          R(u2) && u2(e7), (h2.status < 400 || h2.status > 500) && a2.enqueue({ url: t2, data: n2, options: i2, headers: r2, retriesPerformedSoFar: (s2 || 0) + 1, callback: o2 }), o2 == null || o2({ status: 0 });
      }
    }, h2.send(f2);
  };
  var ri;
  var ii = function(e6) {
    a(i2, dr);
    var n2 = h(i2);
    function i2(e7, t2) {
      var o2;
      return r(this, i2), (o2 = n2.call(this)).isPolling = false, o2.queue = [], o2.areWeOnline = true, o2.onRequestError = e7, o2.rateLimiter = t2, !x(A) && "onLine" in A.navigator && (o2.areWeOnline = A.navigator.onLine, A.addEventListener("online", function() {
        o2._handleWeAreNowOnline();
      }), A.addEventListener("offline", function() {
        o2.areWeOnline = false;
      })), o2;
    }
    return o(i2, [{ key: "enqueue", value: function(e7) {
      var t2 = e7.retriesPerformedSoFar || 0;
      if (!(t2 >= 10)) {
        var n3 = function(e8) {
          var t3 = 3e3 * Math.pow(2, e8), n4 = t3 / 2, r3 = Math.min(18e5, t3), i4 = (Math.random() - 0.5) * (r3 - n4);
          return Math.ceil(r3 + i4);
        }(t2), r2 = new Date(Date.now() + n3);
        this.queue.push({ retryAt: r2, requestData: e7 });
        var i3 = "Enqueued failed request for retry in ".concat(n3);
        navigator.onLine || (i3 += " (Browser is offline)"), G.warn(i3), this.isPolling || (this.isPolling = true, this.poll());
      }
    } }, { key: "poll", value: function() {
      var e7 = this;
      this._poller && clearTimeout(this._poller), this._poller = setTimeout(function() {
        e7.areWeOnline && e7.queue.length > 0 && e7.flush(), e7.poll();
      }, this._pollInterval);
    } }, { key: "flush", value: function() {
      var e7 = new Date(Date.now()), t2 = this.queue.filter(function(t3) {
        return t3.retryAt < e7;
      });
      if (t2.length > 0) {
        this.queue = this.queue.filter(function(t3) {
          return t3.retryAt >= e7;
        });
        var n3, r2 = v(t2);
        try {
          for (r2.s(); !(n3 = r2.n()).done; ) {
            var i3 = n3.value.requestData;
            this._executeXhrRequest(i3);
          }
        } catch (e8) {
          r2.e(e8);
        } finally {
          r2.f();
        }
      }
    } }, { key: "unload", value: function() {
      this._poller && (clearTimeout(this._poller), this._poller = void 0);
      var e7, n3 = v(this.queue);
      try {
        for (n3.s(); !(e7 = n3.n()).done; ) {
          var r2 = e7.value.requestData, i3 = r2.url, o2 = r2.data, s2 = r2.options;
          if (this.rateLimiter.isRateLimited(s2._batchKey))
            G.warn("[RetryQueue] is quota limited. Dropping request.");
          else
            try {
              A == null || A.navigator.sendBeacon(i3, ei(o2, t(t({}, s2), {}, { sendBeacon: true })));
            } catch (e8) {
              G.error(e8);
            }
        }
      } catch (e8) {
        n3.e(e8);
      } finally {
        n3.f();
      }
      this.queue = [];
    } }, { key: "_executeXhrRequest", value: function(e7) {
      var t2 = e7.url, n3 = e7.data, r2 = e7.options, i3 = e7.headers, o2 = e7.callback, s2 = e7.retriesPerformedSoFar;
      this.rateLimiter.isRateLimited(r2._batchKey) || ti({ url: t2, data: n3 || {}, options: r2 || {}, headers: i3 || {}, retriesPerformedSoFar: s2 || 0, callback: o2, retryQueue: this, onError: this.onRequestError, onResponse: this.rateLimiter.checkForLimiting });
    } }, { key: "_handleWeAreNowOnline", value: function() {
      this.areWeOnline = true, this.flush();
    } }]), i2;
  }();
  var oi = 1800;
  var si = function() {
    function e6(t2, n2, i2, o2) {
      r(this, e6), s(this, "_sessionIdChangedHandlers", []), this.config = t2, this.persistence = n2, this._windowId = void 0, this._sessionId = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this._sessionIdGenerator = i2 || dt, this._windowIdGenerator = o2 || dt;
      var a2 = t2.persistence_name || t2.token, u2 = t2.session_idle_timeout_seconds || oi;
      if (T(u2) ? u2 > oi ? G.warn("session_idle_timeout_seconds cannot be  greater than 30 minutes. Using 30 minutes instead.") : u2 < 60 && G.warn("session_idle_timeout_seconds cannot be less than 60 seconds. Using 60 seconds instead.") : (G.warn("session_idle_timeout_seconds must be a number. Defaulting to 30 minutes."), u2 = oi), this._sessionTimeoutMs = 1e3 * Math.min(Math.max(u2, 60), oi), this._window_id_storage_key = "ph_" + a2 + "_window_id", this._primary_window_exists_storage_key = "ph_" + a2 + "_primary_window_exists", this._canUseSessionStorage()) {
        var l2 = Pt.parse(this._window_id_storage_key), c2 = Pt.parse(this._primary_window_exists_storage_key);
        l2 && !c2 ? this._windowId = l2 : Pt.remove(this._window_id_storage_key), Pt.set(this._primary_window_exists_storage_key, true);
      }
      this._listenToReloadWindow();
    }
    return o(e6, [{ key: "onSessionId", value: function(e7) {
      var t2 = this;
      return x(this._sessionIdChangedHandlers) && (this._sessionIdChangedHandlers = []), this._sessionIdChangedHandlers.push(e7), this._sessionId && e7(this._sessionId, this._windowId), function() {
        t2._sessionIdChangedHandlers = t2._sessionIdChangedHandlers.filter(function(t3) {
          return t3 !== e7;
        });
      };
    } }, { key: "_canUseSessionStorage", value: function() {
      return this.config.persistence !== "memory" && !this.persistence.disabled && Pt.is_supported();
    } }, { key: "_setWindowId", value: function(e7) {
      e7 !== this._windowId && (this._windowId = e7, this._canUseSessionStorage() && Pt.set(this._window_id_storage_key, e7));
    } }, { key: "_getWindowId", value: function() {
      return this._windowId ? this._windowId : this._canUseSessionStorage() ? Pt.parse(this._window_id_storage_key) : null;
    } }, { key: "_setSessionId", value: function(e7, t2, n2) {
      e7 === this._sessionId && t2 === this._sessionActivityTimestamp && n2 === this._sessionStartTimestamp || (this._sessionStartTimestamp = n2, this._sessionActivityTimestamp = t2, this._sessionId = e7, this.persistence.register(s({}, Le, [t2, e7, n2])));
    } }, { key: "_getSessionId", value: function() {
      if (this._sessionId && this._sessionActivityTimestamp && this._sessionStartTimestamp)
        return [this._sessionActivityTimestamp, this._sessionId, this._sessionStartTimestamp];
      var e7 = this.persistence.props[Le];
      return S(e7) && e7.length === 2 && e7.push(e7[0]), e7 || [0, null, 0];
    } }, { key: "resetSessionId", value: function() {
      this._setSessionId(null, null, null);
    } }, { key: "_listenToReloadWindow", value: function() {
      var e7 = this;
      A == null || A.addEventListener("beforeunload", function() {
        e7._canUseSessionStorage() && Pt.remove(e7._primary_window_exists_storage_key);
      });
    } }, { key: "checkAndGetSessionAndWindowId", value: function() {
      var e7 = arguments.length > 0 && arguments[0] !== void 0 && arguments[0], t2 = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null) || new Date().getTime(), n2 = f(this._getSessionId(), 3), r2 = n2[0], i2 = n2[1], o2 = n2[2], s2 = this._getWindowId(), a2 = o2 && o2 > 0 && Math.abs(t2 - o2) > 864e5, u2 = false, l2 = !i2, c2 = !e7 && Math.abs(t2 - r2) > this._sessionTimeoutMs;
      l2 || c2 || a2 ? (i2 = this._sessionIdGenerator(), s2 = this._windowIdGenerator(), G.info("[SessionId] new session ID generated", { sessionId: i2, windowId: s2, changeReason: { noSessionId: l2, activityTimeout: c2, sessionPastMaximumLength: a2 } }), o2 = t2, u2 = true) : s2 || (s2 = this._windowIdGenerator(), u2 = true);
      var d2 = r2 === 0 || !e7 || a2 ? t2 : r2, h2 = o2 === 0 ? new Date().getTime() : o2;
      return this._setWindowId(s2), this._setSessionId(i2, d2, h2), u2 && this._sessionIdChangedHandlers.forEach(function(e8) {
        return e8(i2, s2);
      }), { sessionId: i2, windowId: s2, sessionStartTimestamp: h2 };
    } }]), e6;
  }();
  !function(e6) {
    e6.US = "us", e6.EU = "eu", e6.CUSTOM = "custom";
  }(ri || (ri = {}));
  var ai = function() {
    function e6(t2) {
      r(this, e6), s(this, "_regionCache", {}), this.instance = t2;
    }
    return o(e6, [{ key: "apiHost", get: function() {
      return this.instance.config.api_host.trim().replace(/\/$/, "");
    } }, { key: "uiHost", get: function() {
      var e7;
      return (e7 = this.instance.config.ui_host) === null || e7 === void 0 ? void 0 : e7.replace(/\/$/, "");
    } }, { key: "region", get: function() {
      return this._regionCache[this.apiHost] || (/https:\/\/(app|us|us-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = ri.US : /https:\/\/(eu|eu-assets)(\.i)?\.posthog\.com/i.test(this.apiHost) ? this._regionCache[this.apiHost] = ri.EU : this._regionCache[this.apiHost] = ri.CUSTOM), this._regionCache[this.apiHost];
    } }, { key: "endpointFor", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      if (t2 && (t2 = t2[0] === "/" ? t2 : "/".concat(t2)), e7 === "ui")
        return (this.uiHost || this.apiHost) + t2;
      if (this.region === ri.CUSTOM)
        return this.apiHost + t2;
      var n2 = "i.posthog.com" + t2;
      switch (e7) {
        case "assets":
          return "https://".concat(this.region, "-assets.").concat(n2);
        case "api":
          return "https://".concat(this.region, ".").concat(n2);
      }
    } }]), e6;
  }();
  var ui = o(function e5(t2, n2, i2, o2) {
    r(this, e5), this.name = "posthog-js", this.setupOnce = function(e6) {
      e6(function(e7) {
        var r2, s2, a2, u2, l2;
        if (e7.level !== "error" || !t2.__loaded)
          return e7;
        e7.tags || (e7.tags = {});
        var c2 = t2.requestRouter.endpointFor("ui", "/person/" + t2.get_distinct_id());
        e7.tags["PostHog Person URL"] = c2, t2.sessionRecordingStarted() && (e7.tags["PostHog Recording URL"] = t2.get_session_replay_url({ withTimestamp: true }));
        var d2 = ((r2 = e7.exception) === null || r2 === void 0 ? void 0 : r2.values) || [], h2 = { $exception_message: (s2 = d2[0]) === null || s2 === void 0 ? void 0 : s2.value, $exception_type: (a2 = d2[0]) === null || a2 === void 0 ? void 0 : a2.type, $exception_personURL: c2, $sentry_event_id: e7.event_id, $sentry_exception: e7.exception, $sentry_exception_message: (u2 = d2[0]) === null || u2 === void 0 ? void 0 : u2.value, $sentry_exception_type: (l2 = d2[0]) === null || l2 === void 0 ? void 0 : l2.type, $sentry_tags: e7.tags };
        return n2 && i2 && (h2.$sentry_url = (o2 || "https://sentry.io/organizations/") + n2 + "/issues/?project=" + i2 + "&query=" + e7.event_id), t2.capture("$exception", h2), e7;
      });
    };
  });
  var li = function() {
    function e6(t2) {
      var n2 = this;
      r(this, e6), s(this, "_hasSeenPageView", false), s(this, "_updateScrollData", function() {
        var e7, t3, r2, i2;
        n2._pageViewData || (n2._pageViewData = n2._createPageViewData());
        var o2 = n2._pageViewData, s2 = n2._scrollY(), a2 = n2._scrollHeight(), u2 = n2._contentY(), l2 = n2._contentHeight();
        o2.lastScrollY = s2, o2.maxScrollY = Math.max(s2, (e7 = o2.maxScrollY) !== null && e7 !== void 0 ? e7 : 0), o2.maxScrollHeight = Math.max(a2, (t3 = o2.maxScrollHeight) !== null && t3 !== void 0 ? t3 : 0), o2.lastContentY = u2, o2.maxContentY = Math.max(u2, (r2 = o2.maxContentY) !== null && r2 !== void 0 ? r2 : 0), o2.maxContentHeight = Math.max(l2, (i2 = o2.maxContentHeight) !== null && i2 !== void 0 ? i2 : 0);
      }), this._instance = t2;
    }
    return o(e6, [{ key: "_createPageViewData", value: function() {
      var e7;
      return { pathname: (e7 = A == null ? void 0 : A.location.pathname) !== null && e7 !== void 0 ? e7 : "" };
    } }, { key: "doPageView", value: function() {
      var e7, n2;
      return this._hasSeenPageView ? (n2 = this._pageViewData, this._pageViewData = this._createPageViewData()) : (this._hasSeenPageView = true, n2 = void 0, this._pageViewData || (this._pageViewData = this._createPageViewData())), setTimeout(this._updateScrollData, 0), t({ $prev_pageview_pathname: (e7 = n2) === null || e7 === void 0 ? void 0 : e7.pathname }, this._calculatePrevPageScrollProperties(n2));
    } }, { key: "doPageLeave", value: function() {
      var e7 = this._pageViewData;
      return t({ $prev_pageview_pathname: e7 == null ? void 0 : e7.pathname }, this._calculatePrevPageScrollProperties(e7));
    } }, { key: "_calculatePrevPageScrollProperties", value: function(e7) {
      if (!e7 || e7.maxScrollHeight == null || e7.lastScrollY == null || e7.maxScrollY == null || e7.maxContentHeight == null || e7.lastContentY == null || e7.maxContentY == null)
        return {};
      var t2 = e7.maxScrollHeight, n2 = e7.lastScrollY, r2 = e7.maxScrollY, i2 = e7.maxContentHeight, o2 = e7.lastContentY, s2 = e7.maxContentY;
      return t2 = Math.ceil(t2), n2 = Math.ceil(n2), r2 = Math.ceil(r2), i2 = Math.ceil(i2), o2 = Math.ceil(o2), s2 = Math.ceil(s2), { $prev_pageview_last_scroll: n2, $prev_pageview_last_scroll_percentage: t2 <= 1 ? 1 : ci(n2 / t2, 0, 1), $prev_pageview_max_scroll: r2, $prev_pageview_max_scroll_percentage: t2 <= 1 ? 1 : ci(r2 / t2, 0, 1), $prev_pageview_last_content: o2, $prev_pageview_last_content_percentage: i2 <= 1 ? 1 : ci(o2 / i2, 0, 1), $prev_pageview_max_content: s2, $prev_pageview_max_content_percentage: i2 <= 1 ? 1 : ci(s2 / i2, 0, 1) };
    } }, { key: "startMeasuringScrollPosition", value: function() {
      A == null || A.addEventListener("scroll", this._updateScrollData, true), A == null || A.addEventListener("scrollend", this._updateScrollData, true), A == null || A.addEventListener("resize", this._updateScrollData);
    } }, { key: "stopMeasuringScrollPosition", value: function() {
      A == null || A.removeEventListener("scroll", this._updateScrollData), A == null || A.removeEventListener("scrollend", this._updateScrollData), A == null || A.removeEventListener("resize", this._updateScrollData);
    } }, { key: "_scrollElement", value: function() {
      if (!this._instance.config.scroll_root_selector)
        return A == null ? void 0 : A.document.documentElement;
      var e7, t2 = v(S(this._instance.config.scroll_root_selector) ? this._instance.config.scroll_root_selector : [this._instance.config.scroll_root_selector]);
      try {
        for (t2.s(); !(e7 = t2.n()).done; ) {
          var n2 = e7.value, r2 = A == null ? void 0 : A.document.querySelector(n2);
          if (r2)
            return r2;
        }
      } catch (e8) {
        t2.e(e8);
      } finally {
        t2.f();
      }
    } }, { key: "_scrollHeight", value: function() {
      var e7 = this._scrollElement();
      return e7 ? Math.max(0, e7.scrollHeight - e7.clientHeight) : 0;
    } }, { key: "_scrollY", value: function() {
      if (this._instance.config.scroll_root_selector) {
        var e7 = this._scrollElement();
        return e7 && e7.scrollTop || 0;
      }
      return A && (A.scrollY || A.pageYOffset || A.document.documentElement.scrollTop) || 0;
    } }, { key: "_contentHeight", value: function() {
      var e7 = this._scrollElement();
      return (e7 == null ? void 0 : e7.scrollHeight) || 0;
    } }, { key: "_contentY", value: function() {
      var e7 = this._scrollElement(), t2 = (e7 == null ? void 0 : e7.clientHeight) || 0;
      return this._scrollY() + t2;
    } }]), e6;
  }();
  function ci(e6, t2, n2) {
    return Math.max(t2, Math.min(e6, n2));
  }
  var di;
  var hi;
  var fi;
  var pi = { icontains: function(e6) {
    return !!A && A.location.href.toLowerCase().indexOf(e6.toLowerCase()) > -1;
  }, regex: function(e6) {
    return !!A && Ct(A.location.href, e6);
  }, exact: function(e6) {
    return (A == null ? void 0 : A.location.href) === e6;
  } };
  var gi = function() {
    function e6(t2) {
      r(this, e6), this.instance = t2;
    }
    return o(e6, [{ key: "getSurveys", value: function(e7) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1], r2 = this.instance.get_property(We);
      if (r2 && !n2)
        return e7(r2);
      this.instance._send_request(this.instance.requestRouter.endpointFor("api", "/api/surveys/?token=".concat(this.instance.config.token)), {}, { method: "GET" }, function(n3) {
        var r3, i2 = n3.surveys || [];
        return (r3 = t2.instance.persistence) === null || r3 === void 0 || r3.register(s({}, We, i2)), e7(i2);
      });
    } }, { key: "getActiveMatchingSurveys", value: function(e7) {
      var t2 = this, n2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.getSurveys(function(n3) {
        var r2 = n3.filter(function(e8) {
          return !(!e8.start_date || e8.end_date);
        }).filter(function(e8) {
          var t3, n4, r3, i2;
          if (!e8.conditions)
            return true;
          var o2 = (t3 = e8.conditions) === null || t3 === void 0 || !t3.url || pi[(n4 = (r3 = e8.conditions) === null || r3 === void 0 ? void 0 : r3.urlMatchType) !== null && n4 !== void 0 ? n4 : "icontains"](e8.conditions.url), s2 = (i2 = e8.conditions) === null || i2 === void 0 || !i2.selector || (B == null ? void 0 : B.querySelector(e8.conditions.selector));
          return o2 && s2;
        }).filter(function(e8) {
          if (!e8.linked_flag_key && !e8.targeting_flag_key)
            return true;
          var n4 = !e8.linked_flag_key || t2.instance.featureFlags.isFeatureEnabled(e8.linked_flag_key), r3 = !e8.targeting_flag_key || t2.instance.featureFlags.isFeatureEnabled(e8.targeting_flag_key);
          return n4 && r3;
        });
        return e7(r2);
      }, n2);
    } }]), e6;
  }();
  var _i = function() {
    function e6() {
      var t2 = this;
      r(this, e6), s(this, "limits", {}), s(this, "checkForLimiting", function(e7) {
        var n2 = e7.responseText;
        if (n2 && n2.length)
          try {
            (JSON.parse(n2).quota_limited || []).forEach(function(e8) {
              G.info("[RateLimiter] ".concat(e8 || "events", " is quota limited.")), t2.limits[e8] = new Date().getTime() + 6e4;
            });
          } catch (e8) {
            return void G.warn('[RateLimiter] could not rate limit - continuing. Error: "'.concat(e8 == null ? void 0 : e8.message, '"'), { text: n2 });
          }
      });
    }
    return o(e6, [{ key: "isRateLimited", value: function(e7) {
      var t2 = this.limits[e7 || "events"] || false;
      return t2 !== false && new Date().getTime() < t2;
    } }]), e6;
  }();
  var vi = function() {
    return t({ initialPathName: (H == null ? void 0 : H.pathname) || "", referringDomain: Tn.referringDomain() }, Tn.campaignParams());
  };
  var mi = function() {
    function e6(t2, n2, i2) {
      var o2 = this;
      r(this, e6), s(this, "_onSessionIdCallback", function(e7) {
        var t3 = o2._getStoredProps();
        if (!t3 || t3.sessionId !== e7) {
          var n3 = { sessionId: e7, props: o2._sessionSourceParamGenerator() };
          o2._persistence.register(s({}, Ye, n3));
        }
      }), this._sessionIdManager = t2, this._persistence = n2, this._sessionSourceParamGenerator = i2 || vi, this._sessionIdManager.onSessionId(this._onSessionIdCallback);
    }
    return o(e6, [{ key: "_getStoredProps", value: function() {
      return this._persistence.props[Ye];
    } }, { key: "getSessionProps", value: function() {
      var e7, t2 = (e7 = this._getStoredProps()) === null || e7 === void 0 ? void 0 : e7.props;
      return t2 ? { $client_session_initial_referring_host: t2.referringDomain, $client_session_initial_pathname: t2.initialPathName, $client_session_initial_utm_source: t2.utm_source, $client_session_initial_utm_campaign: t2.utm_campaign, $client_session_initial_utm_medium: t2.utm_medium, $client_session_initial_utm_content: t2.utm_content, $client_session_initial_utm_term: t2.utm_term } : {};
    } }]), e6;
  }();
  var yi = ["ahrefsbot", "ahrefssiteaudit", "applebot", "baiduspider", "bingbot", "bingpreview", "bot.htm", "bot.php", "crawler", "duckduckbot", "facebookexternal", "facebookcatalog", "gptbot", "http://yandex.com/bots", "hubspot", "ia_archiver", "linkedinbot", "mj12bot", "msnbot", "nessus", "petalbot", "pinterest", "prerender", "rogerbot", "screaming frog", "semrushbot", "sitebulb", "slurp", "turnitin", "twitterbot", "vercelbot", "yahoo! slurp", "yandexbot", "adsbot-google", "apis-google", "duplexweb-google", "feedfetcher-google", "google favicon", "google web preview", "google-read-aloud", "googlebot", "googleweblight", "mediapartners-google", "storebot-google"];
  var bi = function(e6, t2) {
    if (!e6)
      return false;
    var n2 = e6.toLowerCase();
    return yi.concat(t2 || []).some(function(e7) {
      var t3 = e7.toLowerCase();
      return n2.includes ? n2.includes(t3) : n2.indexOf(t3) !== -1;
    });
  };
  !function(e6) {
    e6[e6.INIT_MODULE = 0] = "INIT_MODULE", e6[e6.INIT_SNIPPET = 1] = "INIT_SNIPPET";
  }(di || (di = {}));
  var wi = function() {
  };
  var ki = {};
  var Si = "posthog";
  var Fi = !Et && (V == null ? void 0 : V.indexOf("MSIE")) === -1 && (V == null ? void 0 : V.indexOf("Mozilla")) === -1;
  var Ri = function() {
    var e6, t2, n2;
    return { api_host: "https://app.posthog.com", api_method: "POST", api_transport: "XHR", ui_host: null, token: "", autocapture: true, rageclick: true, cross_subdomain_cookie: (t2 = B == null ? void 0 : B.location, n2 = t2 == null ? void 0 : t2.hostname, !!E(n2) && n2.split(".").slice(-2).join(".") !== "herokuapp.com"), persistence: "localStorage+cookie", persistence_name: "", cookie_name: "", loaded: wi, store_google: true, custom_campaign_params: [], custom_blocked_useragents: [], save_referrer: true, capture_pageview: true, capture_pageleave: true, debug: false, verbose: false, cookie_expiration: 365, upgrade: false, disable_session_recording: false, disable_persistence: false, disable_cookie: false, enable_recording_console_log: void 0, secure_cookie: (A == null || (e6 = A.location) === null || e6 === void 0 ? void 0 : e6.protocol) === "https:", ip: true, opt_out_capturing_by_default: false, opt_out_persistence_by_default: false, opt_out_useragent_filter: false, opt_out_capturing_persistence_type: "localStorage", opt_out_capturing_cookie_prefix: null, opt_in_site_apps: false, property_blacklist: [], property_denylist: [], respect_dnt: false, sanitize_properties: null, request_headers: {}, inapp_protocol: "//", inapp_link_new_window: false, request_batching: true, properties_string_max_length: 65535, session_recording: {}, mask_all_element_attributes: false, mask_all_text: false, advanced_disable_decide: false, advanced_disable_feature_flags: false, advanced_disable_feature_flags_on_first_load: false, advanced_disable_toolbar_metrics: false, on_request_error: function(e7) {
      var t3 = "Bad HTTP status: " + e7.statusCode + " " + e7.responseText;
      G.error(t3);
    }, get_device_id: function(e7) {
      return e7;
    }, _onCapture: wi, capture_performance: void 0, name: "posthog", bootstrap: {}, disable_compression: false, session_idle_timeout_seconds: 1800 };
  };
  var Pi = function(e6, t2, n2, r2) {
    var i2, o2 = n2 !== Si && fi ? n2 ? fi[n2] : void 0 : fi, s2 = { initComplete: false, syncCode: false }, a2 = function(e7) {
      return function(t3) {
        s2[e7] || (s2[e7] = true, s2.initComplete && s2.syncCode && (r2 == null || r2(t3)));
      };
    };
    if (o2 && hi === di.INIT_MODULE)
      i2 = o2;
    else {
      if (o2 && !S(o2))
        return void G.error("You have already initialized " + n2);
      i2 = new Ei();
    }
    if (i2._init(e6, t2, n2, a2("initComplete")), i2.toolbar.maybeLoadToolbar(), i2.sessionRecording = new sr(i2), i2.sessionRecording.startRecordingIfEnabled(), i2.config.disable_scroll_properties || i2.pageViewManager.startMeasuringScrollPosition(), i2.__autocapture = i2.config.autocapture, Ze._setIsAutocaptureEnabled(i2), Ze._isAutocaptureEnabled) {
      i2.__autocapture = i2.config.autocapture;
      Ze.enabledForProject(i2.config.token, 100, 100) ? Ze.isBrowserSupported() ? Ze.init(i2) : (i2.__autocapture = false, G.info("Disabling Automatic Event Collection because this browser is not supported")) : (i2.__autocapture = false, G.info("Not in active bucket: disabling Automatic Event Collection."));
    }
    return m.DEBUG = m.DEBUG || i2.config.debug, !x(o2) && S(o2) && (i2._execute_array.call(i2.people, o2.people), i2._execute_array(o2)), a2("syncCode")(i2), i2;
  };
  var xi = function() {
    function e6() {
      r(this, e6), s(this, "__forceAllowLocalhost", false);
    }
    return o(e6, [{ key: "_forceAllowLocalhost", get: function() {
      return this.__forceAllowLocalhost;
    }, set: function(e7) {
      G.error("WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`"), this.__forceAllowLocalhost = e7;
    } }]), e6;
  }();
  var Ei = function() {
    function e6() {
      var t2 = this;
      r(this, e6), s(this, "webPerformance", new xi()), this.config = Ri(), this.compression = {}, this.decideEndpointWasHit = false, this.SentryIntegration = ui, this.segmentIntegration = function() {
        return function(e7) {
          Promise && Promise.resolve || G.warn("This browser does not have Promise support, and can not use the segment integration");
          var t3 = function(t4, n2) {
            t4.event.userId || t4.event.anonymousId === e7.get_distinct_id() || e7.reset(), t4.event.userId && t4.event.userId !== e7.get_distinct_id() && (e7.register({ distinct_id: t4.event.userId }), e7.reloadFeatureFlags());
            var r2 = e7._calculate_event_properties(n2, t4.event.properties);
            return t4.event.properties = Object.assign({}, r2, t4.event.properties), t4;
          };
          return { name: "PostHog JS", type: "enrichment", version: "1.0.0", isLoaded: function() {
            return true;
          }, load: function() {
            return Promise.resolve();
          }, track: function(e8) {
            return t3(e8, e8.event.event);
          }, page: function(e8) {
            return t3(e8, "$pageview");
          }, identify: function(e8) {
            return t3(e8, "$identify");
          }, screen: function(e8) {
            return t3(e8, "$screen");
          } };
        }(t2);
      }, this.__captureHooks = [], this.__request_queue = [], this.__loaded = false, this.__loaded_recorder_version = void 0, this.__autocapture = void 0, this.analyticsDefaultEndpoint = "/e/", this.elementsChainAsString = false, this.featureFlags = new it(this), this.toolbar = new cr(this), this.pageViewManager = new li(this), this.surveys = new gi(this), this.rateLimiter = new _i(), this.requestRouter = new ai(this), this.people = { set: function(e7, n2, r2) {
        var i2 = E(e7) ? s({}, e7, n2) : e7;
        t2.setPersonProperties(i2), r2 == null || r2({});
      }, set_once: function(e7, n2, r2) {
        var i2 = E(e7) ? s({}, e7, n2) : e7;
        t2.setPersonProperties(void 0, i2), r2 == null || r2({});
      } };
    }
    return o(e6, [{ key: "init", value: function(e7, t2, n2) {
      if (x(n2))
        G.critical("You must name your new library: init(token, config, name)");
      else if (x(e7) || function(e8) {
        return E(e8) && e8.trim().length === 0;
      }(e7))
        G.critical("You must provide a token to initialize posthog");
      else {
        if (n2 !== Si) {
          var r2 = Pi(e7, t2, n2, function(e8) {
            fi[n2] = e8, e8._loaded();
          });
          return fi[n2] = r2, r2;
        }
        G.critical("You must initialize the main posthog object right after you include the PostHog js snippet");
      }
    } }, { key: "_init", value: function(e7) {
      var n2, r2, i2, o2 = this, s2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a2 = arguments.length > 2 ? arguments[2] : void 0, u2 = arguments.length > 3 ? arguments[3] : void 0;
      this.__loaded = true, this.config = {}, this._triggered_notifs = [];
      var l2, c2 = { segmentRegister: false, syncCode: false }, d2 = function(e8) {
        return function() {
          c2[e8] || (c2[e8] = true, c2.segmentRegister && c2.syncCode && (u2 == null || u2(o2)));
        };
      };
      (s2.request_headers = s2.request_headers || s2.xhr_headers, this.set_config(X({}, Ri(), s2, { name: a2, token: e7 })), A != null && (n2 = A.rrweb) !== null && n2 !== void 0 && n2.record || A != null && A.rrwebRecord) && (this.__loaded_recorder_version = A == null || (l2 = A.rrweb) === null || l2 === void 0 ? void 0 : l2.version);
      if (this.persistence = new On(this.config), this.sessionPersistence = this.config.persistence === "sessionStorage" ? this.persistence : new On(t(t({}, this.config), {}, { persistence: "sessionStorage" })), this._requestQueue = new hr(this._handle_queued_event.bind(this)), this._retryQueue = new ii(this.config.on_request_error, this.rateLimiter), this.__captureHooks = [], this.__request_queue = [], this.sessionManager = new si(this.config, this.persistence), this.sessionPropsManager = new mi(this.sessionManager, this.persistence), this._gdpr_init(), s2.segment ? (this.config.get_device_id = function() {
        return s2.segment.user().anonymousId();
      }, s2.segment.user().id() && (this.register({ distinct_id: s2.segment.user().id() }), this.persistence.set_user_state("identified")), s2.segment.register(this.segmentIntegration()).then(d2("segmentRegister"))) : d2("segmentRegister")(), ((r2 = s2.bootstrap) === null || r2 === void 0 ? void 0 : r2.distinctID) !== void 0) {
        var h2, f2, p2 = this.config.get_device_id(dt()), g2 = (h2 = s2.bootstrap) !== null && h2 !== void 0 && h2.isIdentifiedID ? p2 : s2.bootstrap.distinctID;
        this.persistence.set_user_state((f2 = s2.bootstrap) !== null && f2 !== void 0 && f2.isIdentifiedID ? "identified" : "anonymous"), this.register({ distinct_id: s2.bootstrap.distinctID, $device_id: g2 });
      }
      if (this._hasBootstrappedFeatureFlags()) {
        var _2, v2, m2 = Object.keys(((_2 = s2.bootstrap) === null || _2 === void 0 ? void 0 : _2.featureFlags) || {}).filter(function(e8) {
          var t2, n3;
          return !((t2 = s2.bootstrap) === null || t2 === void 0 || (n3 = t2.featureFlags) === null || n3 === void 0 || !n3[e8]);
        }).reduce(function(e8, t2) {
          var n3, r3;
          return e8[t2] = ((n3 = s2.bootstrap) === null || n3 === void 0 || (r3 = n3.featureFlags) === null || r3 === void 0 ? void 0 : r3[t2]) || false, e8;
        }, {}), y2 = Object.keys(((v2 = s2.bootstrap) === null || v2 === void 0 ? void 0 : v2.featureFlagPayloads) || {}).filter(function(e8) {
          return m2[e8];
        }).reduce(function(e8, t2) {
          var n3, r3, i3, o3;
          (n3 = s2.bootstrap) !== null && n3 !== void 0 && (r3 = n3.featureFlagPayloads) !== null && r3 !== void 0 && r3[t2] && (e8[t2] = (i3 = s2.bootstrap) === null || i3 === void 0 || (o3 = i3.featureFlagPayloads) === null || o3 === void 0 ? void 0 : o3[t2]);
          return e8;
        }, {});
        this.featureFlags.receivedFeatureFlags({ featureFlags: m2, featureFlagPayloads: y2 });
      }
      if (!this.get_distinct_id()) {
        var b2 = this.config.get_device_id(dt());
        this.register_once({ distinct_id: b2, $device_id: b2 }, ""), this.persistence.set_user_state("anonymous");
      }
      A == null || (i2 = A.addEventListener) === null || i2 === void 0 || i2.call(A, "onpagehide" in self ? "pagehide" : "unload", this._handle_unload.bind(this)), d2("syncCode")();
    } }, { key: "_afterDecideResponse", value: function(e7) {
      var t2;
      if (this.compression = {}, e7.supportedCompression && !this.config.disable_compression) {
        var n2, r2 = {}, i2 = v(e7.supportedCompression);
        try {
          for (i2.s(); !(n2 = i2.n()).done; ) {
            r2[n2.value] = true;
          }
        } catch (e8) {
          i2.e(e8);
        } finally {
          i2.f();
        }
        this.compression = r2;
      }
      (t2 = e7.analytics) !== null && t2 !== void 0 && t2.endpoint && (this.analyticsDefaultEndpoint = e7.analytics.endpoint), e7.elementsChainAsString && (this.elementsChainAsString = e7.elementsChainAsString);
    } }, { key: "_loaded", value: function() {
      var e7 = this.config.advanced_disable_decide;
      e7 || this.featureFlags.setReloadingPaused(true);
      try {
        this.config.loaded(this);
      } catch (e8) {
        G.critical("`loaded` function failed", e8);
      }
      this._start_queue_if_opted_in(), this.config.capture_pageview && B && this.capture("$pageview", { title: B.title }, { send_instantly: true }), e7 || (new ar(this).call(), this.featureFlags.resetRequestQueue());
    } }, { key: "_start_queue_if_opted_in", value: function() {
      var e7;
      this.has_opted_out_capturing() || this.config.request_batching && ((e7 = this._requestQueue) === null || e7 === void 0 || e7.poll());
    } }, { key: "_dom_loaded", value: function() {
      var e7 = this;
      this.has_opted_out_capturing() || J(this.__request_queue, function(t2) {
        e7._send_request.apply(e7, p(t2));
      }), this.__request_queue = [], this._start_queue_if_opted_in();
    } }, { key: "_handle_unload", value: function() {
      var e7, t2;
      this.config.request_batching ? (this.config.capture_pageview && this.config.capture_pageleave && this.capture("$pageleave"), (e7 = this._requestQueue) === null || e7 === void 0 || e7.unload(), (t2 = this._retryQueue) === null || t2 === void 0 || t2.unload()) : this.config.capture_pageview && this.config.capture_pageleave && this.capture("$pageleave", null, { transport: "sendBeacon" });
    } }, { key: "_handle_queued_event", value: function(e7, t2, n2) {
      var r2 = JSON.stringify(t2);
      this.__compress_and_send_json_request(e7, r2, n2 || ki, wi);
    } }, { key: "__compress_and_send_json_request", value: function(e7, n2, r2, i2) {
      var o2 = function(e8, n3, r3) {
        return e8 === Cr.GZipJS ? [Kr(Xr(n3), { mtime: 0 }), t(t({}, r3), {}, { blob: true, urlQueryArgs: { compression: Cr.GZipJS } })] : [{ data: se(n3) }, r3];
      }(this.compression[Cr.GZipJS] ? Cr.GZipJS : Cr.Base64, n2, r2), s2 = f(o2, 2), a2 = s2[0], u2 = s2[1];
      this._send_request(e7, a2, u2, i2);
    } }, { key: "_send_request", value: function(e7, n2, r2, i2) {
      if (this.__loaded && this._retryQueue && !this.rateLimiter.isRateLimited(r2._batchKey))
        if (Fi)
          this.__request_queue.push([e7, n2, r2, i2]);
        else {
          var o2 = { method: this.config.api_method, transport: this.config.api_transport, verbose: this.config.verbose };
          r2 = X(o2, r2 || {}), Et || (r2.method = "GET");
          var s2 = A && "sendBeacon" in A.navigator && r2.transport === "sendBeacon";
          if (e7 = Zr(e7, r2.urlQueryArgs || {}, { ip: this.config.ip }), s2)
            try {
              A == null || A.navigator.sendBeacon(e7, ei(n2, t(t({}, r2), {}, { sendBeacon: true })));
            } catch (e8) {
            }
          else if (Et || !B)
            try {
              ti({ url: e7, data: n2, headers: this.config.request_headers, options: r2, callback: i2, retriesPerformedSoFar: 0, retryQueue: this._retryQueue, onError: this.config.on_request_error, onResponse: this.rateLimiter.checkForLimiting });
            } catch (e8) {
              G.error(e8);
            }
          else {
            var a2, u2 = B.createElement("script");
            u2.type = "text/javascript", u2.async = true, u2.defer = true, u2.src = e7;
            var l2 = B.getElementsByTagName("script")[0];
            (a2 = l2.parentNode) === null || a2 === void 0 || a2.insertBefore(u2, l2);
          }
        }
    } }, { key: "_execute_array", value: function(e7) {
      var t2, n2 = this, r2 = [], i2 = [], o2 = [];
      J(e7, function(e8) {
        e8 && (t2 = e8[0], S(t2) ? o2.push(e8) : R(e8) ? e8.call(n2) : S(e8) && t2 === "alias" ? r2.push(e8) : S(e8) && t2.indexOf("capture") !== -1 && R(n2[t2]) ? o2.push(e8) : i2.push(e8));
      });
      var s2 = function(e8, t3) {
        J(e8, function(e9) {
          if (S(e9[0])) {
            var n3 = t3;
            K(e9, function(e10) {
              n3 = n3[e10[0]].apply(n3, e10.slice(1));
            });
          } else
            this[e9[0]].apply(this, e9.slice(1));
        }, t3);
      };
      s2(r2, this), s2(i2, this), s2(o2, this);
    } }, { key: "_hasBootstrappedFeatureFlags", value: function() {
      var e7, t2;
      return ((e7 = this.config.bootstrap) === null || e7 === void 0 ? void 0 : e7.featureFlags) && Object.keys((t2 = this.config.bootstrap) === null || t2 === void 0 ? void 0 : t2.featureFlags).length > 0 || false;
    } }, { key: "push", value: function(e7) {
      this._execute_array([e7]);
    } }, { key: "capture", value: function(e7, n2) {
      var r2, i2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ki;
      if (!this.__loaded || !this.sessionPersistence || !this._requestQueue)
        return G.uninitializedWarning("posthog.capture");
      if (!Zn(this)) {
        var o2 = (i2 = i2 || ki).transport;
        if (o2 && (i2.transport = o2), !x(e7) && E(e7)) {
          if (!V || this.config.opt_out_useragent_filter || !bi(V, this.config.custom_blocked_useragents)) {
            this.sessionPersistence.update_search_keyword(), this.config.store_google && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info();
            var s2 = { uuid: dt(), event: e7, properties: this._calculate_event_properties(e7, n2 || {}) };
            e7 === "$identify" && (s2.$set = i2.$set, s2.$set_once = i2.$set_once), (s2 = oe(s2, i2._noTruncate ? null : this.config.properties_string_max_length)).timestamp = i2.timestamp || new Date(), x(i2.timestamp) || (s2.properties.$event_time_override_provided = true, s2.properties.$event_time_override_system_time = new Date());
            var a2 = t(t({}, s2.properties.$set), s2.$set);
            (function(e8) {
              if (P(e8)) {
                for (var t2 in e8)
                  if (w.call(e8, t2))
                    return false;
                return true;
              }
              return false;
            })(a2) || this.setPersonPropertiesForFlags(a2), G.info("send", s2);
            var u2 = JSON.stringify(s2), l2 = (r2 = i2._url) !== null && r2 !== void 0 ? r2 : this.requestRouter.endpointFor("api", this.analyticsDefaultEndpoint), c2 = i2 !== ki;
            return !this.config.request_batching || c2 && !i2._batchKey || i2.send_instantly ? this.__compress_and_send_json_request(l2, u2, i2) : this._requestQueue.enqueue(l2, s2, i2), this._invokeCaptureHooks(e7, s2), s2;
          }
        } else
          G.error("No event name provided to posthog.capture");
      }
    } }, { key: "_addCaptureHook", value: function(e7) {
      this.__captureHooks.push(e7);
    } }, { key: "_invokeCaptureHooks", value: function(e7, t2) {
      this.config._onCapture(e7, t2), K(this.__captureHooks, function(t3) {
        return t3(e7);
      });
    } }, { key: "_calculate_event_properties", value: function(e7, n2) {
      if (!this.persistence || !this.sessionPersistence)
        return n2;
      var r2 = this.persistence.remove_event_timer(e7), i2 = t({}, n2);
      if (i2.token = this.config.token, e7 === "$snapshot") {
        var o2 = t(t({}, this.persistence.properties()), this.sessionPersistence.properties());
        return i2.distinct_id = o2.distinct_id, i2;
      }
      var s2 = Tn.properties();
      if (this.sessionManager) {
        var a2 = this.sessionManager.checkAndGetSessionAndWindowId(), u2 = a2.sessionId, l2 = a2.windowId;
        i2.$session_id = u2, i2.$window_id = l2;
      }
      if (this.sessionPropsManager && this.config.__preview_send_client_session_params && (e7 === "$pageview" || e7 === "$pageleave" || e7 === "$autocapture")) {
        var c2 = this.sessionPropsManager.getSessionProps();
        i2 = X(i2, c2);
      }
      if (!this.config.disable_scroll_properties) {
        var d2 = {};
        e7 === "$pageview" ? d2 = this.pageViewManager.doPageView() : e7 === "$pageleave" && (d2 = this.pageViewManager.doPageLeave()), i2 = X(i2, d2);
      }
      if (e7 === "$pageview" && B && (i2.title = B.title), e7 === "$performance_event") {
        var h2 = this.persistence.properties();
        return i2.distinct_id = h2.distinct_id, i2.$current_url = s2.$current_url, i2;
      }
      if (!x(r2)) {
        var f2 = new Date().getTime() - r2;
        i2.$duration = parseFloat((f2 / 1e3).toFixed(3));
      }
      (V && this.config.opt_out_useragent_filter && (i2.$browser_type = bi(V, this.config.custom_blocked_useragents) ? "bot" : "browser"), i2 = X({}, Tn.properties(), this.persistence.properties(), this.sessionPersistence.properties(), i2), S(this.config.property_denylist) && S(this.config.property_blacklist)) ? K([].concat(p(this.config.property_blacklist), p(this.config.property_denylist)), function(e8) {
        delete i2[e8];
      }) : G.error("Invalid value for property_denylist config: " + this.config.property_denylist + " or property_blacklist config: " + this.config.property_blacklist);
      var g2 = this.config.sanitize_properties;
      return g2 && (i2 = g2(i2, e7)), i2;
    } }, { key: "register", value: function(e7, t2) {
      var n2;
      (n2 = this.persistence) === null || n2 === void 0 || n2.register(e7, t2);
    } }, { key: "register_once", value: function(e7, t2, n2) {
      var r2;
      (r2 = this.persistence) === null || r2 === void 0 || r2.register_once(e7, t2, n2);
    } }, { key: "register_for_session", value: function(e7) {
      var t2;
      (t2 = this.sessionPersistence) === null || t2 === void 0 || t2.register(e7);
    } }, { key: "unregister", value: function(e7) {
      var t2;
      (t2 = this.persistence) === null || t2 === void 0 || t2.unregister(e7);
    } }, { key: "unregister_for_session", value: function(e7) {
      var t2;
      (t2 = this.sessionPersistence) === null || t2 === void 0 || t2.unregister(e7);
    } }, { key: "_register_single", value: function(e7, t2) {
      this.register(s({}, e7, t2));
    } }, { key: "getFeatureFlag", value: function(e7, t2) {
      return this.featureFlags.getFeatureFlag(e7, t2);
    } }, { key: "getFeatureFlagPayload", value: function(e7) {
      var t2 = this.featureFlags.getFeatureFlagPayload(e7);
      try {
        return JSON.parse(t2);
      } catch (e8) {
        return t2;
      }
    } }, { key: "isFeatureEnabled", value: function(e7, t2) {
      return this.featureFlags.isFeatureEnabled(e7, t2);
    } }, { key: "reloadFeatureFlags", value: function() {
      this.featureFlags.reloadFeatureFlags();
    } }, { key: "updateEarlyAccessFeatureEnrollment", value: function(e7, t2) {
      this.featureFlags.updateEarlyAccessFeatureEnrollment(e7, t2);
    } }, { key: "getEarlyAccessFeatures", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      return this.featureFlags.getEarlyAccessFeatures(e7, t2);
    } }, { key: "onFeatureFlags", value: function(e7) {
      return this.featureFlags.onFeatureFlags(e7);
    } }, { key: "onSessionId", value: function(e7) {
      var t2, n2;
      return (t2 = (n2 = this.sessionManager) === null || n2 === void 0 ? void 0 : n2.onSessionId(e7)) !== null && t2 !== void 0 ? t2 : function() {
      };
    } }, { key: "getSurveys", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.surveys.getSurveys(e7, t2);
    } }, { key: "getActiveMatchingSurveys", value: function(e7) {
      var t2 = arguments.length > 1 && arguments[1] !== void 0 && arguments[1];
      this.surveys.getActiveMatchingSurveys(e7, t2);
    } }, { key: "identify", value: function(e7, t2, n2) {
      if (!this.__loaded || !this.persistence)
        return G.uninitializedWarning("posthog.identify");
      if (T(e7) && (e7 = e7.toString(), G.warn("The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.")), e7)
        if (["distinct_id", "distinctid"].includes(e7.toLowerCase()))
          G.critical('The string "'.concat(e7, '" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.'));
        else {
          var r2 = this.get_distinct_id();
          if (this.register({ $user_id: e7 }), !this.get_property("$device_id")) {
            var i2 = r2;
            this.register_once({ $had_persisted_distinct_id: true, $device_id: i2 }, "");
          }
          e7 !== r2 && e7 !== this.get_property(Te) && (this.unregister(Te), this.register({ distinct_id: e7 }));
          var o2 = this.persistence.get_user_state() === "anonymous";
          e7 !== r2 && o2 ? (this.persistence.set_user_state("identified"), this.setPersonPropertiesForFlags(t2 || {}, false), this.capture("$identify", { distinct_id: e7, $anon_distinct_id: r2 }, { $set: t2 || {}, $set_once: n2 || {} }), this.featureFlags.setAnonymousDistinctId(r2)) : (t2 || n2) && this.setPersonProperties(t2, n2), e7 !== r2 && (this.reloadFeatureFlags(), this.unregister(ze));
        }
      else
        G.error("Unique user id has not been set in posthog.identify");
    } }, { key: "setPersonProperties", value: function(e7, t2) {
      (e7 || t2) && (this.setPersonPropertiesForFlags(e7 || {}), this.capture("$set", { $set: e7 || {}, $set_once: t2 || {} }));
    } }, { key: "group", value: function(e7, n2, r2) {
      if (e7 && n2) {
        var i2 = this.getGroups();
        i2[e7] !== n2 && this.resetGroupPropertiesForFlags(e7), this.register({ $groups: t(t({}, i2), {}, s({}, e7, n2)) }), r2 && (this.capture("$groupidentify", { $group_type: e7, $group_key: n2, $group_set: r2 }), this.setGroupPropertiesForFlags(s({}, e7, r2))), i2[e7] === n2 || r2 || this.reloadFeatureFlags();
      } else
        G.error("posthog.group requires a group type and group key");
    } }, { key: "resetGroups", value: function() {
      this.register({ $groups: {} }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();
    } }, { key: "setPersonPropertiesForFlags", value: function(e7) {
      var t2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
      this.featureFlags.setPersonPropertiesForFlags(e7, t2);
    } }, { key: "resetPersonPropertiesForFlags", value: function() {
      this.featureFlags.resetPersonPropertiesForFlags();
    } }, { key: "setGroupPropertiesForFlags", value: function(e7) {
      var t2 = !(arguments.length > 1 && arguments[1] !== void 0) || arguments[1];
      this.featureFlags.setGroupPropertiesForFlags(e7, t2);
    } }, { key: "resetGroupPropertiesForFlags", value: function(e7) {
      this.featureFlags.resetGroupPropertiesForFlags(e7);
    } }, { key: "reset", value: function(e7) {
      var t2, n2, r2, i2;
      if (!this.__loaded)
        return G.uninitializedWarning("posthog.reset");
      var o2 = this.get_property("$device_id");
      (t2 = this.persistence) === null || t2 === void 0 || t2.clear(), (n2 = this.sessionPersistence) === null || n2 === void 0 || n2.clear(), (r2 = this.persistence) === null || r2 === void 0 || r2.set_user_state("anonymous"), (i2 = this.sessionManager) === null || i2 === void 0 || i2.resetSessionId();
      var s2 = this.config.get_device_id(dt());
      this.register_once({ distinct_id: s2, $device_id: e7 ? s2 : o2 }, "");
    } }, { key: "get_distinct_id", value: function() {
      return this.get_property("distinct_id");
    } }, { key: "getGroups", value: function() {
      return this.get_property("$groups") || {};
    } }, { key: "get_session_id", value: function() {
      var e7, t2;
      return (e7 = (t2 = this.sessionManager) === null || t2 === void 0 ? void 0 : t2.checkAndGetSessionAndWindowId(true).sessionId) !== null && e7 !== void 0 ? e7 : "";
    } }, { key: "get_session_replay_url", value: function(e7) {
      if (!this.sessionManager)
        return "";
      var t2 = this.sessionManager.checkAndGetSessionAndWindowId(true), n2 = t2.sessionId, r2 = t2.sessionStartTimestamp, i2 = this.requestRouter.endpointFor("ui", "/replay/" + n2);
      if (e7 != null && e7.withTimestamp && r2) {
        var o2, s2 = (o2 = e7.timestampLookBack) !== null && o2 !== void 0 ? o2 : 10;
        if (!r2)
          return i2;
        var a2 = Math.max(Math.floor((new Date().getTime() - r2) / 1e3) - s2, 0);
        i2 += "?t=".concat(a2);
      }
      return i2;
    } }, { key: "alias", value: function(e7, t2) {
      return e7 === this.get_property(Ce) ? (G.critical("Attempting to create alias for existing People user - aborting."), -2) : (x(t2) && (t2 = this.get_distinct_id()), e7 !== t2 ? (this._register_single(Te, e7), this.capture("$create_alias", { alias: e7, distinct_id: t2 })) : (G.warn("alias matches current distinct_id - skipping api call."), this.identify(e7), -1));
    } }, { key: "set_config", value: function(e7) {
      var n2, r2 = t({}, this.config);
      if (P(e7) && (X(this.config, e7), this.config.persistence_name || (this.config.persistence_name = this.config.cookie_name), this.config.disable_persistence || (this.config.disable_persistence = this.config.disable_cookie), (n2 = this.persistence) === null || n2 === void 0 || n2.update_config(this.config, r2), this.sessionPersistence = this.config.persistence === "sessionStorage" ? this.persistence : new On(t(t({}, this.config), {}, { persistence: "sessionStorage" })), bt.is_supported() && bt.get("ph_debug") === "true" && (this.config.debug = true), this.config.debug && (m.DEBUG = true), this.sessionRecording && !x(e7.disable_session_recording))) {
        var i2 = r2.disable_session_recording !== e7.disable_session_recording, o2 = !Zn(this) && !e7.disable_session_recording && !this.sessionRecording.started;
        (i2 || o2) && (e7.disable_session_recording ? this.sessionRecording.stopRecording() : this.sessionRecording.startRecordingIfEnabled());
      }
    } }, { key: "startSessionRecording", value: function() {
      this.set_config({ disable_session_recording: false });
    } }, { key: "stopSessionRecording", value: function() {
      this.set_config({ disable_session_recording: true });
    } }, { key: "sessionRecordingStarted", value: function() {
      var e7;
      return !((e7 = this.sessionRecording) === null || e7 === void 0 || !e7.started);
    } }, { key: "loadToolbar", value: function(e7) {
      return this.toolbar.loadToolbar(e7);
    } }, { key: "get_property", value: function(e7) {
      var t2;
      return (t2 = this.persistence) === null || t2 === void 0 ? void 0 : t2.props[e7];
    } }, { key: "getSessionProperty", value: function(e7) {
      var t2;
      return (t2 = this.sessionPersistence) === null || t2 === void 0 ? void 0 : t2.props[e7];
    } }, { key: "toString", value: function() {
      var e7, t2 = (e7 = this.config.name) !== null && e7 !== void 0 ? e7 : Si;
      return t2 !== Si && (t2 = Si + "." + t2), t2;
    } }, { key: "_gdpr_init", value: function() {
      this.config.opt_out_capturing_persistence_type === "localStorage" && bt.is_supported() && (!this.has_opted_in_capturing() && this.has_opted_in_capturing({ persistence_type: "cookie" }) && this.opt_in_capturing({ enable_persistence: false }), !this.has_opted_out_capturing() && this.has_opted_out_capturing({ persistence_type: "cookie" }) && this.opt_out_capturing({ clear_persistence: false }), this.clear_opt_in_out_capturing({ persistence_type: "cookie", enable_persistence: false })), this.has_opted_out_capturing() ? this._gdpr_update_persistence({ clear_persistence: true }) : this.has_opted_in_capturing() || !this.config.opt_out_capturing_by_default && !mt.get("ph_optout") || (mt.remove("ph_optout"), this.opt_out_capturing({ clear_persistence: this.config.opt_out_persistence_by_default }));
    } }, { key: "_gdpr_update_persistence", value: function(e7) {
      var t2, n2, r2, i2, o2;
      if (e7 && e7.clear_persistence)
        r2 = true;
      else {
        if (!e7 || !e7.enable_persistence)
          return;
        r2 = false;
      }
      this.config.disable_persistence || ((t2 = this.persistence) === null || t2 === void 0 ? void 0 : t2.disabled) === r2 || ((i2 = this.persistence) === null || i2 === void 0 || i2.set_disabled(r2));
      this.config.disable_persistence || ((n2 = this.sessionPersistence) === null || n2 === void 0 ? void 0 : n2.disabled) === r2 || ((o2 = this.sessionPersistence) === null || o2 === void 0 || o2.set_disabled(r2));
    } }, { key: "_gdpr_call_func", value: function(e7, t2) {
      return t2 = X({ capture: this.capture.bind(this), persistence_type: this.config.opt_out_capturing_persistence_type, cookie_prefix: this.config.opt_out_capturing_cookie_prefix, cookie_expiration: this.config.cookie_expiration, cross_subdomain_cookie: this.config.cross_subdomain_cookie, secure_cookie: this.config.secure_cookie }, t2 || {}), bt.is_supported() || t2.persistence_type !== "localStorage" || (t2.persistence_type = "cookie"), e7(this.config.token, { capture: t2.capture, captureEventName: t2.capture_event_name, captureProperties: t2.capture_properties, persistenceType: t2.persistence_type, persistencePrefix: t2.cookie_prefix, cookieExpiration: t2.cookie_expiration, crossSubdomainCookie: t2.cross_subdomain_cookie, secureCookie: t2.secure_cookie });
    } }, { key: "opt_in_capturing", value: function(e7) {
      e7 = X({ enable_persistence: true }, e7 || {}), this._gdpr_call_func(Vn, e7), this._gdpr_update_persistence(e7);
    } }, { key: "opt_out_capturing", value: function(e7) {
      var t2 = X({ clear_persistence: true }, e7 || {});
      this._gdpr_call_func(Wn, t2), this._gdpr_update_persistence(t2);
    } }, { key: "has_opted_in_capturing", value: function(e7) {
      return this._gdpr_call_func(zn, e7);
    } }, { key: "has_opted_out_capturing", value: function(e7) {
      return this._gdpr_call_func(Gn, e7);
    } }, { key: "clear_opt_in_out_capturing", value: function(e7) {
      var t2 = X({ enable_persistence: true }, e7 != null ? e7 : {});
      this._gdpr_call_func(Qn, t2), this._gdpr_update_persistence(t2);
    } }, { key: "debug", value: function(e7) {
      e7 === false ? (A == null || A.console.log("You've disabled debug mode."), localStorage && localStorage.removeItem("ph_debug"), this.set_config({ debug: false })) : (A == null || A.console.log("You're now in debug mode. All calls to PostHog will be logged in your console.\nYou can disable this with `posthog.debug(false)`."), localStorage && localStorage.setItem("ph_debug", "true"), this.set_config({ debug: true }));
    } }]), e6;
  }();
  !function(e6, t2) {
    for (var n2 = 0; n2 < t2.length; n2++)
      e6.prototype[t2[n2]] = re(e6.prototype[t2[n2]]);
  }(Ei, ["identify"]);
  var Ii;
  var Ci;
  var Ti = {};
  var $i = function() {
    fi.init = function(e6, t2, n2) {
      if (n2)
        return fi[n2] || (fi[n2] = Ti[n2] = Pi(e6 || "", t2 || {}, n2, function(e7) {
          fi[n2] = Ti[n2] = e7, e7._loaded();
        })), fi[n2];
      var r2 = fi;
      return Ti[Si] ? r2 = Ti[Si] : e6 && (r2 = Pi(e6, t2 || {}, Si, function(e7) {
        Ti[Si] = e7, e7._loaded();
      }), Ti[Si] = r2), fi = r2, hi === di.INIT_SNIPPET && (W[Si] = fi), K(Ti, function(e7, t3) {
        t3 !== Si && (fi[t3] = e7);
      }), r2;
    };
  };
  !function(e6) {
    e6.Popover = "popover", e6.API = "api", e6.Widget = "widget";
  }(Ii || (Ii = {})), function(e6) {
    e6.Open = "open", e6.MultipleChoice = "multiple_choice", e6.SingleChoice = "single_choice", e6.Rating = "rating", e6.Link = "link";
  }(Ci || (Ci = {}));
  var Oi = (hi = di.INIT_MODULE, fi = new Ei(), $i(), fi.init(), function() {
    function e6() {
      e6.done || (e6.done = true, Fi = false, K(Ti, function(e7) {
        e7._dom_loaded();
      }));
    }
    B != null && B.addEventListener && (B.readyState === "complete" ? e6() : B.addEventListener("DOMContentLoaded", e6, false)), A && ue(A, "load", e6, true);
  }(), fi);

  // ../deps/phoenix_html/priv/static/phoenix_html.js
  (function() {
    var PolyfillEvent = eventConstructor();
    function eventConstructor() {
      if (typeof window.CustomEvent === "function")
        return window.CustomEvent;
      function CustomEvent2(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: void 0 };
        var evt = document.createEvent("CustomEvent");
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      }
      CustomEvent2.prototype = window.Event.prototype;
      return CustomEvent2;
    }
    function buildHiddenInput(name, value) {
      var input = document.createElement("input");
      input.type = "hidden";
      input.name = name;
      input.value = value;
      return input;
    }
    function handleClick(element, targetModifierKey) {
      var to = element.getAttribute("data-to"), method = buildHiddenInput("_method", element.getAttribute("data-method")), csrf = buildHiddenInput("_csrf_token", element.getAttribute("data-csrf")), form = document.createElement("form"), submit = document.createElement("input"), target = element.getAttribute("target");
      form.method = element.getAttribute("data-method") === "get" ? "get" : "post";
      form.action = to;
      form.style.display = "none";
      if (target)
        form.target = target;
      else if (targetModifierKey)
        form.target = "_blank";
      form.appendChild(csrf);
      form.appendChild(method);
      document.body.appendChild(form);
      submit.type = "submit";
      form.appendChild(submit);
      submit.click();
    }
    window.addEventListener("click", function(e6) {
      var element = e6.target;
      if (e6.defaultPrevented)
        return;
      while (element && element.getAttribute) {
        var phoenixLinkEvent = new PolyfillEvent("phoenix.link.click", {
          "bubbles": true,
          "cancelable": true
        });
        if (!element.dispatchEvent(phoenixLinkEvent)) {
          e6.preventDefault();
          e6.stopImmediatePropagation();
          return false;
        }
        if (element.getAttribute("data-method")) {
          handleClick(element, e6.metaKey || e6.shiftKey);
          e6.preventDefault();
          return false;
        } else {
          element = element.parentNode;
        }
      }
    }, false);
    window.addEventListener("phoenix.link.click", function(e6) {
      var message = e6.target.getAttribute("data-confirm");
      if (message && !window.confirm(message)) {
        e6.preventDefault();
      }
    }, false);
  })();

  // ../deps/phoenix/priv/static/phoenix.mjs
  var closure = (value) => {
    if (typeof value === "function") {
      return value;
    } else {
      let closure22 = function() {
        return value;
      };
      return closure22;
    }
  };
  var globalSelf = typeof self !== "undefined" ? self : null;
  var phxWindow = typeof window !== "undefined" ? window : null;
  var global = globalSelf || phxWindow || global;
  var DEFAULT_VSN = "2.0.0";
  var SOCKET_STATES = { connecting: 0, open: 1, closing: 2, closed: 3 };
  var DEFAULT_TIMEOUT = 1e4;
  var WS_CLOSE_NORMAL = 1e3;
  var CHANNEL_STATES = {
    closed: "closed",
    errored: "errored",
    joined: "joined",
    joining: "joining",
    leaving: "leaving"
  };
  var CHANNEL_EVENTS = {
    close: "phx_close",
    error: "phx_error",
    join: "phx_join",
    reply: "phx_reply",
    leave: "phx_leave"
  };
  var TRANSPORTS = {
    longpoll: "longpoll",
    websocket: "websocket"
  };
  var XHR_STATES = {
    complete: 4
  };
  var Push = class {
    constructor(channel, event, payload, timeout) {
      this.channel = channel;
      this.event = event;
      this.payload = payload || function() {
        return {};
      };
      this.receivedResp = null;
      this.timeout = timeout;
      this.timeoutTimer = null;
      this.recHooks = [];
      this.sent = false;
    }
    resend(timeout) {
      this.timeout = timeout;
      this.reset();
      this.send();
    }
    send() {
      if (this.hasReceived("timeout")) {
        return;
      }
      this.startTimeout();
      this.sent = true;
      this.channel.socket.push({
        topic: this.channel.topic,
        event: this.event,
        payload: this.payload(),
        ref: this.ref,
        join_ref: this.channel.joinRef()
      });
    }
    receive(status, callback) {
      if (this.hasReceived(status)) {
        callback(this.receivedResp.response);
      }
      this.recHooks.push({ status, callback });
      return this;
    }
    reset() {
      this.cancelRefEvent();
      this.ref = null;
      this.refEvent = null;
      this.receivedResp = null;
      this.sent = false;
    }
    matchReceive({ status, response, _ref }) {
      this.recHooks.filter((h2) => h2.status === status).forEach((h2) => h2.callback(response));
    }
    cancelRefEvent() {
      if (!this.refEvent) {
        return;
      }
      this.channel.off(this.refEvent);
    }
    cancelTimeout() {
      clearTimeout(this.timeoutTimer);
      this.timeoutTimer = null;
    }
    startTimeout() {
      if (this.timeoutTimer) {
        this.cancelTimeout();
      }
      this.ref = this.channel.socket.makeRef();
      this.refEvent = this.channel.replyEventName(this.ref);
      this.channel.on(this.refEvent, (payload) => {
        this.cancelRefEvent();
        this.cancelTimeout();
        this.receivedResp = payload;
        this.matchReceive(payload);
      });
      this.timeoutTimer = setTimeout(() => {
        this.trigger("timeout", {});
      }, this.timeout);
    }
    hasReceived(status) {
      return this.receivedResp && this.receivedResp.status === status;
    }
    trigger(status, response) {
      this.channel.trigger(this.refEvent, { status, response });
    }
  };
  var Timer = class {
    constructor(callback, timerCalc) {
      this.callback = callback;
      this.timerCalc = timerCalc;
      this.timer = null;
      this.tries = 0;
    }
    reset() {
      this.tries = 0;
      clearTimeout(this.timer);
    }
    scheduleTimeout() {
      clearTimeout(this.timer);
      this.timer = setTimeout(() => {
        this.tries = this.tries + 1;
        this.callback();
      }, this.timerCalc(this.tries + 1));
    }
  };
  var Channel = class {
    constructor(topic, params, socket) {
      this.state = CHANNEL_STATES.closed;
      this.topic = topic;
      this.params = closure(params || {});
      this.socket = socket;
      this.bindings = [];
      this.bindingRef = 0;
      this.timeout = this.socket.timeout;
      this.joinedOnce = false;
      this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);
      this.pushBuffer = [];
      this.stateChangeRefs = [];
      this.rejoinTimer = new Timer(() => {
        if (this.socket.isConnected()) {
          this.rejoin();
        }
      }, this.socket.rejoinAfterMs);
      this.stateChangeRefs.push(this.socket.onError(() => this.rejoinTimer.reset()));
      this.stateChangeRefs.push(this.socket.onOpen(() => {
        this.rejoinTimer.reset();
        if (this.isErrored()) {
          this.rejoin();
        }
      }));
      this.joinPush.receive("ok", () => {
        this.state = CHANNEL_STATES.joined;
        this.rejoinTimer.reset();
        this.pushBuffer.forEach((pushEvent) => pushEvent.send());
        this.pushBuffer = [];
      });
      this.joinPush.receive("error", () => {
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.onClose(() => {
        this.rejoinTimer.reset();
        if (this.socket.hasLogger())
          this.socket.log("channel", `close ${this.topic} ${this.joinRef()}`);
        this.state = CHANNEL_STATES.closed;
        this.socket.remove(this);
      });
      this.onError((reason) => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `error ${this.topic}`, reason);
        if (this.isJoining()) {
          this.joinPush.reset();
        }
        this.state = CHANNEL_STATES.errored;
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.joinPush.receive("timeout", () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `timeout ${this.topic} (${this.joinRef()})`, this.joinPush.timeout);
        let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), this.timeout);
        leavePush.send();
        this.state = CHANNEL_STATES.errored;
        this.joinPush.reset();
        if (this.socket.isConnected()) {
          this.rejoinTimer.scheduleTimeout();
        }
      });
      this.on(CHANNEL_EVENTS.reply, (payload, ref) => {
        this.trigger(this.replyEventName(ref), payload);
      });
    }
    join(timeout = this.timeout) {
      if (this.joinedOnce) {
        throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");
      } else {
        this.timeout = timeout;
        this.joinedOnce = true;
        this.rejoin();
        return this.joinPush;
      }
    }
    onClose(callback) {
      this.on(CHANNEL_EVENTS.close, callback);
    }
    onError(callback) {
      return this.on(CHANNEL_EVENTS.error, (reason) => callback(reason));
    }
    on(event, callback) {
      let ref = this.bindingRef++;
      this.bindings.push({ event, ref, callback });
      return ref;
    }
    off(event, ref) {
      this.bindings = this.bindings.filter((bind) => {
        return !(bind.event === event && (typeof ref === "undefined" || ref === bind.ref));
      });
    }
    canPush() {
      return this.socket.isConnected() && this.isJoined();
    }
    push(event, payload, timeout = this.timeout) {
      payload = payload || {};
      if (!this.joinedOnce) {
        throw new Error(`tried to push '${event}' to '${this.topic}' before joining. Use channel.join() before pushing events`);
      }
      let pushEvent = new Push(this, event, function() {
        return payload;
      }, timeout);
      if (this.canPush()) {
        pushEvent.send();
      } else {
        pushEvent.startTimeout();
        this.pushBuffer.push(pushEvent);
      }
      return pushEvent;
    }
    leave(timeout = this.timeout) {
      this.rejoinTimer.reset();
      this.joinPush.cancelTimeout();
      this.state = CHANNEL_STATES.leaving;
      let onClose = () => {
        if (this.socket.hasLogger())
          this.socket.log("channel", `leave ${this.topic}`);
        this.trigger(CHANNEL_EVENTS.close, "leave");
      };
      let leavePush = new Push(this, CHANNEL_EVENTS.leave, closure({}), timeout);
      leavePush.receive("ok", () => onClose()).receive("timeout", () => onClose());
      leavePush.send();
      if (!this.canPush()) {
        leavePush.trigger("ok", {});
      }
      return leavePush;
    }
    onMessage(_event, payload, _ref) {
      return payload;
    }
    isMember(topic, event, payload, joinRef) {
      if (this.topic !== topic) {
        return false;
      }
      if (joinRef && joinRef !== this.joinRef()) {
        if (this.socket.hasLogger())
          this.socket.log("channel", "dropping outdated message", { topic, event, payload, joinRef });
        return false;
      } else {
        return true;
      }
    }
    joinRef() {
      return this.joinPush.ref;
    }
    rejoin(timeout = this.timeout) {
      if (this.isLeaving()) {
        return;
      }
      this.socket.leaveOpenTopic(this.topic);
      this.state = CHANNEL_STATES.joining;
      this.joinPush.resend(timeout);
    }
    trigger(event, payload, ref, joinRef) {
      let handledPayload = this.onMessage(event, payload, ref, joinRef);
      if (payload && !handledPayload) {
        throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");
      }
      let eventBindings = this.bindings.filter((bind) => bind.event === event);
      for (let i2 = 0; i2 < eventBindings.length; i2++) {
        let bind = eventBindings[i2];
        bind.callback(handledPayload, ref, joinRef || this.joinRef());
      }
    }
    replyEventName(ref) {
      return `chan_reply_${ref}`;
    }
    isClosed() {
      return this.state === CHANNEL_STATES.closed;
    }
    isErrored() {
      return this.state === CHANNEL_STATES.errored;
    }
    isJoined() {
      return this.state === CHANNEL_STATES.joined;
    }
    isJoining() {
      return this.state === CHANNEL_STATES.joining;
    }
    isLeaving() {
      return this.state === CHANNEL_STATES.leaving;
    }
  };
  var Ajax = class {
    static request(method, endPoint, accept, body, timeout, ontimeout, callback) {
      if (global.XDomainRequest) {
        let req = new global.XDomainRequest();
        return this.xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback);
      } else {
        let req = new global.XMLHttpRequest();
        return this.xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback);
      }
    }
    static xdomainRequest(req, method, endPoint, body, timeout, ontimeout, callback) {
      req.timeout = timeout;
      req.open(method, endPoint);
      req.onload = () => {
        let response = this.parseJSON(req.responseText);
        callback && callback(response);
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.onprogress = () => {
      };
      req.send(body);
      return req;
    }
    static xhrRequest(req, method, endPoint, accept, body, timeout, ontimeout, callback) {
      req.open(method, endPoint, true);
      req.timeout = timeout;
      req.setRequestHeader("Content-Type", accept);
      req.onerror = () => callback && callback(null);
      req.onreadystatechange = () => {
        if (req.readyState === XHR_STATES.complete && callback) {
          let response = this.parseJSON(req.responseText);
          callback(response);
        }
      };
      if (ontimeout) {
        req.ontimeout = ontimeout;
      }
      req.send(body);
      return req;
    }
    static parseJSON(resp) {
      if (!resp || resp === "") {
        return null;
      }
      try {
        return JSON.parse(resp);
      } catch (e6) {
        console && console.log("failed to parse JSON response", resp);
        return null;
      }
    }
    static serialize(obj, parentKey) {
      let queryStr = [];
      for (var key in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          continue;
        }
        let paramKey = parentKey ? `${parentKey}[${key}]` : key;
        let paramVal = obj[key];
        if (typeof paramVal === "object") {
          queryStr.push(this.serialize(paramVal, paramKey));
        } else {
          queryStr.push(encodeURIComponent(paramKey) + "=" + encodeURIComponent(paramVal));
        }
      }
      return queryStr.join("&");
    }
    static appendParams(url, params) {
      if (Object.keys(params).length === 0) {
        return url;
      }
      let prefix = url.match(/\?/) ? "&" : "?";
      return `${url}${prefix}${this.serialize(params)}`;
    }
  };
  var LongPoll = class {
    constructor(endPoint) {
      this.endPoint = null;
      this.token = null;
      this.skipHeartbeat = true;
      this.reqs = /* @__PURE__ */ new Set();
      this.awaitingBatchAck = false;
      this.currentBatch = null;
      this.currentBatchTimer = null;
      this.batchBuffer = [];
      this.onopen = function() {
      };
      this.onerror = function() {
      };
      this.onmessage = function() {
      };
      this.onclose = function() {
      };
      this.pollEndpoint = this.normalizeEndpoint(endPoint);
      this.readyState = SOCKET_STATES.connecting;
      this.poll();
    }
    normalizeEndpoint(endPoint) {
      return endPoint.replace("ws://", "http://").replace("wss://", "https://").replace(new RegExp("(.*)/" + TRANSPORTS.websocket), "$1/" + TRANSPORTS.longpoll);
    }
    endpointURL() {
      return Ajax.appendParams(this.pollEndpoint, { token: this.token });
    }
    closeAndRetry(code, reason, wasClean) {
      this.close(code, reason, wasClean);
      this.readyState = SOCKET_STATES.connecting;
    }
    ontimeout() {
      this.onerror("timeout");
      this.closeAndRetry(1005, "timeout", false);
    }
    isActive() {
      return this.readyState === SOCKET_STATES.open || this.readyState === SOCKET_STATES.connecting;
    }
    poll() {
      this.ajax("GET", "application/json", null, () => this.ontimeout(), (resp) => {
        if (resp) {
          var { status, token, messages } = resp;
          this.token = token;
        } else {
          status = 0;
        }
        switch (status) {
          case 200:
            messages.forEach((msg) => {
              setTimeout(() => this.onmessage({ data: msg }), 0);
            });
            this.poll();
            break;
          case 204:
            this.poll();
            break;
          case 410:
            this.readyState = SOCKET_STATES.open;
            this.onopen({});
            this.poll();
            break;
          case 403:
            this.onerror(403);
            this.close(1008, "forbidden", false);
            break;
          case 0:
          case 500:
            this.onerror(500);
            this.closeAndRetry(1011, "internal server error", 500);
            break;
          default:
            throw new Error(`unhandled poll status ${status}`);
        }
      });
    }
    send(body) {
      if (this.currentBatch) {
        this.currentBatch.push(body);
      } else if (this.awaitingBatchAck) {
        this.batchBuffer.push(body);
      } else {
        this.currentBatch = [body];
        this.currentBatchTimer = setTimeout(() => {
          this.batchSend(this.currentBatch);
          this.currentBatch = null;
        }, 0);
      }
    }
    batchSend(messages) {
      this.awaitingBatchAck = true;
      this.ajax("POST", "application/x-ndjson", messages.join("\n"), () => this.onerror("timeout"), (resp) => {
        this.awaitingBatchAck = false;
        if (!resp || resp.status !== 200) {
          this.onerror(resp && resp.status);
          this.closeAndRetry(1011, "internal server error", false);
        } else if (this.batchBuffer.length > 0) {
          this.batchSend(this.batchBuffer);
          this.batchBuffer = [];
        }
      });
    }
    close(code, reason, wasClean) {
      for (let req of this.reqs) {
        req.abort();
      }
      this.readyState = SOCKET_STATES.closed;
      let opts = Object.assign({ code: 1e3, reason: void 0, wasClean: true }, { code, reason, wasClean });
      this.batchBuffer = [];
      clearTimeout(this.currentBatchTimer);
      this.currentBatchTimer = null;
      if (typeof CloseEvent !== "undefined") {
        this.onclose(new CloseEvent("close", opts));
      } else {
        this.onclose(opts);
      }
    }
    ajax(method, contentType, body, onCallerTimeout, callback) {
      let req;
      let ontimeout = () => {
        this.reqs.delete(req);
        onCallerTimeout();
      };
      req = Ajax.request(method, this.endpointURL(), contentType, body, this.timeout, ontimeout, (resp) => {
        this.reqs.delete(req);
        if (this.isActive()) {
          callback(resp);
        }
      });
      this.reqs.add(req);
    }
  };
  var serializer_default = {
    HEADER_LENGTH: 1,
    META_LENGTH: 4,
    KINDS: { push: 0, reply: 1, broadcast: 2 },
    encode(msg, callback) {
      if (msg.payload.constructor === ArrayBuffer) {
        return callback(this.binaryEncode(msg));
      } else {
        let payload = [msg.join_ref, msg.ref, msg.topic, msg.event, msg.payload];
        return callback(JSON.stringify(payload));
      }
    },
    decode(rawPayload, callback) {
      if (rawPayload.constructor === ArrayBuffer) {
        return callback(this.binaryDecode(rawPayload));
      } else {
        let [join_ref, ref, topic, event, payload] = JSON.parse(rawPayload);
        return callback({ join_ref, ref, topic, event, payload });
      }
    },
    binaryEncode(message) {
      let { join_ref, ref, event, topic, payload } = message;
      let metaLength = this.META_LENGTH + join_ref.length + ref.length + topic.length + event.length;
      let header = new ArrayBuffer(this.HEADER_LENGTH + metaLength);
      let view = new DataView(header);
      let offset = 0;
      view.setUint8(offset++, this.KINDS.push);
      view.setUint8(offset++, join_ref.length);
      view.setUint8(offset++, ref.length);
      view.setUint8(offset++, topic.length);
      view.setUint8(offset++, event.length);
      Array.from(join_ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(ref, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(topic, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      Array.from(event, (char) => view.setUint8(offset++, char.charCodeAt(0)));
      var combined = new Uint8Array(header.byteLength + payload.byteLength);
      combined.set(new Uint8Array(header), 0);
      combined.set(new Uint8Array(payload), header.byteLength);
      return combined.buffer;
    },
    binaryDecode(buffer) {
      let view = new DataView(buffer);
      let kind = view.getUint8(0);
      let decoder = new TextDecoder();
      switch (kind) {
        case this.KINDS.push:
          return this.decodePush(buffer, view, decoder);
        case this.KINDS.reply:
          return this.decodeReply(buffer, view, decoder);
        case this.KINDS.broadcast:
          return this.decodeBroadcast(buffer, view, decoder);
      }
    },
    decodePush(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let topicSize = view.getUint8(2);
      let eventSize = view.getUint8(3);
      let offset = this.HEADER_LENGTH + this.META_LENGTH - 1;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: joinRef, ref: null, topic, event, payload: data };
    },
    decodeReply(buffer, view, decoder) {
      let joinRefSize = view.getUint8(1);
      let refSize = view.getUint8(2);
      let topicSize = view.getUint8(3);
      let eventSize = view.getUint8(4);
      let offset = this.HEADER_LENGTH + this.META_LENGTH;
      let joinRef = decoder.decode(buffer.slice(offset, offset + joinRefSize));
      offset = offset + joinRefSize;
      let ref = decoder.decode(buffer.slice(offset, offset + refSize));
      offset = offset + refSize;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      let payload = { status: event, response: data };
      return { join_ref: joinRef, ref, topic, event: CHANNEL_EVENTS.reply, payload };
    },
    decodeBroadcast(buffer, view, decoder) {
      let topicSize = view.getUint8(1);
      let eventSize = view.getUint8(2);
      let offset = this.HEADER_LENGTH + 2;
      let topic = decoder.decode(buffer.slice(offset, offset + topicSize));
      offset = offset + topicSize;
      let event = decoder.decode(buffer.slice(offset, offset + eventSize));
      offset = offset + eventSize;
      let data = buffer.slice(offset, buffer.byteLength);
      return { join_ref: null, ref: null, topic, event, payload: data };
    }
  };
  var Socket = class {
    constructor(endPoint, opts = {}) {
      this.stateChangeCallbacks = { open: [], close: [], error: [], message: [] };
      this.channels = [];
      this.sendBuffer = [];
      this.ref = 0;
      this.timeout = opts.timeout || DEFAULT_TIMEOUT;
      this.transport = opts.transport || global.WebSocket || LongPoll;
      this.establishedConnections = 0;
      this.defaultEncoder = serializer_default.encode.bind(serializer_default);
      this.defaultDecoder = serializer_default.decode.bind(serializer_default);
      this.closeWasClean = false;
      this.binaryType = opts.binaryType || "arraybuffer";
      this.connectClock = 1;
      if (this.transport !== LongPoll) {
        this.encode = opts.encode || this.defaultEncoder;
        this.decode = opts.decode || this.defaultDecoder;
      } else {
        this.encode = this.defaultEncoder;
        this.decode = this.defaultDecoder;
      }
      let awaitingConnectionOnPageShow = null;
      if (phxWindow && phxWindow.addEventListener) {
        phxWindow.addEventListener("pagehide", (_e2) => {
          if (this.conn) {
            this.disconnect();
            awaitingConnectionOnPageShow = this.connectClock;
          }
        });
        phxWindow.addEventListener("pageshow", (_e2) => {
          if (awaitingConnectionOnPageShow === this.connectClock) {
            awaitingConnectionOnPageShow = null;
            this.connect();
          }
        });
      }
      this.heartbeatIntervalMs = opts.heartbeatIntervalMs || 3e4;
      this.rejoinAfterMs = (tries) => {
        if (opts.rejoinAfterMs) {
          return opts.rejoinAfterMs(tries);
        } else {
          return [1e3, 2e3, 5e3][tries - 1] || 1e4;
        }
      };
      this.reconnectAfterMs = (tries) => {
        if (opts.reconnectAfterMs) {
          return opts.reconnectAfterMs(tries);
        } else {
          return [10, 50, 100, 150, 200, 250, 500, 1e3, 2e3][tries - 1] || 5e3;
        }
      };
      this.logger = opts.logger || null;
      this.longpollerTimeout = opts.longpollerTimeout || 2e4;
      this.params = closure(opts.params || {});
      this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;
      this.vsn = opts.vsn || DEFAULT_VSN;
      this.heartbeatTimeoutTimer = null;
      this.heartbeatTimer = null;
      this.pendingHeartbeatRef = null;
      this.reconnectTimer = new Timer(() => {
        this.teardown(() => this.connect());
      }, this.reconnectAfterMs);
    }
    getLongPollTransport() {
      return LongPoll;
    }
    replaceTransport(newTransport) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.sendBuffer = [];
      if (this.conn) {
        this.conn.close();
        this.conn = null;
      }
      this.transport = newTransport;
    }
    protocol() {
      return location.protocol.match(/^https/) ? "wss" : "ws";
    }
    endPointURL() {
      let uri = Ajax.appendParams(Ajax.appendParams(this.endPoint, this.params()), { vsn: this.vsn });
      if (uri.charAt(0) !== "/") {
        return uri;
      }
      if (uri.charAt(1) === "/") {
        return `${this.protocol()}:${uri}`;
      }
      return `${this.protocol()}://${location.host}${uri}`;
    }
    disconnect(callback, code, reason) {
      this.connectClock++;
      this.closeWasClean = true;
      this.reconnectTimer.reset();
      this.teardown(callback, code, reason);
    }
    connect(params) {
      if (params) {
        console && console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor");
        this.params = closure(params);
      }
      if (this.conn) {
        return;
      }
      this.connectClock++;
      this.closeWasClean = false;
      this.conn = new this.transport(this.endPointURL());
      this.conn.binaryType = this.binaryType;
      this.conn.timeout = this.longpollerTimeout;
      this.conn.onopen = () => this.onConnOpen();
      this.conn.onerror = (error) => this.onConnError(error);
      this.conn.onmessage = (event) => this.onConnMessage(event);
      this.conn.onclose = (event) => this.onConnClose(event);
    }
    log(kind, msg, data) {
      this.logger(kind, msg, data);
    }
    hasLogger() {
      return this.logger !== null;
    }
    onOpen(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.open.push([ref, callback]);
      return ref;
    }
    onClose(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.close.push([ref, callback]);
      return ref;
    }
    onError(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.error.push([ref, callback]);
      return ref;
    }
    onMessage(callback) {
      let ref = this.makeRef();
      this.stateChangeCallbacks.message.push([ref, callback]);
      return ref;
    }
    ping(callback) {
      if (!this.isConnected()) {
        return false;
      }
      let ref = this.makeRef();
      let startTime = Date.now();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref });
      let onMsgRef = this.onMessage((msg) => {
        if (msg.ref === ref) {
          this.off([onMsgRef]);
          callback(Date.now() - startTime);
        }
      });
      return true;
    }
    clearHeartbeats() {
      clearTimeout(this.heartbeatTimer);
      clearTimeout(this.heartbeatTimeoutTimer);
    }
    onConnOpen() {
      if (this.hasLogger())
        this.log("transport", `connected to ${this.endPointURL()}`);
      this.closeWasClean = false;
      this.establishedConnections++;
      this.flushSendBuffer();
      this.reconnectTimer.reset();
      this.resetHeartbeat();
      this.stateChangeCallbacks.open.forEach(([, callback]) => callback());
    }
    heartbeatTimeout() {
      if (this.pendingHeartbeatRef) {
        this.pendingHeartbeatRef = null;
        if (this.hasLogger()) {
          this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
        }
        this.triggerChanError();
        this.closeWasClean = false;
        this.teardown(() => this.reconnectTimer.scheduleTimeout(), WS_CLOSE_NORMAL, "heartbeat timeout");
      }
    }
    resetHeartbeat() {
      if (this.conn && this.conn.skipHeartbeat) {
        return;
      }
      this.pendingHeartbeatRef = null;
      this.clearHeartbeats();
      this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
    }
    teardown(callback, code, reason) {
      if (!this.conn) {
        return callback && callback();
      }
      this.waitForBufferDone(() => {
        if (this.conn) {
          if (code) {
            this.conn.close(code, reason || "");
          } else {
            this.conn.close();
          }
        }
        this.waitForSocketClosed(() => {
          if (this.conn) {
            this.conn.onopen = function() {
            };
            this.conn.onerror = function() {
            };
            this.conn.onmessage = function() {
            };
            this.conn.onclose = function() {
            };
            this.conn = null;
          }
          callback && callback();
        });
      });
    }
    waitForBufferDone(callback, tries = 1) {
      if (tries === 5 || !this.conn || !this.conn.bufferedAmount) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForBufferDone(callback, tries + 1);
      }, 150 * tries);
    }
    waitForSocketClosed(callback, tries = 1) {
      if (tries === 5 || !this.conn || this.conn.readyState === SOCKET_STATES.closed) {
        callback();
        return;
      }
      setTimeout(() => {
        this.waitForSocketClosed(callback, tries + 1);
      }, 150 * tries);
    }
    onConnClose(event) {
      let closeCode = event && event.code;
      if (this.hasLogger())
        this.log("transport", "close", event);
      this.triggerChanError();
      this.clearHeartbeats();
      if (!this.closeWasClean && closeCode !== 1e3) {
        this.reconnectTimer.scheduleTimeout();
      }
      this.stateChangeCallbacks.close.forEach(([, callback]) => callback(event));
    }
    onConnError(error) {
      if (this.hasLogger())
        this.log("transport", error);
      let transportBefore = this.transport;
      let establishedBefore = this.establishedConnections;
      this.stateChangeCallbacks.error.forEach(([, callback]) => {
        callback(error, transportBefore, establishedBefore);
      });
      if (transportBefore === this.transport || establishedBefore > 0) {
        this.triggerChanError();
      }
    }
    triggerChanError() {
      this.channels.forEach((channel) => {
        if (!(channel.isErrored() || channel.isLeaving() || channel.isClosed())) {
          channel.trigger(CHANNEL_EVENTS.error);
        }
      });
    }
    connectionState() {
      switch (this.conn && this.conn.readyState) {
        case SOCKET_STATES.connecting:
          return "connecting";
        case SOCKET_STATES.open:
          return "open";
        case SOCKET_STATES.closing:
          return "closing";
        default:
          return "closed";
      }
    }
    isConnected() {
      return this.connectionState() === "open";
    }
    remove(channel) {
      this.off(channel.stateChangeRefs);
      this.channels = this.channels.filter((c2) => c2.joinRef() !== channel.joinRef());
    }
    off(refs) {
      for (let key in this.stateChangeCallbacks) {
        this.stateChangeCallbacks[key] = this.stateChangeCallbacks[key].filter(([ref]) => {
          return refs.indexOf(ref) === -1;
        });
      }
    }
    channel(topic, chanParams = {}) {
      let chan = new Channel(topic, chanParams, this);
      this.channels.push(chan);
      return chan;
    }
    push(data) {
      if (this.hasLogger()) {
        let { topic, event, payload, ref, join_ref } = data;
        this.log("push", `${topic} ${event} (${join_ref}, ${ref})`, payload);
      }
      if (this.isConnected()) {
        this.encode(data, (result) => this.conn.send(result));
      } else {
        this.sendBuffer.push(() => this.encode(data, (result) => this.conn.send(result)));
      }
    }
    makeRef() {
      let newRef = this.ref + 1;
      if (newRef === this.ref) {
        this.ref = 0;
      } else {
        this.ref = newRef;
      }
      return this.ref.toString();
    }
    sendHeartbeat() {
      if (this.pendingHeartbeatRef && !this.isConnected()) {
        return;
      }
      this.pendingHeartbeatRef = this.makeRef();
      this.push({ topic: "phoenix", event: "heartbeat", payload: {}, ref: this.pendingHeartbeatRef });
      this.heartbeatTimeoutTimer = setTimeout(() => this.heartbeatTimeout(), this.heartbeatIntervalMs);
    }
    flushSendBuffer() {
      if (this.isConnected() && this.sendBuffer.length > 0) {
        this.sendBuffer.forEach((callback) => callback());
        this.sendBuffer = [];
      }
    }
    onConnMessage(rawMessage) {
      this.decode(rawMessage.data, (msg) => {
        let { topic, event, payload, ref, join_ref } = msg;
        if (ref && ref === this.pendingHeartbeatRef) {
          this.clearHeartbeats();
          this.pendingHeartbeatRef = null;
          this.heartbeatTimer = setTimeout(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
        }
        if (this.hasLogger())
          this.log("receive", `${payload.status || ""} ${topic} ${event} ${ref && "(" + ref + ")" || ""}`, payload);
        for (let i2 = 0; i2 < this.channels.length; i2++) {
          const channel = this.channels[i2];
          if (!channel.isMember(topic, event, payload, join_ref)) {
            continue;
          }
          channel.trigger(event, payload, ref, join_ref);
        }
        for (let i2 = 0; i2 < this.stateChangeCallbacks.message.length; i2++) {
          let [, callback] = this.stateChangeCallbacks.message[i2];
          callback(msg);
        }
      });
    }
    leaveOpenTopic(topic) {
      let dupChannel = this.channels.find((c2) => c2.topic === topic && (c2.isJoined() || c2.isJoining()));
      if (dupChannel) {
        if (this.hasLogger())
          this.log("transport", `leaving duplicate topic "${topic}"`);
        dupChannel.leave();
      }
    }
  };

  // ../deps/phoenix_live_view/priv/static/phoenix_live_view.esm.js
  var CONSECUTIVE_RELOADS = "consecutive-reloads";
  var MAX_RELOADS = 10;
  var RELOAD_JITTER_MIN = 5e3;
  var RELOAD_JITTER_MAX = 1e4;
  var FAILSAFE_JITTER = 3e4;
  var PHX_EVENT_CLASSES = [
    "phx-click-loading",
    "phx-change-loading",
    "phx-submit-loading",
    "phx-keydown-loading",
    "phx-keyup-loading",
    "phx-blur-loading",
    "phx-focus-loading"
  ];
  var PHX_COMPONENT = "data-phx-component";
  var PHX_LIVE_LINK = "data-phx-link";
  var PHX_TRACK_STATIC = "track-static";
  var PHX_LINK_STATE = "data-phx-link-state";
  var PHX_REF = "data-phx-ref";
  var PHX_REF_SRC = "data-phx-ref-src";
  var PHX_TRACK_UPLOADS = "track-uploads";
  var PHX_UPLOAD_REF = "data-phx-upload-ref";
  var PHX_PREFLIGHTED_REFS = "data-phx-preflighted-refs";
  var PHX_DONE_REFS = "data-phx-done-refs";
  var PHX_DROP_TARGET = "drop-target";
  var PHX_ACTIVE_ENTRY_REFS = "data-phx-active-refs";
  var PHX_LIVE_FILE_UPDATED = "phx:live-file:updated";
  var PHX_SKIP = "data-phx-skip";
  var PHX_PRUNE = "data-phx-prune";
  var PHX_PAGE_LOADING = "page-loading";
  var PHX_CONNECTED_CLASS = "phx-connected";
  var PHX_DISCONNECTED_CLASS = "phx-loading";
  var PHX_NO_FEEDBACK_CLASS = "phx-no-feedback";
  var PHX_ERROR_CLASS = "phx-error";
  var PHX_PARENT_ID = "data-phx-parent-id";
  var PHX_MAIN = "data-phx-main";
  var PHX_ROOT_ID = "data-phx-root-id";
  var PHX_TRIGGER_ACTION = "trigger-action";
  var PHX_FEEDBACK_FOR = "feedback-for";
  var PHX_HAS_FOCUSED = "phx-has-focused";
  var FOCUSABLE_INPUTS = ["text", "textarea", "number", "email", "password", "search", "tel", "url", "date", "time", "datetime-local", "color", "range"];
  var CHECKABLE_INPUTS = ["checkbox", "radio"];
  var PHX_HAS_SUBMITTED = "phx-has-submitted";
  var PHX_SESSION = "data-phx-session";
  var PHX_VIEW_SELECTOR = `[${PHX_SESSION}]`;
  var PHX_STICKY = "data-phx-sticky";
  var PHX_STATIC = "data-phx-static";
  var PHX_READONLY = "data-phx-readonly";
  var PHX_DISABLED = "data-phx-disabled";
  var PHX_DISABLE_WITH = "disable-with";
  var PHX_DISABLE_WITH_RESTORE = "data-phx-disable-with-restore";
  var PHX_HOOK = "hook";
  var PHX_DEBOUNCE = "debounce";
  var PHX_THROTTLE = "throttle";
  var PHX_UPDATE = "update";
  var PHX_STREAM = "stream";
  var PHX_KEY = "key";
  var PHX_PRIVATE = "phxPrivate";
  var PHX_AUTO_RECOVER = "auto-recover";
  var PHX_LV_DEBUG = "phx:live-socket:debug";
  var PHX_LV_PROFILE = "phx:live-socket:profiling";
  var PHX_LV_LATENCY_SIM = "phx:live-socket:latency-sim";
  var PHX_PROGRESS = "progress";
  var PHX_MOUNTED = "mounted";
  var LOADER_TIMEOUT = 1;
  var BEFORE_UNLOAD_LOADER_TIMEOUT = 200;
  var BINDING_PREFIX = "phx-";
  var PUSH_TIMEOUT = 3e4;
  var DEBOUNCE_TRIGGER = "debounce-trigger";
  var THROTTLED = "throttled";
  var DEBOUNCE_PREV_KEY = "debounce-prev-key";
  var DEFAULTS = {
    debounce: 300,
    throttle: 300
  };
  var DYNAMICS = "d";
  var STATIC = "s";
  var COMPONENTS = "c";
  var EVENTS = "e";
  var REPLY = "r";
  var TITLE = "t";
  var TEMPLATES = "p";
  var STREAM = "stream";
  var EntryUploader = class {
    constructor(entry, chunkSize, liveSocket2) {
      this.liveSocket = liveSocket2;
      this.entry = entry;
      this.offset = 0;
      this.chunkSize = chunkSize;
      this.chunkTimer = null;
      this.uploadChannel = liveSocket2.channel(`lvu:${entry.ref}`, { token: entry.metadata() });
    }
    error(reason) {
      clearTimeout(this.chunkTimer);
      this.uploadChannel.leave();
      this.entry.error(reason);
    }
    upload() {
      this.uploadChannel.onError((reason) => this.error(reason));
      this.uploadChannel.join().receive("ok", (_data) => this.readNextChunk()).receive("error", (reason) => this.error(reason));
    }
    isDone() {
      return this.offset >= this.entry.file.size;
    }
    readNextChunk() {
      let reader = new window.FileReader();
      let blob = this.entry.file.slice(this.offset, this.chunkSize + this.offset);
      reader.onload = (e6) => {
        if (e6.target.error === null) {
          this.offset += e6.target.result.byteLength;
          this.pushChunk(e6.target.result);
        } else {
          return logError("Read error: " + e6.target.error);
        }
      };
      reader.readAsArrayBuffer(blob);
    }
    pushChunk(chunk) {
      if (!this.uploadChannel.isJoined()) {
        return;
      }
      this.uploadChannel.push("chunk", chunk).receive("ok", () => {
        this.entry.progress(this.offset / this.entry.file.size * 100);
        if (!this.isDone()) {
          this.chunkTimer = setTimeout(() => this.readNextChunk(), this.liveSocket.getLatencySim() || 0);
        }
      });
    }
  };
  var logError = (msg, obj) => console.error && console.error(msg, obj);
  var isCid = (cid) => {
    let type = typeof cid;
    return type === "number" || type === "string" && /^(0|[1-9]\d*)$/.test(cid);
  };
  function detectDuplicateIds() {
    let ids = /* @__PURE__ */ new Set();
    let elems = document.querySelectorAll("*[id]");
    for (let i2 = 0, len = elems.length; i2 < len; i2++) {
      if (ids.has(elems[i2].id)) {
        console.error(`Multiple IDs detected: ${elems[i2].id}. Ensure unique element ids.`);
      } else {
        ids.add(elems[i2].id);
      }
    }
  }
  var debug = (view, kind, msg, obj) => {
    if (view.liveSocket.isDebugEnabled()) {
      console.log(`${view.id} ${kind}: ${msg} - `, obj);
    }
  };
  var closure2 = (val) => typeof val === "function" ? val : function() {
    return val;
  };
  var clone = (obj) => {
    return JSON.parse(JSON.stringify(obj));
  };
  var closestPhxBinding = (el, binding, borderEl) => {
    do {
      if (el.matches(`[${binding}]`) && !el.disabled) {
        return el;
      }
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1 && !(borderEl && borderEl.isSameNode(el) || el.matches(PHX_VIEW_SELECTOR)));
    return null;
  };
  var isObject = (obj) => {
    return obj !== null && typeof obj === "object" && !(obj instanceof Array);
  };
  var isEqualObj = (obj1, obj2) => JSON.stringify(obj1) === JSON.stringify(obj2);
  var isEmpty = (obj) => {
    for (let x2 in obj) {
      return false;
    }
    return true;
  };
  var maybe = (el, callback) => el && callback(el);
  var channelUploader = function(entries, onError, resp, liveSocket2) {
    entries.forEach((entry) => {
      let entryUploader = new EntryUploader(entry, resp.config.chunk_size, liveSocket2);
      entryUploader.upload();
    });
  };
  var Browser = {
    canPushState() {
      return typeof history.pushState !== "undefined";
    },
    dropLocal(localStorage2, namespace, subkey) {
      return localStorage2.removeItem(this.localKey(namespace, subkey));
    },
    updateLocal(localStorage2, namespace, subkey, initial, func) {
      let current = this.getLocal(localStorage2, namespace, subkey);
      let key = this.localKey(namespace, subkey);
      let newVal = current === null ? initial : func(current);
      localStorage2.setItem(key, JSON.stringify(newVal));
      return newVal;
    },
    getLocal(localStorage2, namespace, subkey) {
      return JSON.parse(localStorage2.getItem(this.localKey(namespace, subkey)));
    },
    updateCurrentState(callback) {
      if (!this.canPushState()) {
        return;
      }
      history.replaceState(callback(history.state || {}), "", window.location.href);
    },
    pushState(kind, meta, to) {
      if (this.canPushState()) {
        if (to !== window.location.href) {
          if (meta.type == "redirect" && meta.scroll) {
            let currentState = history.state || {};
            currentState.scroll = meta.scroll;
            history.replaceState(currentState, "", window.location.href);
          }
          delete meta.scroll;
          history[kind + "State"](meta, "", to || null);
          let hashEl = this.getHashTargetEl(window.location.hash);
          if (hashEl) {
            hashEl.scrollIntoView();
          } else if (meta.type === "redirect") {
            window.scroll(0, 0);
          }
        }
      } else {
        this.redirect(to);
      }
    },
    setCookie(name, value) {
      document.cookie = `${name}=${value}`;
    },
    getCookie(name) {
      return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${name}s*=s*([^;]*).*$)|^.*$`), "$1");
    },
    redirect(toURL, flash) {
      if (flash) {
        Browser.setCookie("__phoenix_flash__", flash + "; max-age=60000; path=/");
      }
      window.location = toURL;
    },
    localKey(namespace, subkey) {
      return `${namespace}-${subkey}`;
    },
    getHashTargetEl(maybeHash) {
      let hash = maybeHash.toString().substring(1);
      if (hash === "") {
        return;
      }
      return document.getElementById(hash) || document.querySelector(`a[name="${hash}"]`);
    }
  };
  var browser_default = Browser;
  var DOM = {
    byId(id) {
      return document.getElementById(id) || logError(`no id found for ${id}`);
    },
    removeClass(el, className) {
      el.classList.remove(className);
      if (el.classList.length === 0) {
        el.removeAttribute("class");
      }
    },
    all(node, query, callback) {
      if (!node) {
        return [];
      }
      let array = Array.from(node.querySelectorAll(query));
      return callback ? array.forEach(callback) : array;
    },
    childNodeLength(html) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return template.content.childElementCount;
    },
    isUploadInput(el) {
      return el.type === "file" && el.getAttribute(PHX_UPLOAD_REF) !== null;
    },
    findUploadInputs(node) {
      return this.all(node, `input[type="file"][${PHX_UPLOAD_REF}]`);
    },
    findComponentNodeList(node, cid) {
      return this.filterWithinSameLiveView(this.all(node, `[${PHX_COMPONENT}="${cid}"]`), node);
    },
    isPhxDestroyed(node) {
      return node.id && DOM.private(node, "destroyed") ? true : false;
    },
    wantsNewTab(e6) {
      let wantsNewTab = e6.ctrlKey || e6.shiftKey || e6.metaKey || e6.button && e6.button === 1;
      return wantsNewTab || e6.target.getAttribute("target") === "_blank";
    },
    isUnloadableFormSubmit(e6) {
      return !e6.defaultPrevented && !this.wantsNewTab(e6);
    },
    isNewPageHref(href, currentLocation) {
      let url;
      try {
        url = new URL(href);
      } catch (e6) {
        try {
          url = new URL(href, currentLocation);
        } catch (e22) {
          return true;
        }
      }
      if (url.host === currentLocation.host && url.protocol === currentLocation.protocol) {
        if (url.pathname === currentLocation.pathname && url.search === currentLocation.search) {
          return url.hash === "" && !url.href.endsWith("#");
        }
      }
      return true;
    },
    markPhxChildDestroyed(el) {
      if (this.isPhxChild(el)) {
        el.setAttribute(PHX_SESSION, "");
      }
      this.putPrivate(el, "destroyed", true);
    },
    findPhxChildrenInFragment(html, parentId) {
      let template = document.createElement("template");
      template.innerHTML = html;
      return this.findPhxChildren(template.content, parentId);
    },
    isIgnored(el, phxUpdate) {
      return (el.getAttribute(phxUpdate) || el.getAttribute("data-phx-update")) === "ignore";
    },
    isPhxUpdate(el, phxUpdate, updateTypes) {
      return el.getAttribute && updateTypes.indexOf(el.getAttribute(phxUpdate)) >= 0;
    },
    findPhxSticky(el) {
      return this.all(el, `[${PHX_STICKY}]`);
    },
    findPhxChildren(el, parentId) {
      return this.all(el, `${PHX_VIEW_SELECTOR}[${PHX_PARENT_ID}="${parentId}"]`);
    },
    findParentCIDs(node, cids) {
      let initial = new Set(cids);
      let parentCids = cids.reduce((acc, cid) => {
        let selector = `[${PHX_COMPONENT}="${cid}"] [${PHX_COMPONENT}]`;
        this.filterWithinSameLiveView(this.all(node, selector), node).map((el) => parseInt(el.getAttribute(PHX_COMPONENT))).forEach((childCID) => acc.delete(childCID));
        return acc;
      }, initial);
      return parentCids.size === 0 ? new Set(cids) : parentCids;
    },
    filterWithinSameLiveView(nodes, parent) {
      if (parent.querySelector(PHX_VIEW_SELECTOR)) {
        return nodes.filter((el) => this.withinSameLiveView(el, parent));
      } else {
        return nodes;
      }
    },
    withinSameLiveView(node, parent) {
      while (node = node.parentNode) {
        if (node.isSameNode(parent)) {
          return true;
        }
        if (node.getAttribute(PHX_SESSION) !== null) {
          return false;
        }
      }
    },
    private(el, key) {
      return el[PHX_PRIVATE] && el[PHX_PRIVATE][key];
    },
    deletePrivate(el, key) {
      el[PHX_PRIVATE] && delete el[PHX_PRIVATE][key];
    },
    putPrivate(el, key, value) {
      if (!el[PHX_PRIVATE]) {
        el[PHX_PRIVATE] = {};
      }
      el[PHX_PRIVATE][key] = value;
    },
    updatePrivate(el, key, defaultVal, updateFunc) {
      let existing = this.private(el, key);
      if (existing === void 0) {
        this.putPrivate(el, key, updateFunc(defaultVal));
      } else {
        this.putPrivate(el, key, updateFunc(existing));
      }
    },
    copyPrivates(target, source) {
      if (source[PHX_PRIVATE]) {
        target[PHX_PRIVATE] = source[PHX_PRIVATE];
      }
    },
    putTitle(str) {
      let titleEl = document.querySelector("title");
      if (titleEl) {
        let { prefix, suffix } = titleEl.dataset;
        document.title = `${prefix || ""}${str}${suffix || ""}`;
      } else {
        document.title = str;
      }
    },
    debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, callback) {
      let debounce = el.getAttribute(phxDebounce);
      let throttle = el.getAttribute(phxThrottle);
      if (debounce === "") {
        debounce = defaultDebounce;
      }
      if (throttle === "") {
        throttle = defaultThrottle;
      }
      let value = debounce || throttle;
      switch (value) {
        case null:
          return callback();
        case "blur":
          if (this.once(el, "debounce-blur")) {
            el.addEventListener("blur", () => callback());
          }
          return;
        default:
          let timeout = parseInt(value);
          let trigger = () => throttle ? this.deletePrivate(el, THROTTLED) : callback();
          let currentCycle = this.incCycle(el, DEBOUNCE_TRIGGER, trigger);
          if (isNaN(timeout)) {
            return logError(`invalid throttle/debounce value: ${value}`);
          }
          if (throttle) {
            let newKeyDown = false;
            if (event.type === "keydown") {
              let prevKey = this.private(el, DEBOUNCE_PREV_KEY);
              this.putPrivate(el, DEBOUNCE_PREV_KEY, event.key);
              newKeyDown = prevKey !== event.key;
            }
            if (!newKeyDown && this.private(el, THROTTLED)) {
              return false;
            } else {
              callback();
              this.putPrivate(el, THROTTLED, true);
              setTimeout(() => {
                if (asyncFilter()) {
                  this.triggerCycle(el, DEBOUNCE_TRIGGER);
                }
              }, timeout);
            }
          } else {
            setTimeout(() => {
              if (asyncFilter()) {
                this.triggerCycle(el, DEBOUNCE_TRIGGER, currentCycle);
              }
            }, timeout);
          }
          let form = el.form;
          if (form && this.once(form, "bind-debounce")) {
            form.addEventListener("submit", () => {
              Array.from(new FormData(form).entries(), ([name]) => {
                let input = form.querySelector(`[name="${name}"]`);
                this.incCycle(input, DEBOUNCE_TRIGGER);
                this.deletePrivate(input, THROTTLED);
              });
            });
          }
          if (this.once(el, "bind-debounce")) {
            el.addEventListener("blur", () => this.triggerCycle(el, DEBOUNCE_TRIGGER));
          }
      }
    },
    triggerCycle(el, key, currentCycle) {
      let [cycle, trigger] = this.private(el, key);
      if (!currentCycle) {
        currentCycle = cycle;
      }
      if (currentCycle === cycle) {
        this.incCycle(el, key);
        trigger();
      }
    },
    once(el, key) {
      if (this.private(el, key) === true) {
        return false;
      }
      this.putPrivate(el, key, true);
      return true;
    },
    incCycle(el, key, trigger = function() {
    }) {
      let [currentCycle] = this.private(el, key) || [0, trigger];
      currentCycle++;
      this.putPrivate(el, key, [currentCycle, trigger]);
      return currentCycle;
    },
    discardError(container, el, phxFeedbackFor) {
      let field = el.getAttribute && el.getAttribute(phxFeedbackFor);
      let input = field && container.querySelector(`[id="${field}"], [name="${field}"], [name="${field}[]"]`);
      if (!input) {
        return;
      }
      if (!(this.private(input, PHX_HAS_FOCUSED) || this.private(input, PHX_HAS_SUBMITTED))) {
        el.classList.add(PHX_NO_FEEDBACK_CLASS);
      }
    },
    resetForm(form, phxFeedbackFor) {
      Array.from(form.elements).forEach((input) => {
        let query = `[${phxFeedbackFor}="${input.id}"],
                   [${phxFeedbackFor}="${input.name}"],
                   [${phxFeedbackFor}="${input.name.replace(/\[\]$/, "")}"]`;
        this.deletePrivate(input, PHX_HAS_FOCUSED);
        this.deletePrivate(input, PHX_HAS_SUBMITTED);
        this.all(document, query, (feedbackEl) => {
          feedbackEl.classList.add(PHX_NO_FEEDBACK_CLASS);
        });
      });
    },
    showError(inputEl, phxFeedbackFor) {
      if (inputEl.id || inputEl.name) {
        this.all(inputEl.form, `[${phxFeedbackFor}="${inputEl.id}"], [${phxFeedbackFor}="${inputEl.name}"]`, (el) => {
          this.removeClass(el, PHX_NO_FEEDBACK_CLASS);
        });
      }
    },
    isPhxChild(node) {
      return node.getAttribute && node.getAttribute(PHX_PARENT_ID);
    },
    isPhxSticky(node) {
      return node.getAttribute && node.getAttribute(PHX_STICKY) !== null;
    },
    firstPhxChild(el) {
      return this.isPhxChild(el) ? el : this.all(el, `[${PHX_PARENT_ID}]`)[0];
    },
    dispatchEvent(target, name, opts = {}) {
      let bubbles = opts.bubbles === void 0 ? true : !!opts.bubbles;
      let eventOpts = { bubbles, cancelable: true, detail: opts.detail || {} };
      let event = name === "click" ? new MouseEvent("click", eventOpts) : new CustomEvent(name, eventOpts);
      target.dispatchEvent(event);
    },
    cloneNode(node, html) {
      if (typeof html === "undefined") {
        return node.cloneNode(true);
      } else {
        let cloned = node.cloneNode(false);
        cloned.innerHTML = html;
        return cloned;
      }
    },
    mergeAttrs(target, source, opts = {}) {
      let exclude = opts.exclude || [];
      let isIgnored = opts.isIgnored;
      let sourceAttrs = source.attributes;
      for (let i2 = sourceAttrs.length - 1; i2 >= 0; i2--) {
        let name = sourceAttrs[i2].name;
        if (exclude.indexOf(name) < 0) {
          target.setAttribute(name, source.getAttribute(name));
        }
      }
      let targetAttrs = target.attributes;
      for (let i2 = targetAttrs.length - 1; i2 >= 0; i2--) {
        let name = targetAttrs[i2].name;
        if (isIgnored) {
          if (name.startsWith("data-") && !source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        } else {
          if (!source.hasAttribute(name)) {
            target.removeAttribute(name);
          }
        }
      }
    },
    mergeFocusedInput(target, source) {
      if (!(target instanceof HTMLSelectElement)) {
        DOM.mergeAttrs(target, source, { exclude: ["value"] });
      }
      if (source.readOnly) {
        target.setAttribute("readonly", true);
      } else {
        target.removeAttribute("readonly");
      }
    },
    hasSelectionRange(el) {
      return el.setSelectionRange && (el.type === "text" || el.type === "textarea");
    },
    restoreFocus(focused, selectionStart, selectionEnd) {
      if (!DOM.isTextualInput(focused)) {
        return;
      }
      let wasFocused = focused.matches(":focus");
      if (focused.readOnly) {
        focused.blur();
      }
      if (!wasFocused) {
        focused.focus();
      }
      if (this.hasSelectionRange(focused)) {
        focused.setSelectionRange(selectionStart, selectionEnd);
      }
    },
    isFormInput(el) {
      return /^(?:input|select|textarea)$/i.test(el.tagName) && el.type !== "button";
    },
    syncAttrsToProps(el) {
      if (el instanceof HTMLInputElement && CHECKABLE_INPUTS.indexOf(el.type.toLocaleLowerCase()) >= 0) {
        el.checked = el.getAttribute("checked") !== null;
      }
    },
    isTextualInput(el) {
      return FOCUSABLE_INPUTS.indexOf(el.type) >= 0;
    },
    isNowTriggerFormExternal(el, phxTriggerExternal) {
      return el.getAttribute && el.getAttribute(phxTriggerExternal) !== null;
    },
    syncPendingRef(fromEl, toEl, disableWith) {
      let ref = fromEl.getAttribute(PHX_REF);
      if (ref === null) {
        return true;
      }
      let refSrc = fromEl.getAttribute(PHX_REF_SRC);
      if (DOM.isFormInput(fromEl) || fromEl.getAttribute(disableWith) !== null) {
        if (DOM.isUploadInput(fromEl)) {
          DOM.mergeAttrs(fromEl, toEl, { isIgnored: true });
        }
        DOM.putPrivate(fromEl, PHX_REF, toEl);
        return false;
      } else {
        PHX_EVENT_CLASSES.forEach((className) => {
          fromEl.classList.contains(className) && toEl.classList.add(className);
        });
        toEl.setAttribute(PHX_REF, ref);
        toEl.setAttribute(PHX_REF_SRC, refSrc);
        return true;
      }
    },
    cleanChildNodes(container, phxUpdate) {
      if (DOM.isPhxUpdate(container, phxUpdate, ["append", "prepend"])) {
        let toRemove = [];
        container.childNodes.forEach((childNode) => {
          if (!childNode.id) {
            let isEmptyTextNode = childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim() === "";
            if (!isEmptyTextNode) {
              logError(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(childNode.outerHTML || childNode.nodeValue).trim()}"

`);
            }
            toRemove.push(childNode);
          }
        });
        toRemove.forEach((childNode) => childNode.remove());
      }
    },
    replaceRootContainer(container, tagName, attrs) {
      let retainedAttrs = /* @__PURE__ */ new Set(["id", PHX_SESSION, PHX_STATIC, PHX_MAIN, PHX_ROOT_ID]);
      if (container.tagName.toLowerCase() === tagName.toLowerCase()) {
        Array.from(container.attributes).filter((attr) => !retainedAttrs.has(attr.name.toLowerCase())).forEach((attr) => container.removeAttribute(attr.name));
        Object.keys(attrs).filter((name) => !retainedAttrs.has(name.toLowerCase())).forEach((attr) => container.setAttribute(attr, attrs[attr]));
        return container;
      } else {
        let newContainer = document.createElement(tagName);
        Object.keys(attrs).forEach((attr) => newContainer.setAttribute(attr, attrs[attr]));
        retainedAttrs.forEach((attr) => newContainer.setAttribute(attr, container.getAttribute(attr)));
        newContainer.innerHTML = container.innerHTML;
        container.replaceWith(newContainer);
        return newContainer;
      }
    },
    getSticky(el, name, defaultVal) {
      let op = (DOM.private(el, "sticky") || []).find(([existingName]) => name === existingName);
      if (op) {
        let [_name, _op, stashedResult] = op;
        return stashedResult;
      } else {
        return typeof defaultVal === "function" ? defaultVal() : defaultVal;
      }
    },
    deleteSticky(el, name) {
      this.updatePrivate(el, "sticky", [], (ops) => {
        return ops.filter(([existingName, _2]) => existingName !== name);
      });
    },
    putSticky(el, name, op) {
      let stashedResult = op(el);
      this.updatePrivate(el, "sticky", [], (ops) => {
        let existingIndex = ops.findIndex(([existingName]) => name === existingName);
        if (existingIndex >= 0) {
          ops[existingIndex] = [name, op, stashedResult];
        } else {
          ops.push([name, op, stashedResult]);
        }
        return ops;
      });
    },
    applyStickyOperations(el) {
      let ops = DOM.private(el, "sticky");
      if (!ops) {
        return;
      }
      ops.forEach(([name, op, _stashed]) => this.putSticky(el, name, op));
    }
  };
  var dom_default = DOM;
  var UploadEntry = class {
    static isActive(fileEl, file) {
      let isNew = file._phxRef === void 0;
      let activeRefs = fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      let isActive = activeRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return file.size > 0 && (isNew || isActive);
    }
    static isPreflighted(fileEl, file) {
      let preflightedRefs = fileEl.getAttribute(PHX_PREFLIGHTED_REFS).split(",");
      let isPreflighted = preflightedRefs.indexOf(LiveUploader.genFileRef(file)) >= 0;
      return isPreflighted && this.isActive(fileEl, file);
    }
    constructor(fileEl, file, view) {
      this.ref = LiveUploader.genFileRef(file);
      this.fileEl = fileEl;
      this.file = file;
      this.view = view;
      this.meta = null;
      this._isCancelled = false;
      this._isDone = false;
      this._progress = 0;
      this._lastProgressSent = -1;
      this._onDone = function() {
      };
      this._onElUpdated = this.onElUpdated.bind(this);
      this.fileEl.addEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
    }
    metadata() {
      return this.meta;
    }
    progress(progress) {
      this._progress = Math.floor(progress);
      if (this._progress > this._lastProgressSent) {
        if (this._progress >= 100) {
          this._progress = 100;
          this._lastProgressSent = 100;
          this._isDone = true;
          this.view.pushFileProgress(this.fileEl, this.ref, 100, () => {
            LiveUploader.untrackFile(this.fileEl, this.file);
            this._onDone();
          });
        } else {
          this._lastProgressSent = this._progress;
          this.view.pushFileProgress(this.fileEl, this.ref, this._progress);
        }
      }
    }
    cancel() {
      this._isCancelled = true;
      this._isDone = true;
      this._onDone();
    }
    isDone() {
      return this._isDone;
    }
    error(reason = "failed") {
      this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
      this.view.pushFileProgress(this.fileEl, this.ref, { error: reason });
      LiveUploader.clearFiles(this.fileEl);
    }
    onDone(callback) {
      this._onDone = () => {
        this.fileEl.removeEventListener(PHX_LIVE_FILE_UPDATED, this._onElUpdated);
        callback();
      };
    }
    onElUpdated() {
      let activeRefs = this.fileEl.getAttribute(PHX_ACTIVE_ENTRY_REFS).split(",");
      if (activeRefs.indexOf(this.ref) === -1) {
        this.cancel();
      }
    }
    toPreflightPayload() {
      return {
        last_modified: this.file.lastModified,
        name: this.file.name,
        relative_path: this.file.webkitRelativePath,
        size: this.file.size,
        type: this.file.type,
        ref: this.ref
      };
    }
    uploader(uploaders) {
      if (this.meta.uploader) {
        let callback = uploaders[this.meta.uploader] || logError(`no uploader configured for ${this.meta.uploader}`);
        return { name: this.meta.uploader, callback };
      } else {
        return { name: "channel", callback: channelUploader };
      }
    }
    zipPostFlight(resp) {
      this.meta = resp.entries[this.ref];
      if (!this.meta) {
        logError(`no preflight upload response returned with ref ${this.ref}`, { input: this.fileEl, response: resp });
      }
    }
  };
  var liveUploaderFileRef = 0;
  var LiveUploader = class {
    static genFileRef(file) {
      let ref = file._phxRef;
      if (ref !== void 0) {
        return ref;
      } else {
        file._phxRef = (liveUploaderFileRef++).toString();
        return file._phxRef;
      }
    }
    static getEntryDataURL(inputEl, ref, callback) {
      let file = this.activeFiles(inputEl).find((file2) => this.genFileRef(file2) === ref);
      callback(URL.createObjectURL(file));
    }
    static hasUploadsInProgress(formEl) {
      let active = 0;
      dom_default.findUploadInputs(formEl).forEach((input) => {
        if (input.getAttribute(PHX_PREFLIGHTED_REFS) !== input.getAttribute(PHX_DONE_REFS)) {
          active++;
        }
      });
      return active > 0;
    }
    static serializeUploads(inputEl) {
      let files = this.activeFiles(inputEl);
      let fileData = {};
      files.forEach((file) => {
        let entry = { path: inputEl.name };
        let uploadRef = inputEl.getAttribute(PHX_UPLOAD_REF);
        fileData[uploadRef] = fileData[uploadRef] || [];
        entry.ref = this.genFileRef(file);
        entry.last_modified = file.lastModified;
        entry.name = file.name || entry.ref;
        entry.relative_path = file.webkitRelativePath;
        entry.type = file.type;
        entry.size = file.size;
        fileData[uploadRef].push(entry);
      });
      return fileData;
    }
    static clearFiles(inputEl) {
      inputEl.value = null;
      inputEl.removeAttribute(PHX_UPLOAD_REF);
      dom_default.putPrivate(inputEl, "files", []);
    }
    static untrackFile(inputEl, file) {
      dom_default.putPrivate(inputEl, "files", dom_default.private(inputEl, "files").filter((f2) => !Object.is(f2, file)));
    }
    static trackFiles(inputEl, files, dataTransfer) {
      if (inputEl.getAttribute("multiple") !== null) {
        let newFiles = files.filter((file) => !this.activeFiles(inputEl).find((f2) => Object.is(f2, file)));
        dom_default.putPrivate(inputEl, "files", this.activeFiles(inputEl).concat(newFiles));
        inputEl.value = null;
      } else {
        if (dataTransfer && dataTransfer.files.length > 0) {
          inputEl.files = dataTransfer.files;
        }
        dom_default.putPrivate(inputEl, "files", files);
      }
    }
    static activeFileInputs(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((el) => el.files && this.activeFiles(el).length > 0);
    }
    static activeFiles(input) {
      return (dom_default.private(input, "files") || []).filter((f2) => UploadEntry.isActive(input, f2));
    }
    static inputsAwaitingPreflight(formEl) {
      let fileInputs = dom_default.findUploadInputs(formEl);
      return Array.from(fileInputs).filter((input) => this.filesAwaitingPreflight(input).length > 0);
    }
    static filesAwaitingPreflight(input) {
      return this.activeFiles(input).filter((f2) => !UploadEntry.isPreflighted(input, f2));
    }
    constructor(inputEl, view, onComplete) {
      this.view = view;
      this.onComplete = onComplete;
      this._entries = Array.from(LiveUploader.filesAwaitingPreflight(inputEl) || []).map((file) => new UploadEntry(inputEl, file, view));
      this.numEntriesInProgress = this._entries.length;
    }
    entries() {
      return this._entries;
    }
    initAdapterUpload(resp, onError, liveSocket2) {
      this._entries = this._entries.map((entry) => {
        entry.zipPostFlight(resp);
        entry.onDone(() => {
          this.numEntriesInProgress--;
          if (this.numEntriesInProgress === 0) {
            this.onComplete();
          }
        });
        return entry;
      });
      let groupedEntries = this._entries.reduce((acc, entry) => {
        let { name, callback } = entry.uploader(liveSocket2.uploaders);
        acc[name] = acc[name] || { callback, entries: [] };
        acc[name].entries.push(entry);
        return acc;
      }, {});
      for (let name in groupedEntries) {
        let { callback, entries } = groupedEntries[name];
        callback(entries, onError, resp, liveSocket2);
      }
    }
  };
  var ARIA = {
    focusMain() {
      let target = document.querySelector("main h1, main, h1");
      if (target) {
        let origTabIndex = target.tabIndex;
        target.tabIndex = -1;
        target.focus();
        target.tabIndex = origTabIndex;
      }
    },
    anyOf(instance, classes) {
      return classes.find((name) => instance instanceof name);
    },
    isFocusable(el, interactiveOnly) {
      return el instanceof HTMLAnchorElement && el.rel !== "ignore" || el instanceof HTMLAreaElement && el.href !== void 0 || !el.disabled && this.anyOf(el, [HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement, HTMLButtonElement]) || el instanceof HTMLIFrameElement || (el.tabIndex > 0 || !interactiveOnly && el.tabIndex === 0 && el.getAttribute("tabindex") !== null && el.getAttribute("aria-hidden") !== "true");
    },
    attemptFocus(el, interactiveOnly) {
      if (this.isFocusable(el, interactiveOnly)) {
        try {
          el.focus();
        } catch (e6) {
        }
      }
      return !!document.activeElement && document.activeElement.isSameNode(el);
    },
    focusFirstInteractive(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child, true) || this.focusFirstInteractive(child, true)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusFirst(el) {
      let child = el.firstElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusFirst(child)) {
          return true;
        }
        child = child.nextElementSibling;
      }
    },
    focusLast(el) {
      let child = el.lastElementChild;
      while (child) {
        if (this.attemptFocus(child) || this.focusLast(child)) {
          return true;
        }
        child = child.previousElementSibling;
      }
    }
  };
  var aria_default = ARIA;
  var Hooks = {
    LiveFileUpload: {
      activeRefs() {
        return this.el.getAttribute(PHX_ACTIVE_ENTRY_REFS);
      },
      preflightedRefs() {
        return this.el.getAttribute(PHX_PREFLIGHTED_REFS);
      },
      mounted() {
        this.preflightedWas = this.preflightedRefs();
      },
      updated() {
        let newPreflights = this.preflightedRefs();
        if (this.preflightedWas !== newPreflights) {
          this.preflightedWas = newPreflights;
          if (newPreflights === "") {
            this.__view.cancelSubmit(this.el.form);
          }
        }
        if (this.activeRefs() === "") {
          this.el.value = null;
        }
        this.el.dispatchEvent(new CustomEvent(PHX_LIVE_FILE_UPDATED));
      }
    },
    LiveImgPreview: {
      mounted() {
        this.ref = this.el.getAttribute("data-phx-entry-ref");
        this.inputEl = document.getElementById(this.el.getAttribute(PHX_UPLOAD_REF));
        LiveUploader.getEntryDataURL(this.inputEl, this.ref, (url) => {
          this.url = url;
          this.el.src = url;
        });
      },
      destroyed() {
        URL.revokeObjectURL(this.url);
      }
    },
    FocusWrap: {
      mounted() {
        this.focusStart = this.el.firstElementChild;
        this.focusEnd = this.el.lastElementChild;
        this.focusStart.addEventListener("focus", () => aria_default.focusLast(this.el));
        this.focusEnd.addEventListener("focus", () => aria_default.focusFirst(this.el));
        this.el.addEventListener("phx:show-end", () => this.el.focus());
        if (window.getComputedStyle(this.el).display !== "none") {
          aria_default.focusFirst(this.el);
        }
      }
    }
  };
  var hooks_default = Hooks;
  var DOMPostMorphRestorer = class {
    constructor(containerBefore, containerAfter, updateType) {
      let idsBefore = /* @__PURE__ */ new Set();
      let idsAfter = new Set([...containerAfter.children].map((child) => child.id));
      let elementsToModify = [];
      Array.from(containerBefore.children).forEach((child) => {
        if (child.id) {
          idsBefore.add(child.id);
          if (idsAfter.has(child.id)) {
            let previousElementId = child.previousElementSibling && child.previousElementSibling.id;
            elementsToModify.push({ elementId: child.id, previousElementId });
          }
        }
      });
      this.containerId = containerAfter.id;
      this.updateType = updateType;
      this.elementsToModify = elementsToModify;
      this.elementIdsToAdd = [...idsAfter].filter((id) => !idsBefore.has(id));
    }
    perform() {
      let container = dom_default.byId(this.containerId);
      this.elementsToModify.forEach((elementToModify) => {
        if (elementToModify.previousElementId) {
          maybe(document.getElementById(elementToModify.previousElementId), (previousElem) => {
            maybe(document.getElementById(elementToModify.elementId), (elem) => {
              let isInRightPlace = elem.previousElementSibling && elem.previousElementSibling.id == previousElem.id;
              if (!isInRightPlace) {
                previousElem.insertAdjacentElement("afterend", elem);
              }
            });
          });
        } else {
          maybe(document.getElementById(elementToModify.elementId), (elem) => {
            let isInRightPlace = elem.previousElementSibling == null;
            if (!isInRightPlace) {
              container.insertAdjacentElement("afterbegin", elem);
            }
          });
        }
      });
      if (this.updateType == "prepend") {
        this.elementIdsToAdd.reverse().forEach((elemId) => {
          maybe(document.getElementById(elemId), (elem) => container.insertAdjacentElement("afterbegin", elem));
        });
      }
    }
  };
  var DOCUMENT_FRAGMENT_NODE = 11;
  function morphAttrs(fromNode, toNode) {
    var toNodeAttrs = toNode.attributes;
    var attr;
    var attrName;
    var attrNamespaceURI;
    var attrValue;
    var fromValue;
    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {
      return;
    }
    for (var i2 = toNodeAttrs.length - 1; i2 >= 0; i2--) {
      attr = toNodeAttrs[i2];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      attrValue = attr.value;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);
        if (fromValue !== attrValue) {
          if (attr.prefix === "xmlns") {
            attrName = attr.name;
          }
          fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);
        }
      } else {
        fromValue = fromNode.getAttribute(attrName);
        if (fromValue !== attrValue) {
          fromNode.setAttribute(attrName, attrValue);
        }
      }
    }
    var fromNodeAttrs = fromNode.attributes;
    for (var d2 = fromNodeAttrs.length - 1; d2 >= 0; d2--) {
      attr = fromNodeAttrs[d2];
      attrName = attr.name;
      attrNamespaceURI = attr.namespaceURI;
      if (attrNamespaceURI) {
        attrName = attr.localName || attrName;
        if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {
          fromNode.removeAttributeNS(attrNamespaceURI, attrName);
        }
      } else {
        if (!toNode.hasAttribute(attrName)) {
          fromNode.removeAttribute(attrName);
        }
      }
    }
  }
  var range;
  var NS_XHTML = "http://www.w3.org/1999/xhtml";
  var doc = typeof document === "undefined" ? void 0 : document;
  var HAS_TEMPLATE_SUPPORT = !!doc && "content" in doc.createElement("template");
  var HAS_RANGE_SUPPORT = !!doc && doc.createRange && "createContextualFragment" in doc.createRange();
  function createFragmentFromTemplate(str) {
    var template = doc.createElement("template");
    template.innerHTML = str;
    return template.content.childNodes[0];
  }
  function createFragmentFromRange(str) {
    if (!range) {
      range = doc.createRange();
      range.selectNode(doc.body);
    }
    var fragment = range.createContextualFragment(str);
    return fragment.childNodes[0];
  }
  function createFragmentFromWrap(str) {
    var fragment = doc.createElement("body");
    fragment.innerHTML = str;
    return fragment.childNodes[0];
  }
  function toElement(str) {
    str = str.trim();
    if (HAS_TEMPLATE_SUPPORT) {
      return createFragmentFromTemplate(str);
    } else if (HAS_RANGE_SUPPORT) {
      return createFragmentFromRange(str);
    }
    return createFragmentFromWrap(str);
  }
  function compareNodeNames(fromEl, toEl) {
    var fromNodeName = fromEl.nodeName;
    var toNodeName = toEl.nodeName;
    var fromCodeStart, toCodeStart;
    if (fromNodeName === toNodeName) {
      return true;
    }
    fromCodeStart = fromNodeName.charCodeAt(0);
    toCodeStart = toNodeName.charCodeAt(0);
    if (fromCodeStart <= 90 && toCodeStart >= 97) {
      return fromNodeName === toNodeName.toUpperCase();
    } else if (toCodeStart <= 90 && fromCodeStart >= 97) {
      return toNodeName === fromNodeName.toUpperCase();
    } else {
      return false;
    }
  }
  function createElementNS(name, namespaceURI) {
    return !namespaceURI || namespaceURI === NS_XHTML ? doc.createElement(name) : doc.createElementNS(namespaceURI, name);
  }
  function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while (curChild) {
      var nextChild = curChild.nextSibling;
      toEl.appendChild(curChild);
      curChild = nextChild;
    }
    return toEl;
  }
  function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
      fromEl[name] = toEl[name];
      if (fromEl[name]) {
        fromEl.setAttribute(name, "");
      } else {
        fromEl.removeAttribute(name);
      }
    }
  }
  var specialElHandlers = {
    OPTION: function(fromEl, toEl) {
      var parentNode = fromEl.parentNode;
      if (parentNode) {
        var parentName = parentNode.nodeName.toUpperCase();
        if (parentName === "OPTGROUP") {
          parentNode = parentNode.parentNode;
          parentName = parentNode && parentNode.nodeName.toUpperCase();
        }
        if (parentName === "SELECT" && !parentNode.hasAttribute("multiple")) {
          if (fromEl.hasAttribute("selected") && !toEl.selected) {
            fromEl.setAttribute("selected", "selected");
            fromEl.removeAttribute("selected");
          }
          parentNode.selectedIndex = -1;
        }
      }
      syncBooleanAttrProp(fromEl, toEl, "selected");
    },
    INPUT: function(fromEl, toEl) {
      syncBooleanAttrProp(fromEl, toEl, "checked");
      syncBooleanAttrProp(fromEl, toEl, "disabled");
      if (fromEl.value !== toEl.value) {
        fromEl.value = toEl.value;
      }
      if (!toEl.hasAttribute("value")) {
        fromEl.removeAttribute("value");
      }
    },
    TEXTAREA: function(fromEl, toEl) {
      var newValue = toEl.value;
      if (fromEl.value !== newValue) {
        fromEl.value = newValue;
      }
      var firstChild = fromEl.firstChild;
      if (firstChild) {
        var oldValue = firstChild.nodeValue;
        if (oldValue == newValue || !newValue && oldValue == fromEl.placeholder) {
          return;
        }
        firstChild.nodeValue = newValue;
      }
    },
    SELECT: function(fromEl, toEl) {
      if (!toEl.hasAttribute("multiple")) {
        var selectedIndex = -1;
        var i2 = 0;
        var curChild = fromEl.firstChild;
        var optgroup;
        var nodeName;
        while (curChild) {
          nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();
          if (nodeName === "OPTGROUP") {
            optgroup = curChild;
            curChild = optgroup.firstChild;
          } else {
            if (nodeName === "OPTION") {
              if (curChild.hasAttribute("selected")) {
                selectedIndex = i2;
                break;
              }
              i2++;
            }
            curChild = curChild.nextSibling;
            if (!curChild && optgroup) {
              curChild = optgroup.nextSibling;
              optgroup = null;
            }
          }
        }
        fromEl.selectedIndex = selectedIndex;
      }
    }
  };
  var ELEMENT_NODE = 1;
  var DOCUMENT_FRAGMENT_NODE$1 = 11;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  function noop() {
  }
  function defaultGetNodeKey(node) {
    if (node) {
      return node.getAttribute && node.getAttribute("id") || node.id;
    }
  }
  function morphdomFactory(morphAttrs2) {
    return function morphdom2(fromNode, toNode, options) {
      if (!options) {
        options = {};
      }
      if (typeof toNode === "string") {
        if (fromNode.nodeName === "#document" || fromNode.nodeName === "HTML" || fromNode.nodeName === "BODY") {
          var toNodeHtml = toNode;
          toNode = doc.createElement("html");
          toNode.innerHTML = toNodeHtml;
        } else {
          toNode = toElement(toNode);
        }
      } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
        toNode = toNode.firstElementChild;
      }
      var getNodeKey = options.getNodeKey || defaultGetNodeKey;
      var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;
      var onNodeAdded = options.onNodeAdded || noop;
      var onBeforeElUpdated = options.onBeforeElUpdated || noop;
      var onElUpdated = options.onElUpdated || noop;
      var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
      var onNodeDiscarded = options.onNodeDiscarded || noop;
      var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;
      var skipFromChildren = options.skipFromChildren || noop;
      var addChild = options.addChild || function(parent, child) {
        return parent.appendChild(child);
      };
      var childrenOnly = options.childrenOnly === true;
      var fromNodesLookup = /* @__PURE__ */ Object.create(null);
      var keyedRemovalList = [];
      function addKeyedRemoval(key) {
        keyedRemovalList.push(key);
      }
      function walkDiscardedChildNodes(node, skipKeyedNodes) {
        if (node.nodeType === ELEMENT_NODE) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = void 0;
            if (skipKeyedNodes && (key = getNodeKey(curChild))) {
              addKeyedRemoval(key);
            } else {
              onNodeDiscarded(curChild);
              if (curChild.firstChild) {
                walkDiscardedChildNodes(curChild, skipKeyedNodes);
              }
            }
            curChild = curChild.nextSibling;
          }
        }
      }
      function removeNode(node, parentNode, skipKeyedNodes) {
        if (onBeforeNodeDiscarded(node) === false) {
          return;
        }
        if (parentNode) {
          parentNode.removeChild(node);
        }
        onNodeDiscarded(node);
        walkDiscardedChildNodes(node, skipKeyedNodes);
      }
      function indexTree(node) {
        if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {
          var curChild = node.firstChild;
          while (curChild) {
            var key = getNodeKey(curChild);
            if (key) {
              fromNodesLookup[key] = curChild;
            }
            indexTree(curChild);
            curChild = curChild.nextSibling;
          }
        }
      }
      indexTree(fromNode);
      function handleNodeAdded(el) {
        onNodeAdded(el);
        var curChild = el.firstChild;
        while (curChild) {
          var nextSibling = curChild.nextSibling;
          var key = getNodeKey(curChild);
          if (key) {
            var unmatchedFromEl = fromNodesLookup[key];
            if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {
              curChild.parentNode.replaceChild(unmatchedFromEl, curChild);
              morphEl(unmatchedFromEl, curChild);
            } else {
              handleNodeAdded(curChild);
            }
          } else {
            handleNodeAdded(curChild);
          }
          curChild = nextSibling;
        }
      }
      function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {
        while (curFromNodeChild) {
          var fromNextSibling = curFromNodeChild.nextSibling;
          if (curFromNodeKey = getNodeKey(curFromNodeChild)) {
            addKeyedRemoval(curFromNodeKey);
          } else {
            removeNode(curFromNodeChild, fromEl, true);
          }
          curFromNodeChild = fromNextSibling;
        }
      }
      function morphEl(fromEl, toEl, childrenOnly2) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
          delete fromNodesLookup[toElKey];
        }
        if (!childrenOnly2) {
          if (onBeforeElUpdated(fromEl, toEl) === false) {
            return;
          }
          morphAttrs2(fromEl, toEl);
          onElUpdated(fromEl);
          if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {
            return;
          }
        }
        if (fromEl.nodeName !== "TEXTAREA") {
          morphChildren(fromEl, toEl);
        } else {
          specialElHandlers.TEXTAREA(fromEl, toEl);
        }
      }
      function morphChildren(fromEl, toEl) {
        var skipFrom = skipFromChildren(fromEl);
        var curToNodeChild = toEl.firstChild;
        var curFromNodeChild = fromEl.firstChild;
        var curToNodeKey;
        var curFromNodeKey;
        var fromNextSibling;
        var toNextSibling;
        var matchingFromEl;
        outer:
          while (curToNodeChild) {
            toNextSibling = curToNodeChild.nextSibling;
            curToNodeKey = getNodeKey(curToNodeChild);
            while (!skipFrom && curFromNodeChild) {
              fromNextSibling = curFromNodeChild.nextSibling;
              if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              curFromNodeKey = getNodeKey(curFromNodeChild);
              var curFromNodeType = curFromNodeChild.nodeType;
              var isCompatible = void 0;
              if (curFromNodeType === curToNodeChild.nodeType) {
                if (curFromNodeType === ELEMENT_NODE) {
                  if (curToNodeKey) {
                    if (curToNodeKey !== curFromNodeKey) {
                      if (matchingFromEl = fromNodesLookup[curToNodeKey]) {
                        if (fromNextSibling === matchingFromEl) {
                          isCompatible = false;
                        } else {
                          fromEl.insertBefore(matchingFromEl, curFromNodeChild);
                          if (curFromNodeKey) {
                            addKeyedRemoval(curFromNodeKey);
                          } else {
                            removeNode(curFromNodeChild, fromEl, true);
                          }
                          curFromNodeChild = matchingFromEl;
                        }
                      } else {
                        isCompatible = false;
                      }
                    }
                  } else if (curFromNodeKey) {
                    isCompatible = false;
                  }
                  isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);
                  if (isCompatible) {
                    morphEl(curFromNodeChild, curToNodeChild);
                  }
                } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {
                  isCompatible = true;
                  if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {
                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                  }
                }
              }
              if (isCompatible) {
                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
                continue outer;
              }
              if (curFromNodeKey) {
                addKeyedRemoval(curFromNodeKey);
              } else {
                removeNode(curFromNodeChild, fromEl, true);
              }
              curFromNodeChild = fromNextSibling;
            }
            if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {
              if (!skipFrom) {
                addChild(fromEl, matchingFromEl);
              }
              morphEl(matchingFromEl, curToNodeChild);
            } else {
              var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);
              if (onBeforeNodeAddedResult !== false) {
                if (onBeforeNodeAddedResult) {
                  curToNodeChild = onBeforeNodeAddedResult;
                }
                if (curToNodeChild.actualize) {
                  curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);
                }
                addChild(fromEl, curToNodeChild);
                handleNodeAdded(curToNodeChild);
              }
            }
            curToNodeChild = toNextSibling;
            curFromNodeChild = fromNextSibling;
          }
        cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);
        var specialElHandler = specialElHandlers[fromEl.nodeName];
        if (specialElHandler) {
          specialElHandler(fromEl, toEl);
        }
      }
      var morphedNode = fromNode;
      var morphedNodeType = morphedNode.nodeType;
      var toNodeType = toNode.nodeType;
      if (!childrenOnly) {
        if (morphedNodeType === ELEMENT_NODE) {
          if (toNodeType === ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
              onNodeDiscarded(fromNode);
              morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));
            }
          } else {
            morphedNode = toNode;
          }
        } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) {
          if (toNodeType === morphedNodeType) {
            if (morphedNode.nodeValue !== toNode.nodeValue) {
              morphedNode.nodeValue = toNode.nodeValue;
            }
            return morphedNode;
          } else {
            morphedNode = toNode;
          }
        }
      }
      if (morphedNode === toNode) {
        onNodeDiscarded(fromNode);
      } else {
        if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {
          return;
        }
        morphEl(morphedNode, toNode, childrenOnly);
        if (keyedRemovalList) {
          for (var i2 = 0, len = keyedRemovalList.length; i2 < len; i2++) {
            var elToRemove = fromNodesLookup[keyedRemovalList[i2]];
            if (elToRemove) {
              removeNode(elToRemove, elToRemove.parentNode, false);
            }
          }
        }
      }
      if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        if (morphedNode.actualize) {
          morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);
        }
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
      }
      return morphedNode;
    };
  }
  var morphdom = morphdomFactory(morphAttrs);
  var morphdom_esm_default = morphdom;
  var DOMPatch = class {
    static patchEl(fromEl, toEl, activeElement) {
      morphdom_esm_default(fromEl, toEl, {
        childrenOnly: false,
        onBeforeElUpdated: (fromEl2, toEl2) => {
          if (activeElement && activeElement.isSameNode(fromEl2) && dom_default.isFormInput(fromEl2)) {
            dom_default.mergeFocusedInput(fromEl2, toEl2);
            return false;
          }
        }
      });
    }
    constructor(view, container, id, html, streams, targetCID) {
      this.view = view;
      this.liveSocket = view.liveSocket;
      this.container = container;
      this.id = id;
      this.rootID = view.root.id;
      this.html = html;
      this.streams = streams;
      this.streamInserts = {};
      this.targetCID = targetCID;
      this.cidPatch = isCid(this.targetCID);
      this.pendingRemoves = [];
      this.phxRemove = this.liveSocket.binding("remove");
      this.callbacks = {
        beforeadded: [],
        beforeupdated: [],
        beforephxChildAdded: [],
        afteradded: [],
        afterupdated: [],
        afterdiscarded: [],
        afterphxChildAdded: [],
        aftertransitionsDiscarded: []
      };
    }
    before(kind, callback) {
      this.callbacks[`before${kind}`].push(callback);
    }
    after(kind, callback) {
      this.callbacks[`after${kind}`].push(callback);
    }
    trackBefore(kind, ...args) {
      this.callbacks[`before${kind}`].forEach((callback) => callback(...args));
    }
    trackAfter(kind, ...args) {
      this.callbacks[`after${kind}`].forEach((callback) => callback(...args));
    }
    markPrunableContentForRemoval() {
      let phxUpdate = this.liveSocket.binding(PHX_UPDATE);
      dom_default.all(this.container, `[${phxUpdate}=${PHX_STREAM}]`, (el) => el.innerHTML = "");
      dom_default.all(this.container, `[${phxUpdate}=append] > *, [${phxUpdate}=prepend] > *`, (el) => {
        el.setAttribute(PHX_PRUNE, "");
      });
    }
    perform() {
      let { view, liveSocket: liveSocket2, container, html } = this;
      let targetContainer = this.isCIDPatch() ? this.targetCIDContainer(html) : container;
      if (this.isCIDPatch() && !targetContainer) {
        return;
      }
      let focused = liveSocket2.getActiveElement();
      let { selectionStart, selectionEnd } = focused && dom_default.hasSelectionRange(focused) ? focused : {};
      let phxUpdate = liveSocket2.binding(PHX_UPDATE);
      let phxFeedbackFor = liveSocket2.binding(PHX_FEEDBACK_FOR);
      let disableWith = liveSocket2.binding(PHX_DISABLE_WITH);
      let phxTriggerExternal = liveSocket2.binding(PHX_TRIGGER_ACTION);
      let added = [];
      let updates = [];
      let appendPrependUpdates = [];
      let externalFormTriggered = null;
      let diffHTML = liveSocket2.time("premorph container prep", () => {
        return this.buildDiffHTML(container, html, phxUpdate, targetContainer);
      });
      this.trackBefore("added", container);
      this.trackBefore("updated", container, container);
      liveSocket2.time("morphdom", () => {
        this.streams.forEach(([inserts, deleteIds]) => {
          this.streamInserts = Object.assign(this.streamInserts, inserts);
          deleteIds.forEach((id) => {
            let child = container.querySelector(`[id="${id}"]`);
            if (child) {
              if (!this.maybePendingRemove(child)) {
                child.remove();
                this.onNodeDiscarded(child);
              }
            }
          });
        });
        morphdom_esm_default(targetContainer, diffHTML, {
          childrenOnly: targetContainer.getAttribute(PHX_COMPONENT) === null,
          getNodeKey: (node) => {
            return dom_default.isPhxDestroyed(node) ? null : node.id;
          },
          skipFromChildren: (from) => {
            return from.getAttribute(phxUpdate) === PHX_STREAM;
          },
          addChild: (parent, child) => {
            let streamAt = child.id ? this.streamInserts[child.id] : void 0;
            if (streamAt === void 0) {
              return parent.appendChild(child);
            }
            if (streamAt === 0) {
              parent.insertAdjacentElement("afterbegin", child);
            } else if (streamAt === -1) {
              parent.appendChild(child);
            } else if (streamAt > 0) {
              let sibling = Array.from(parent.children)[streamAt];
              parent.insertBefore(child, sibling);
            }
          },
          onBeforeNodeAdded: (el) => {
            this.trackBefore("added", el);
            return el;
          },
          onNodeAdded: (el) => {
            if (el instanceof HTMLImageElement && el.srcset) {
              el.srcset = el.srcset;
            } else if (el instanceof HTMLVideoElement && el.autoplay) {
              el.play();
            }
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            dom_default.discardError(targetContainer, el, phxFeedbackFor);
            if (dom_default.isPhxChild(el) && view.ownsElement(el) || dom_default.isPhxSticky(el) && view.ownsElement(el.parentNode)) {
              this.trackAfter("phxChildAdded", el);
            }
            added.push(el);
          },
          onNodeDiscarded: (el) => this.onNodeDiscarded(el),
          onBeforeNodeDiscarded: (el) => {
            if (el.getAttribute && el.getAttribute(PHX_PRUNE) !== null) {
              return true;
            }
            if (el.parentElement !== null && el.id && dom_default.isPhxUpdate(el.parentElement, phxUpdate, [PHX_STREAM, "append", "prepend"])) {
              return false;
            }
            if (this.maybePendingRemove(el)) {
              return false;
            }
            if (this.skipCIDSibling(el)) {
              return false;
            }
            return true;
          },
          onElUpdated: (el) => {
            if (dom_default.isNowTriggerFormExternal(el, phxTriggerExternal)) {
              externalFormTriggered = el;
            }
            updates.push(el);
            this.maybeReOrderStream(el);
          },
          onBeforeElUpdated: (fromEl, toEl) => {
            dom_default.cleanChildNodes(toEl, phxUpdate);
            if (this.skipCIDSibling(toEl)) {
              return false;
            }
            if (dom_default.isPhxSticky(fromEl)) {
              return false;
            }
            if (dom_default.isIgnored(fromEl, phxUpdate) || fromEl.form && fromEl.form.isSameNode(externalFormTriggered)) {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeAttrs(fromEl, toEl, { isIgnored: true });
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (fromEl.type === "number" && (fromEl.validity && fromEl.validity.badInput)) {
              return false;
            }
            if (!dom_default.syncPendingRef(fromEl, toEl, disableWith)) {
              if (dom_default.isUploadInput(fromEl)) {
                this.trackBefore("updated", fromEl, toEl);
                updates.push(fromEl);
              }
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            if (dom_default.isPhxChild(toEl)) {
              let prevSession = fromEl.getAttribute(PHX_SESSION);
              dom_default.mergeAttrs(fromEl, toEl, { exclude: [PHX_STATIC] });
              if (prevSession !== "") {
                fromEl.setAttribute(PHX_SESSION, prevSession);
              }
              fromEl.setAttribute(PHX_ROOT_ID, this.rootID);
              dom_default.applyStickyOperations(fromEl);
              return false;
            }
            dom_default.copyPrivates(toEl, fromEl);
            dom_default.discardError(targetContainer, toEl, phxFeedbackFor);
            let isFocusedFormEl = focused && fromEl.isSameNode(focused) && dom_default.isFormInput(fromEl);
            if (isFocusedFormEl && fromEl.type !== "hidden") {
              this.trackBefore("updated", fromEl, toEl);
              dom_default.mergeFocusedInput(fromEl, toEl);
              dom_default.syncAttrsToProps(fromEl);
              updates.push(fromEl);
              dom_default.applyStickyOperations(fromEl);
              return false;
            } else {
              if (dom_default.isPhxUpdate(toEl, phxUpdate, ["append", "prepend"])) {
                appendPrependUpdates.push(new DOMPostMorphRestorer(fromEl, toEl, toEl.getAttribute(phxUpdate)));
              }
              dom_default.syncAttrsToProps(toEl);
              dom_default.applyStickyOperations(toEl);
              this.trackBefore("updated", fromEl, toEl);
              return true;
            }
          }
        });
      });
      if (liveSocket2.isDebugEnabled()) {
        detectDuplicateIds();
      }
      if (appendPrependUpdates.length > 0) {
        liveSocket2.time("post-morph append/prepend restoration", () => {
          appendPrependUpdates.forEach((update) => update.perform());
        });
      }
      liveSocket2.silenceEvents(() => dom_default.restoreFocus(focused, selectionStart, selectionEnd));
      dom_default.dispatchEvent(document, "phx:update");
      added.forEach((el) => this.trackAfter("added", el));
      updates.forEach((el) => this.trackAfter("updated", el));
      this.transitionPendingRemoves();
      if (externalFormTriggered) {
        liveSocket2.unload();
        externalFormTriggered.submit();
      }
      return true;
    }
    onNodeDiscarded(el) {
      if (dom_default.isPhxChild(el) || dom_default.isPhxSticky(el)) {
        this.liveSocket.destroyViewByEl(el);
      }
      this.trackAfter("discarded", el);
    }
    maybePendingRemove(node) {
      if (node.getAttribute && node.getAttribute(this.phxRemove) !== null) {
        this.pendingRemoves.push(node);
        return true;
      } else {
        return false;
      }
    }
    maybeReOrderStream(el) {
      let streamAt = el.id ? this.streamInserts[el.id] : void 0;
      if (streamAt === void 0) {
        return;
      }
      if (streamAt === 0) {
        el.parentElement.insertBefore(el, el.parentElement.firstElementChild);
      } else if (streamAt > 0) {
        let children = Array.from(el.parentElement.children);
        let oldIndex = children.indexOf(el);
        if (streamAt >= children.length - 1) {
          el.parentElement.appendChild(el);
        } else {
          let sibling = children[streamAt];
          if (oldIndex > streamAt) {
            el.parentElement.insertBefore(el, sibling);
          } else {
            el.parentElement.insertBefore(el, sibling.nextElementSibling);
          }
        }
      }
    }
    transitionPendingRemoves() {
      let { pendingRemoves, liveSocket: liveSocket2 } = this;
      if (pendingRemoves.length > 0) {
        liveSocket2.transitionRemoves(pendingRemoves);
        liveSocket2.requestDOMUpdate(() => {
          pendingRemoves.forEach((el) => {
            let child = dom_default.firstPhxChild(el);
            if (child) {
              liveSocket2.destroyViewByEl(child);
            }
            el.remove();
          });
          this.trackAfter("transitionsDiscarded", pendingRemoves);
        });
      }
    }
    isCIDPatch() {
      return this.cidPatch;
    }
    skipCIDSibling(el) {
      return el.nodeType === Node.ELEMENT_NODE && el.getAttribute(PHX_SKIP) !== null;
    }
    targetCIDContainer(html) {
      if (!this.isCIDPatch()) {
        return;
      }
      let [first, ...rest] = dom_default.findComponentNodeList(this.container, this.targetCID);
      if (rest.length === 0 && dom_default.childNodeLength(html) === 1) {
        return first;
      } else {
        return first && first.parentNode;
      }
    }
    buildDiffHTML(container, html, phxUpdate, targetContainer) {
      let isCIDPatch = this.isCIDPatch();
      let isCIDWithSingleRoot = isCIDPatch && targetContainer.getAttribute(PHX_COMPONENT) === this.targetCID.toString();
      if (!isCIDPatch || isCIDWithSingleRoot) {
        return html;
      } else {
        let diffContainer = null;
        let template = document.createElement("template");
        diffContainer = dom_default.cloneNode(targetContainer);
        let [firstComponent, ...rest] = dom_default.findComponentNodeList(diffContainer, this.targetCID);
        template.innerHTML = html;
        rest.forEach((el) => el.remove());
        Array.from(diffContainer.childNodes).forEach((child) => {
          if (child.id && child.nodeType === Node.ELEMENT_NODE && child.getAttribute(PHX_COMPONENT) !== this.targetCID.toString()) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
        });
        Array.from(template.content.childNodes).forEach((el) => diffContainer.insertBefore(el, firstComponent));
        firstComponent.remove();
        return diffContainer.outerHTML;
      }
    }
    indexOf(parent, child) {
      return Array.from(parent.children).indexOf(child);
    }
  };
  var Rendered = class {
    static extract(diff) {
      let { [REPLY]: reply, [EVENTS]: events, [TITLE]: title } = diff;
      delete diff[REPLY];
      delete diff[EVENTS];
      delete diff[TITLE];
      return { diff, title, reply: reply || null, events: events || [] };
    }
    constructor(viewId, rendered) {
      this.viewId = viewId;
      this.rendered = {};
      this.mergeDiff(rendered);
    }
    parentViewId() {
      return this.viewId;
    }
    toString(onlyCids) {
      let [str, streams] = this.recursiveToString(this.rendered, this.rendered[COMPONENTS], onlyCids);
      return [str, streams];
    }
    recursiveToString(rendered, components = rendered[COMPONENTS], onlyCids) {
      onlyCids = onlyCids ? new Set(onlyCids) : null;
      let output = { buffer: "", components, onlyCids, streams: /* @__PURE__ */ new Set() };
      this.toOutputBuffer(rendered, null, output);
      return [output.buffer, output.streams];
    }
    componentCIDs(diff) {
      return Object.keys(diff[COMPONENTS] || {}).map((i2) => parseInt(i2));
    }
    isComponentOnlyDiff(diff) {
      if (!diff[COMPONENTS]) {
        return false;
      }
      return Object.keys(diff).length === 1;
    }
    getComponent(diff, cid) {
      return diff[COMPONENTS][cid];
    }
    mergeDiff(diff) {
      let newc = diff[COMPONENTS];
      let cache = {};
      delete diff[COMPONENTS];
      this.rendered = this.mutableMerge(this.rendered, diff);
      this.rendered[COMPONENTS] = this.rendered[COMPONENTS] || {};
      if (newc) {
        let oldc = this.rendered[COMPONENTS];
        for (let cid in newc) {
          newc[cid] = this.cachedFindComponent(cid, newc[cid], oldc, newc, cache);
        }
        for (let cid in newc) {
          oldc[cid] = newc[cid];
        }
        diff[COMPONENTS] = newc;
      }
    }
    cachedFindComponent(cid, cdiff, oldc, newc, cache) {
      if (cache[cid]) {
        return cache[cid];
      } else {
        let ndiff, stat, scid = cdiff[STATIC];
        if (isCid(scid)) {
          let tdiff;
          if (scid > 0) {
            tdiff = this.cachedFindComponent(scid, newc[scid], oldc, newc, cache);
          } else {
            tdiff = oldc[-scid];
          }
          stat = tdiff[STATIC];
          ndiff = this.cloneMerge(tdiff, cdiff);
          ndiff[STATIC] = stat;
        } else {
          ndiff = cdiff[STATIC] !== void 0 ? cdiff : this.cloneMerge(oldc[cid] || {}, cdiff);
        }
        cache[cid] = ndiff;
        return ndiff;
      }
    }
    mutableMerge(target, source) {
      if (source[STATIC] !== void 0) {
        return source;
      } else {
        this.doMutableMerge(target, source);
        return target;
      }
    }
    doMutableMerge(target, source) {
      for (let key in source) {
        let val = source[key];
        let targetVal = target[key];
        let isObjVal = isObject(val);
        if (isObjVal && val[STATIC] === void 0 && isObject(targetVal)) {
          this.doMutableMerge(targetVal, val);
        } else {
          target[key] = val;
        }
      }
    }
    cloneMerge(target, source) {
      let merged = __spreadValues(__spreadValues({}, target), source);
      for (let key in merged) {
        let val = source[key];
        let targetVal = target[key];
        if (isObject(val) && val[STATIC] === void 0 && isObject(targetVal)) {
          merged[key] = this.cloneMerge(targetVal, val);
        }
      }
      return merged;
    }
    componentToString(cid) {
      let [str, streams] = this.recursiveCIDToString(this.rendered[COMPONENTS], cid);
      return [str, streams];
    }
    pruneCIDs(cids) {
      cids.forEach((cid) => delete this.rendered[COMPONENTS][cid]);
    }
    get() {
      return this.rendered;
    }
    isNewFingerprint(diff = {}) {
      return !!diff[STATIC];
    }
    templateStatic(part, templates) {
      if (typeof part === "number") {
        return templates[part];
      } else {
        return part;
      }
    }
    toOutputBuffer(rendered, templates, output) {
      if (rendered[DYNAMICS]) {
        return this.comprehensionToBuffer(rendered, templates, output);
      }
      let { [STATIC]: statics } = rendered;
      statics = this.templateStatic(statics, templates);
      output.buffer += statics[0];
      for (let i2 = 1; i2 < statics.length; i2++) {
        this.dynamicToBuffer(rendered[i2 - 1], templates, output);
        output.buffer += statics[i2];
      }
    }
    comprehensionToBuffer(rendered, templates, output) {
      let { [DYNAMICS]: dynamics, [STATIC]: statics, [STREAM]: stream } = rendered;
      let [_inserts, deleteIds] = stream || [{}, []];
      statics = this.templateStatic(statics, templates);
      let compTemplates = templates || rendered[TEMPLATES];
      for (let d2 = 0; d2 < dynamics.length; d2++) {
        let dynamic = dynamics[d2];
        output.buffer += statics[0];
        for (let i2 = 1; i2 < statics.length; i2++) {
          this.dynamicToBuffer(dynamic[i2 - 1], compTemplates, output);
          output.buffer += statics[i2];
        }
      }
      if (stream !== void 0 && (rendered[DYNAMICS].length > 0 || deleteIds.length > 0)) {
        rendered[DYNAMICS] = [];
        output.streams.add(stream);
      }
    }
    dynamicToBuffer(rendered, templates, output) {
      if (typeof rendered === "number") {
        let [str, streams] = this.recursiveCIDToString(output.components, rendered, output.onlyCids);
        output.buffer += str;
        output.streams = /* @__PURE__ */ new Set([...output.streams, ...streams]);
      } else if (isObject(rendered)) {
        this.toOutputBuffer(rendered, templates, output);
      } else {
        output.buffer += rendered;
      }
    }
    recursiveCIDToString(components, cid, onlyCids) {
      let component = components[cid] || logError(`no component for CID ${cid}`, components);
      let template = document.createElement("template");
      let [html, streams] = this.recursiveToString(component, components, onlyCids);
      template.innerHTML = html;
      let container = template.content;
      let skip = onlyCids && !onlyCids.has(cid);
      let [hasChildNodes, hasChildComponents] = Array.from(container.childNodes).reduce(([hasNodes, hasComponents], child, i2) => {
        if (child.nodeType === Node.ELEMENT_NODE) {
          if (child.getAttribute(PHX_COMPONENT)) {
            return [hasNodes, true];
          }
          child.setAttribute(PHX_COMPONENT, cid);
          if (!child.id) {
            child.id = `${this.parentViewId()}-${cid}-${i2}`;
          }
          if (skip) {
            child.setAttribute(PHX_SKIP, "");
            child.innerHTML = "";
          }
          return [true, hasComponents];
        } else {
          if (child.nodeValue.trim() !== "") {
            logError(`only HTML element tags are allowed at the root of components.

got: "${child.nodeValue.trim()}"

within:
`, template.innerHTML.trim());
            child.replaceWith(this.createSpan(child.nodeValue, cid));
            return [true, hasComponents];
          } else {
            child.remove();
            return [hasNodes, hasComponents];
          }
        }
      }, [false, false]);
      if (!hasChildNodes && !hasChildComponents) {
        logError("expected at least one HTML element tag inside a component, but the component is empty:\n", template.innerHTML.trim());
        return [this.createSpan("", cid).outerHTML, streams];
      } else if (!hasChildNodes && hasChildComponents) {
        logError("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.", template.innerHTML.trim());
        return [template.innerHTML, streams];
      } else {
        return [template.innerHTML, streams];
      }
    }
    createSpan(text, cid) {
      let span = document.createElement("span");
      span.innerText = text;
      span.setAttribute(PHX_COMPONENT, cid);
      return span;
    }
  };
  var viewHookID = 1;
  var ViewHook = class {
    static makeID() {
      return viewHookID++;
    }
    static elementID(el) {
      return el.phxHookId;
    }
    constructor(view, el, callbacks) {
      this.__view = view;
      this.liveSocket = view.liveSocket;
      this.__callbacks = callbacks;
      this.__listeners = /* @__PURE__ */ new Set();
      this.__isDisconnected = false;
      this.el = el;
      this.el.phxHookId = this.constructor.makeID();
      for (let key in this.__callbacks) {
        this[key] = this.__callbacks[key];
      }
    }
    __mounted() {
      this.mounted && this.mounted();
    }
    __updated() {
      this.updated && this.updated();
    }
    __beforeUpdate() {
      this.beforeUpdate && this.beforeUpdate();
    }
    __destroyed() {
      this.destroyed && this.destroyed();
    }
    __reconnected() {
      if (this.__isDisconnected) {
        this.__isDisconnected = false;
        this.reconnected && this.reconnected();
      }
    }
    __disconnected() {
      this.__isDisconnected = true;
      this.disconnected && this.disconnected();
    }
    pushEvent(event, payload = {}, onReply = function() {
    }) {
      return this.__view.pushHookEvent(null, event, payload, onReply);
    }
    pushEventTo(phxTarget, event, payload = {}, onReply = function() {
    }) {
      return this.__view.withinTargets(phxTarget, (view, targetCtx) => {
        return view.pushHookEvent(targetCtx, event, payload, onReply);
      });
    }
    handleEvent(event, callback) {
      let callbackRef = (customEvent, bypass) => bypass ? event : callback(customEvent.detail);
      window.addEventListener(`phx:${event}`, callbackRef);
      this.__listeners.add(callbackRef);
      return callbackRef;
    }
    removeHandleEvent(callbackRef) {
      let event = callbackRef(null, true);
      window.removeEventListener(`phx:${event}`, callbackRef);
      this.__listeners.delete(callbackRef);
    }
    upload(name, files) {
      return this.__view.dispatchUploads(name, files);
    }
    uploadTo(phxTarget, name, files) {
      return this.__view.withinTargets(phxTarget, (view) => view.dispatchUploads(name, files));
    }
    __cleanup__() {
      this.__listeners.forEach((callbackRef) => this.removeHandleEvent(callbackRef));
    }
  };
  var focusStack = null;
  var JS = {
    exec(eventType, phxEvent, view, sourceEl, defaults) {
      let [defaultKind, defaultArgs] = defaults || [null, {}];
      let commands = phxEvent.charAt(0) === "[" ? JSON.parse(phxEvent) : [[defaultKind, defaultArgs]];
      commands.forEach(([kind, args]) => {
        if (kind === defaultKind && defaultArgs.data) {
          args.data = Object.assign(args.data || {}, defaultArgs.data);
        }
        this.filterToEls(sourceEl, args).forEach((el) => {
          this[`exec_${kind}`](eventType, phxEvent, view, sourceEl, el, args);
        });
      });
    },
    isVisible(el) {
      return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length > 0);
    },
    exec_dispatch(eventType, phxEvent, view, sourceEl, el, { to, event, detail, bubbles }) {
      detail = detail || {};
      detail.dispatcher = sourceEl;
      dom_default.dispatchEvent(el, event, { detail, bubbles });
    },
    exec_push(eventType, phxEvent, view, sourceEl, el, args) {
      if (!view.isConnected()) {
        return;
      }
      let { event, data, target, page_loading, loading, value, dispatcher } = args;
      let pushOpts = { loading, value, target, page_loading: !!page_loading };
      let targetSrc = eventType === "change" && dispatcher ? dispatcher : sourceEl;
      let phxTarget = target || targetSrc.getAttribute(view.binding("target")) || targetSrc;
      view.withinTargets(phxTarget, (targetView, targetCtx) => {
        if (eventType === "change") {
          let { newCid, _target, callback } = args;
          _target = _target || (dom_default.isFormInput(sourceEl) ? sourceEl.name : void 0);
          if (_target) {
            pushOpts._target = _target;
          }
          targetView.pushInput(sourceEl, targetCtx, newCid, event || phxEvent, pushOpts, callback);
        } else if (eventType === "submit") {
          let { submitter } = args;
          targetView.submitForm(sourceEl, targetCtx, event || phxEvent, submitter, pushOpts);
        } else {
          targetView.pushEvent(eventType, sourceEl, targetCtx, event || phxEvent, data, pushOpts);
        }
      });
    },
    exec_navigate(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.historyRedirect(href, replace ? "replace" : "push");
    },
    exec_patch(eventType, phxEvent, view, sourceEl, el, { href, replace }) {
      view.liveSocket.pushHistoryPatch(href, replace ? "replace" : "push", sourceEl);
    },
    exec_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.attemptFocus(el));
    },
    exec_focus_first(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => aria_default.focusFirstInteractive(el) || aria_default.focusFirst(el));
    },
    exec_push_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => focusStack = el || sourceEl);
    },
    exec_pop_focus(eventType, phxEvent, view, sourceEl, el) {
      window.requestAnimationFrame(() => {
        if (focusStack) {
          focusStack.focus();
        }
        focusStack = null;
      });
    },
    exec_add_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, names, [], transition, time, view);
    },
    exec_remove_class(eventType, phxEvent, view, sourceEl, el, { names, transition, time }) {
      this.addOrRemoveClasses(el, [], names, transition, time, view);
    },
    exec_transition(eventType, phxEvent, view, sourceEl, el, { time, transition }) {
      this.addOrRemoveClasses(el, [], [], transition, time, view);
    },
    exec_toggle(eventType, phxEvent, view, sourceEl, el, { display, ins, outs, time }) {
      this.toggle(eventType, view, el, display, ins, outs, time);
    },
    exec_show(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.show(eventType, view, el, display, transition, time);
    },
    exec_hide(eventType, phxEvent, view, sourceEl, el, { display, transition, time }) {
      this.hide(eventType, view, el, display, transition, time);
    },
    exec_set_attr(eventType, phxEvent, view, sourceEl, el, { attr: [attr, val] }) {
      this.setOrRemoveAttrs(el, [[attr, val]], []);
    },
    exec_remove_attr(eventType, phxEvent, view, sourceEl, el, { attr }) {
      this.setOrRemoveAttrs(el, [], [attr]);
    },
    show(eventType, view, el, display, transition, time) {
      if (!this.isVisible(el)) {
        this.toggle(eventType, view, el, display, transition, null, time);
      }
    },
    hide(eventType, view, el, display, transition, time) {
      if (this.isVisible(el)) {
        this.toggle(eventType, view, el, display, null, transition, time);
      }
    },
    toggle(eventType, view, el, display, ins, outs, time) {
      let [inClasses, inStartClasses, inEndClasses] = ins || [[], [], []];
      let [outClasses, outStartClasses, outEndClasses] = outs || [[], [], []];
      if (inClasses.length > 0 || outClasses.length > 0) {
        if (this.isVisible(el)) {
          let onStart = () => {
            this.addOrRemoveClasses(el, outStartClasses, inClasses.concat(inStartClasses).concat(inEndClasses));
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, outClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, outEndClasses, outStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:hide-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], outClasses.concat(outEndClasses));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          if (eventType === "remove") {
            return;
          }
          let onStart = () => {
            this.addOrRemoveClasses(el, inStartClasses, outClasses.concat(outStartClasses).concat(outEndClasses));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            window.requestAnimationFrame(() => {
              this.addOrRemoveClasses(el, inClasses, []);
              window.requestAnimationFrame(() => this.addOrRemoveClasses(el, inEndClasses, inStartClasses));
            });
          };
          el.dispatchEvent(new Event("phx:show-start"));
          view.transition(time, onStart, () => {
            this.addOrRemoveClasses(el, [], inClasses.concat(inEndClasses));
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      } else {
        if (this.isVisible(el)) {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:hide-start"));
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = "none");
            el.dispatchEvent(new Event("phx:hide-end"));
          });
        } else {
          window.requestAnimationFrame(() => {
            el.dispatchEvent(new Event("phx:show-start"));
            let stickyDisplay = display || this.defaultDisplay(el);
            dom_default.putSticky(el, "toggle", (currentEl) => currentEl.style.display = stickyDisplay);
            el.dispatchEvent(new Event("phx:show-end"));
          });
        }
      }
    },
    addOrRemoveClasses(el, adds, removes, transition, time, view) {
      let [transition_run, transition_start, transition_end] = transition || [[], [], []];
      if (transition_run.length > 0) {
        let onStart = () => this.addOrRemoveClasses(el, transition_start.concat(transition_run), []);
        let onDone = () => this.addOrRemoveClasses(el, adds.concat(transition_end), removes.concat(transition_run).concat(transition_start));
        return view.transition(time, onStart, onDone);
      }
      window.requestAnimationFrame(() => {
        let [prevAdds, prevRemoves] = dom_default.getSticky(el, "classes", [[], []]);
        let keepAdds = adds.filter((name) => prevAdds.indexOf(name) < 0 && !el.classList.contains(name));
        let keepRemoves = removes.filter((name) => prevRemoves.indexOf(name) < 0 && el.classList.contains(name));
        let newAdds = prevAdds.filter((name) => removes.indexOf(name) < 0).concat(keepAdds);
        let newRemoves = prevRemoves.filter((name) => adds.indexOf(name) < 0).concat(keepRemoves);
        dom_default.putSticky(el, "classes", (currentEl) => {
          currentEl.classList.remove(...newRemoves);
          currentEl.classList.add(...newAdds);
          return [newAdds, newRemoves];
        });
      });
    },
    setOrRemoveAttrs(el, sets, removes) {
      let [prevSets, prevRemoves] = dom_default.getSticky(el, "attrs", [[], []]);
      let alteredAttrs = sets.map(([attr, _val]) => attr).concat(removes);
      let newSets = prevSets.filter(([attr, _val]) => !alteredAttrs.includes(attr)).concat(sets);
      let newRemoves = prevRemoves.filter((attr) => !alteredAttrs.includes(attr)).concat(removes);
      dom_default.putSticky(el, "attrs", (currentEl) => {
        newRemoves.forEach((attr) => currentEl.removeAttribute(attr));
        newSets.forEach(([attr, val]) => currentEl.setAttribute(attr, val));
        return [newSets, newRemoves];
      });
    },
    hasAllClasses(el, classes) {
      return classes.every((name) => el.classList.contains(name));
    },
    isToggledOut(el, outClasses) {
      return !this.isVisible(el) || this.hasAllClasses(el, outClasses);
    },
    filterToEls(sourceEl, { to }) {
      return to ? dom_default.all(document, to) : [sourceEl];
    },
    defaultDisplay(el) {
      return { tr: "table-row", td: "table-cell" }[el.tagName.toLowerCase()] || "block";
    }
  };
  var js_default = JS;
  var serializeForm = (form, metadata, onlyNames = []) => {
    let _a = metadata, { submitter } = _a, meta = __objRest(_a, ["submitter"]);
    let formData = new FormData(form);
    if (submitter && submitter.form && submitter.form === form) {
      formData.append(submitter.name, submitter.value);
    }
    let toRemove = [];
    formData.forEach((val, key, _index) => {
      if (val instanceof File) {
        toRemove.push(key);
      }
    });
    toRemove.forEach((key) => formData.delete(key));
    let params = new URLSearchParams();
    for (let [key, val] of formData.entries()) {
      if (onlyNames.length === 0 || onlyNames.indexOf(key) >= 0) {
        params.append(key, val);
      }
    }
    for (let metaKey in meta) {
      params.append(metaKey, meta[metaKey]);
    }
    return params.toString();
  };
  var View = class {
    constructor(el, liveSocket2, parentView, flash, liveReferer) {
      this.isDead = false;
      this.liveSocket = liveSocket2;
      this.flash = flash;
      this.parent = parentView;
      this.root = parentView ? parentView.root : this;
      this.el = el;
      this.id = this.el.id;
      this.ref = 0;
      this.childJoins = 0;
      this.loaderTimer = null;
      this.pendingDiffs = [];
      this.pruningCIDs = [];
      this.redirect = false;
      this.href = null;
      this.joinCount = this.parent ? this.parent.joinCount - 1 : 0;
      this.joinPending = true;
      this.destroyed = false;
      this.joinCallback = function(onDone) {
        onDone && onDone();
      };
      this.stopCallback = function() {
      };
      this.pendingJoinOps = this.parent ? null : [];
      this.viewHooks = {};
      this.uploaders = {};
      this.formSubmits = [];
      this.children = this.parent ? null : {};
      this.root.children[this.id] = {};
      this.channel = this.liveSocket.channel(`lv:${this.id}`, () => {
        return {
          redirect: this.redirect ? this.href : void 0,
          url: this.redirect ? void 0 : this.href || void 0,
          params: this.connectParams(liveReferer),
          session: this.getSession(),
          static: this.getStatic(),
          flash: this.flash
        };
      });
    }
    setHref(href) {
      this.href = href;
    }
    setRedirect(href) {
      this.redirect = true;
      this.href = href;
    }
    isMain() {
      return this.el.hasAttribute(PHX_MAIN);
    }
    connectParams(liveReferer) {
      let params = this.liveSocket.params(this.el);
      let manifest = dom_default.all(document, `[${this.binding(PHX_TRACK_STATIC)}]`).map((node) => node.src || node.href).filter((url) => typeof url === "string");
      if (manifest.length > 0) {
        params["_track_static"] = manifest;
      }
      params["_mounts"] = this.joinCount;
      params["_live_referer"] = liveReferer;
      return params;
    }
    isConnected() {
      return this.channel.canPush();
    }
    getSession() {
      return this.el.getAttribute(PHX_SESSION);
    }
    getStatic() {
      let val = this.el.getAttribute(PHX_STATIC);
      return val === "" ? null : val;
    }
    destroy(callback = function() {
    }) {
      this.destroyAllChildren();
      this.destroyed = true;
      delete this.root.children[this.id];
      if (this.parent) {
        delete this.root.children[this.parent.id][this.id];
      }
      clearTimeout(this.loaderTimer);
      let onFinished = () => {
        callback();
        for (let id in this.viewHooks) {
          this.destroyHook(this.viewHooks[id]);
        }
      };
      dom_default.markPhxChildDestroyed(this.el);
      this.log("destroyed", () => ["the child has been removed from the parent"]);
      this.channel.leave().receive("ok", onFinished).receive("error", onFinished).receive("timeout", onFinished);
    }
    setContainerClasses(...classes) {
      this.el.classList.remove(PHX_CONNECTED_CLASS, PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.el.classList.add(...classes);
    }
    showLoader(timeout) {
      clearTimeout(this.loaderTimer);
      if (timeout) {
        this.loaderTimer = setTimeout(() => this.showLoader(), timeout);
      } else {
        for (let id in this.viewHooks) {
          this.viewHooks[id].__disconnected();
        }
        this.setContainerClasses(PHX_DISCONNECTED_CLASS);
      }
    }
    execAll(binding) {
      dom_default.all(this.el, `[${binding}]`, (el) => this.liveSocket.execJS(el, el.getAttribute(binding)));
    }
    hideLoader() {
      clearTimeout(this.loaderTimer);
      this.setContainerClasses(PHX_CONNECTED_CLASS);
      this.execAll(this.binding("connected"));
    }
    triggerReconnected() {
      for (let id in this.viewHooks) {
        this.viewHooks[id].__reconnected();
      }
    }
    log(kind, msgCallback) {
      this.liveSocket.log(this, kind, msgCallback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.liveSocket.transition(time, onStart, onDone);
    }
    withinTargets(phxTarget, callback) {
      if (phxTarget instanceof HTMLElement || phxTarget instanceof SVGElement) {
        return this.liveSocket.owner(phxTarget, (view) => callback(view, phxTarget));
      }
      if (isCid(phxTarget)) {
        let targets = dom_default.findComponentNodeList(this.el, phxTarget);
        if (targets.length === 0) {
          logError(`no component found matching phx-target of ${phxTarget}`);
        } else {
          callback(this, parseInt(phxTarget));
        }
      } else {
        let targets = Array.from(document.querySelectorAll(phxTarget));
        if (targets.length === 0) {
          logError(`nothing found matching the phx-target selector "${phxTarget}"`);
        }
        targets.forEach((target) => this.liveSocket.owner(target, (view) => callback(view, target)));
      }
    }
    applyDiff(type, rawDiff, callback) {
      this.log(type, () => ["", clone(rawDiff)]);
      let { diff, reply, events, title } = Rendered.extract(rawDiff);
      callback({ diff, reply, events });
      if (title) {
        window.requestAnimationFrame(() => dom_default.putTitle(title));
      }
    }
    onJoin(resp) {
      let { rendered, container } = resp;
      if (container) {
        let [tag, attrs] = container;
        this.el = dom_default.replaceRootContainer(this.el, tag, attrs);
      }
      this.childJoins = 0;
      this.joinPending = true;
      this.flash = null;
      browser_default.dropLocal(this.liveSocket.localStorage, window.location.pathname, CONSECUTIVE_RELOADS);
      this.applyDiff("mount", rendered, ({ diff, events }) => {
        this.rendered = new Rendered(this.id, diff);
        let [html, streams] = this.renderContainer(null, "join");
        this.dropPendingRefs();
        let forms = this.formsForRecovery(html);
        this.joinCount++;
        if (forms.length > 0) {
          forms.forEach(([form, newForm, newCid], i2) => {
            this.pushFormRecovery(form, newCid, (resp2) => {
              if (i2 === forms.length - 1) {
                this.onJoinComplete(resp2, html, streams, events);
              }
            });
          });
        } else {
          this.onJoinComplete(resp, html, streams, events);
        }
      });
    }
    dropPendingRefs() {
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}]`, (el) => {
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
      });
    }
    onJoinComplete({ live_patch }, html, streams, events) {
      if (this.joinCount > 1 || this.parent && !this.parent.isJoinPending()) {
        return this.applyJoinPatch(live_patch, html, streams, events);
      }
      let newChildren = dom_default.findPhxChildrenInFragment(html, this.id).filter((toEl) => {
        let fromEl = toEl.id && this.el.querySelector(`[id="${toEl.id}"]`);
        let phxStatic = fromEl && fromEl.getAttribute(PHX_STATIC);
        if (phxStatic) {
          toEl.setAttribute(PHX_STATIC, phxStatic);
        }
        return this.joinChild(toEl);
      });
      if (newChildren.length === 0) {
        if (this.parent) {
          this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
          this.applyJoinPatch(live_patch, html, streams, events);
        }
      } else {
        this.root.pendingJoinOps.push([this, () => this.applyJoinPatch(live_patch, html, streams, events)]);
      }
    }
    attachTrueDocEl() {
      this.el = dom_default.byId(this.id);
      this.el.setAttribute(PHX_ROOT_ID, this.root.id);
    }
    execNewMounted() {
      dom_default.all(this.el, `[${this.binding(PHX_HOOK)}], [data-phx-${PHX_HOOK}]`, (hookEl) => {
        this.maybeAddNewHook(hookEl);
      });
      dom_default.all(this.el, `[${this.binding(PHX_MOUNTED)}]`, (el) => this.maybeMounted(el));
    }
    applyJoinPatch(live_patch, html, streams, events) {
      this.attachTrueDocEl();
      let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
      patch.markPrunableContentForRemoval();
      this.performPatch(patch, false);
      this.joinNewChildren();
      this.execNewMounted();
      this.joinPending = false;
      this.liveSocket.dispatchEvents(events);
      this.applyPendingUpdates();
      if (live_patch) {
        let { kind, to } = live_patch;
        this.liveSocket.historyPatch(to, kind);
      }
      this.hideLoader();
      if (this.joinCount > 1) {
        this.triggerReconnected();
      }
      this.stopCallback();
    }
    triggerBeforeUpdateHook(fromEl, toEl) {
      this.liveSocket.triggerDOM("onBeforeElUpdated", [fromEl, toEl]);
      let hook = this.getHook(fromEl);
      let isIgnored = hook && dom_default.isIgnored(fromEl, this.binding(PHX_UPDATE));
      if (hook && !fromEl.isEqualNode(toEl) && !(isIgnored && isEqualObj(fromEl.dataset, toEl.dataset))) {
        hook.__beforeUpdate();
        return hook;
      }
    }
    maybeMounted(el) {
      let phxMounted = el.getAttribute(this.binding(PHX_MOUNTED));
      let hasBeenInvoked = phxMounted && dom_default.private(el, "mounted");
      if (phxMounted && !hasBeenInvoked) {
        this.liveSocket.execJS(el, phxMounted);
        dom_default.putPrivate(el, "mounted", true);
      }
    }
    maybeAddNewHook(el, force) {
      let newHook = this.addHook(el);
      if (newHook) {
        newHook.__mounted();
      }
    }
    performPatch(patch, pruneCids) {
      let removedEls = [];
      let phxChildrenAdded = false;
      let updatedHookIds = /* @__PURE__ */ new Set();
      patch.after("added", (el) => {
        this.liveSocket.triggerDOM("onNodeAdded", [el]);
        this.maybeAddNewHook(el);
        if (el.getAttribute) {
          this.maybeMounted(el);
        }
      });
      patch.after("phxChildAdded", (el) => {
        if (dom_default.isPhxSticky(el)) {
          this.liveSocket.joinRootViews();
        } else {
          phxChildrenAdded = true;
        }
      });
      patch.before("updated", (fromEl, toEl) => {
        let hook = this.triggerBeforeUpdateHook(fromEl, toEl);
        if (hook) {
          updatedHookIds.add(fromEl.id);
        }
      });
      patch.after("updated", (el) => {
        if (updatedHookIds.has(el.id)) {
          this.getHook(el).__updated();
        }
      });
      patch.after("discarded", (el) => {
        if (el.nodeType === Node.ELEMENT_NODE) {
          removedEls.push(el);
        }
      });
      patch.after("transitionsDiscarded", (els) => this.afterElementsRemoved(els, pruneCids));
      patch.perform();
      this.afterElementsRemoved(removedEls, pruneCids);
      return phxChildrenAdded;
    }
    afterElementsRemoved(elements, pruneCids) {
      let destroyedCIDs = [];
      elements.forEach((parent) => {
        let components = dom_default.all(parent, `[${PHX_COMPONENT}]`);
        let hooks = dom_default.all(parent, `[${this.binding(PHX_HOOK)}]`);
        components.concat(parent).forEach((el) => {
          let cid = this.componentID(el);
          if (isCid(cid) && destroyedCIDs.indexOf(cid) === -1) {
            destroyedCIDs.push(cid);
          }
        });
        hooks.concat(parent).forEach((hookEl) => {
          let hook = this.getHook(hookEl);
          hook && this.destroyHook(hook);
        });
      });
      if (pruneCids) {
        this.maybePushComponentsDestroyed(destroyedCIDs);
      }
    }
    joinNewChildren() {
      dom_default.findPhxChildren(this.el, this.id).forEach((el) => this.joinChild(el));
    }
    getChildById(id) {
      return this.root.children[this.id][id];
    }
    getDescendentByEl(el) {
      if (el.id === this.id) {
        return this;
      } else {
        return this.children[el.getAttribute(PHX_PARENT_ID)][el.id];
      }
    }
    destroyDescendent(id) {
      for (let parentId in this.root.children) {
        for (let childId in this.root.children[parentId]) {
          if (childId === id) {
            return this.root.children[parentId][childId].destroy();
          }
        }
      }
    }
    joinChild(el) {
      let child = this.getChildById(el.id);
      if (!child) {
        let view = new View(el, this.liveSocket, this);
        this.root.children[this.id][view.id] = view;
        view.join();
        this.childJoins++;
        return true;
      }
    }
    isJoinPending() {
      return this.joinPending;
    }
    ackJoin(_child) {
      this.childJoins--;
      if (this.childJoins === 0) {
        if (this.parent) {
          this.parent.ackJoin(this);
        } else {
          this.onAllChildJoinsComplete();
        }
      }
    }
    onAllChildJoinsComplete() {
      this.joinCallback(() => {
        this.pendingJoinOps.forEach(([view, op]) => {
          if (!view.isDestroyed()) {
            op();
          }
        });
        this.pendingJoinOps = [];
      });
    }
    update(diff, events) {
      if (this.isJoinPending() || this.liveSocket.hasPendingLink() && this.root.isMain()) {
        return this.pendingDiffs.push({ diff, events });
      }
      this.rendered.mergeDiff(diff);
      let phxChildrenAdded = false;
      if (this.rendered.isComponentOnlyDiff(diff)) {
        this.liveSocket.time("component patch complete", () => {
          let parentCids = dom_default.findParentCIDs(this.el, this.rendered.componentCIDs(diff));
          parentCids.forEach((parentCID) => {
            if (this.componentPatch(this.rendered.getComponent(diff, parentCID), parentCID)) {
              phxChildrenAdded = true;
            }
          });
        });
      } else if (!isEmpty(diff)) {
        this.liveSocket.time("full patch complete", () => {
          let [html, streams] = this.renderContainer(diff, "update");
          let patch = new DOMPatch(this, this.el, this.id, html, streams, null);
          phxChildrenAdded = this.performPatch(patch, true);
        });
      }
      this.liveSocket.dispatchEvents(events);
      if (phxChildrenAdded) {
        this.joinNewChildren();
      }
    }
    renderContainer(diff, kind) {
      return this.liveSocket.time(`toString diff (${kind})`, () => {
        let tag = this.el.tagName;
        let cids = diff ? this.rendered.componentCIDs(diff).concat(this.pruningCIDs) : null;
        let [html, streams] = this.rendered.toString(cids);
        return [`<${tag}>${html}</${tag}>`, streams];
      });
    }
    componentPatch(diff, cid) {
      if (isEmpty(diff))
        return false;
      let [html, streams] = this.rendered.componentToString(cid);
      let patch = new DOMPatch(this, this.el, this.id, html, streams, cid);
      let childrenAdded = this.performPatch(patch, true);
      return childrenAdded;
    }
    getHook(el) {
      return this.viewHooks[ViewHook.elementID(el)];
    }
    addHook(el) {
      if (ViewHook.elementID(el) || !el.getAttribute) {
        return;
      }
      let hookName = el.getAttribute(`data-phx-${PHX_HOOK}`) || el.getAttribute(this.binding(PHX_HOOK));
      if (hookName && !this.ownsElement(el)) {
        return;
      }
      let callbacks = this.liveSocket.getHookCallbacks(hookName);
      if (callbacks) {
        if (!el.id) {
          logError(`no DOM ID for hook "${hookName}". Hooks require a unique ID on each element.`, el);
        }
        let hook = new ViewHook(this, el, callbacks);
        this.viewHooks[ViewHook.elementID(hook.el)] = hook;
        return hook;
      } else if (hookName !== null) {
        logError(`unknown hook found for "${hookName}"`, el);
      }
    }
    destroyHook(hook) {
      hook.__destroyed();
      hook.__cleanup__();
      delete this.viewHooks[ViewHook.elementID(hook.el)];
    }
    applyPendingUpdates() {
      this.pendingDiffs.forEach(({ diff, events }) => this.update(diff, events));
      this.pendingDiffs = [];
      this.eachChild((child) => child.applyPendingUpdates());
    }
    eachChild(callback) {
      let children = this.root.children[this.id] || {};
      for (let id in children) {
        callback(this.getChildById(id));
      }
    }
    onChannel(event, cb) {
      this.liveSocket.onChannel(this.channel, event, (resp) => {
        if (this.isJoinPending()) {
          this.root.pendingJoinOps.push([this, () => cb(resp)]);
        } else {
          this.liveSocket.requestDOMUpdate(() => cb(resp));
        }
      });
    }
    bindChannel() {
      this.liveSocket.onChannel(this.channel, "diff", (rawDiff) => {
        this.liveSocket.requestDOMUpdate(() => {
          this.applyDiff("update", rawDiff, ({ diff, events }) => this.update(diff, events));
        });
      });
      this.onChannel("redirect", ({ to, flash }) => this.onRedirect({ to, flash }));
      this.onChannel("live_patch", (redir) => this.onLivePatch(redir));
      this.onChannel("live_redirect", (redir) => this.onLiveRedirect(redir));
      this.channel.onError((reason) => this.onError(reason));
      this.channel.onClose((reason) => this.onClose(reason));
    }
    destroyAllChildren() {
      this.eachChild((child) => child.destroy());
    }
    onLiveRedirect(redir) {
      let { to, kind, flash } = redir;
      let url = this.expandURL(to);
      this.liveSocket.historyRedirect(url, kind, flash);
    }
    onLivePatch(redir) {
      let { to, kind } = redir;
      this.href = this.expandURL(to);
      this.liveSocket.historyPatch(to, kind);
    }
    expandURL(to) {
      return to.startsWith("/") ? `${window.location.protocol}//${window.location.host}${to}` : to;
    }
    onRedirect({ to, flash }) {
      this.liveSocket.redirect(to, flash);
    }
    isDestroyed() {
      return this.destroyed;
    }
    joinDead() {
      this.isDead = true;
    }
    join(callback) {
      this.showLoader(this.liveSocket.loaderTimeout);
      this.bindChannel();
      if (this.isMain()) {
        this.stopCallback = this.liveSocket.withPageLoading({ to: this.href, kind: "initial" });
      }
      this.joinCallback = (onDone) => {
        onDone = onDone || function() {
        };
        callback ? callback(this.joinCount, onDone) : onDone();
      };
      this.liveSocket.wrapPush(this, { timeout: false }, () => {
        return this.channel.join().receive("ok", (data) => {
          if (!this.isDestroyed()) {
            this.liveSocket.requestDOMUpdate(() => this.onJoin(data));
          }
        }).receive("error", (resp) => !this.isDestroyed() && this.onJoinError(resp)).receive("timeout", () => !this.isDestroyed() && this.onJoinError({ reason: "timeout" }));
      });
    }
    onJoinError(resp) {
      if (resp.reason === "reload") {
        this.log("error", () => [`failed mount with ${resp.status}. Falling back to page request`, resp]);
        return this.onRedirect({ to: this.href });
      } else if (resp.reason === "unauthorized" || resp.reason === "stale") {
        this.log("error", () => ["unauthorized live_redirect. Falling back to page request", resp]);
        return this.onRedirect({ to: this.href });
      }
      if (resp.redirect || resp.live_redirect) {
        this.joinPending = false;
        this.channel.leave();
      }
      if (resp.redirect) {
        return this.onRedirect(resp.redirect);
      }
      if (resp.live_redirect) {
        return this.onLiveRedirect(resp.live_redirect);
      }
      this.log("error", () => ["unable to join", resp]);
      if (this.liveSocket.isConnected()) {
        this.liveSocket.reloadWithJitter(this);
      }
    }
    onClose(reason) {
      if (this.isDestroyed()) {
        return;
      }
      if (this.liveSocket.hasPendingLink() && reason !== "leave") {
        return this.liveSocket.reloadWithJitter(this);
      }
      this.destroyAllChildren();
      this.liveSocket.dropActiveElement(this);
      if (document.activeElement) {
        document.activeElement.blur();
      }
      if (this.liveSocket.isUnloaded()) {
        this.showLoader(BEFORE_UNLOAD_LOADER_TIMEOUT);
      }
    }
    onError(reason) {
      this.onClose(reason);
      if (this.liveSocket.isConnected()) {
        this.log("error", () => ["view crashed", reason]);
      }
      if (!this.liveSocket.isUnloaded()) {
        this.displayError();
      }
    }
    displayError() {
      if (this.isMain()) {
        dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: { to: this.href, kind: "error" } });
      }
      this.showLoader();
      this.setContainerClasses(PHX_DISCONNECTED_CLASS, PHX_ERROR_CLASS);
      this.execAll(this.binding("disconnected"));
    }
    pushWithReply(refGenerator, event, payload, onReply = function() {
    }) {
      if (!this.isConnected()) {
        return;
      }
      let [ref, [el], opts] = refGenerator ? refGenerator() : [null, [], {}];
      let onLoadingDone = function() {
      };
      if (opts.page_loading || el && el.getAttribute(this.binding(PHX_PAGE_LOADING)) !== null) {
        onLoadingDone = this.liveSocket.withPageLoading({ kind: "element", target: el });
      }
      if (typeof payload.cid !== "number") {
        delete payload.cid;
      }
      return this.liveSocket.wrapPush(this, { timeout: true }, () => {
        return this.channel.push(event, payload, PUSH_TIMEOUT).receive("ok", (resp) => {
          let finish = (hookReply) => {
            if (resp.redirect) {
              this.onRedirect(resp.redirect);
            }
            if (resp.live_patch) {
              this.onLivePatch(resp.live_patch);
            }
            if (resp.live_redirect) {
              this.onLiveRedirect(resp.live_redirect);
            }
            if (ref !== null) {
              this.undoRefs(ref);
            }
            onLoadingDone();
            onReply(resp, hookReply);
          };
          if (resp.diff) {
            this.liveSocket.requestDOMUpdate(() => {
              this.applyDiff("update", resp.diff, ({ diff, reply, events }) => {
                this.update(diff, events);
                finish(reply);
              });
            });
          } else {
            finish(null);
          }
        });
      });
    }
    undoRefs(ref) {
      if (!this.isConnected()) {
        return;
      }
      dom_default.all(document, `[${PHX_REF_SRC}="${this.id}"][${PHX_REF}="${ref}"]`, (el) => {
        let disabledVal = el.getAttribute(PHX_DISABLED);
        el.removeAttribute(PHX_REF);
        el.removeAttribute(PHX_REF_SRC);
        if (el.getAttribute(PHX_READONLY) !== null) {
          el.readOnly = false;
          el.removeAttribute(PHX_READONLY);
        }
        if (disabledVal !== null) {
          el.disabled = disabledVal === "true" ? true : false;
          el.removeAttribute(PHX_DISABLED);
        }
        PHX_EVENT_CLASSES.forEach((className) => dom_default.removeClass(el, className));
        let disableRestore = el.getAttribute(PHX_DISABLE_WITH_RESTORE);
        if (disableRestore !== null) {
          el.innerText = disableRestore;
          el.removeAttribute(PHX_DISABLE_WITH_RESTORE);
        }
        let toEl = dom_default.private(el, PHX_REF);
        if (toEl) {
          let hook = this.triggerBeforeUpdateHook(el, toEl);
          DOMPatch.patchEl(el, toEl, this.liveSocket.getActiveElement());
          if (hook) {
            hook.__updated();
          }
          dom_default.deletePrivate(el, PHX_REF);
        }
      });
    }
    putRef(elements, event, opts = {}) {
      let newRef = this.ref++;
      let disableWith = this.binding(PHX_DISABLE_WITH);
      if (opts.loading) {
        elements = elements.concat(dom_default.all(document, opts.loading));
      }
      elements.forEach((el) => {
        el.classList.add(`phx-${event}-loading`);
        el.setAttribute(PHX_REF, newRef);
        el.setAttribute(PHX_REF_SRC, this.el.id);
        let disableText = el.getAttribute(disableWith);
        if (disableText !== null) {
          if (!el.getAttribute(PHX_DISABLE_WITH_RESTORE)) {
            el.setAttribute(PHX_DISABLE_WITH_RESTORE, el.innerText);
          }
          if (disableText !== "") {
            el.innerText = disableText;
          }
          el.setAttribute("disabled", "");
        }
      });
      return [newRef, elements, opts];
    }
    componentID(el) {
      let cid = el.getAttribute && el.getAttribute(PHX_COMPONENT);
      return cid ? parseInt(cid) : null;
    }
    targetComponentID(target, targetCtx, opts = {}) {
      if (isCid(targetCtx)) {
        return targetCtx;
      }
      let cidOrSelector = target.getAttribute(this.binding("target"));
      if (isCid(cidOrSelector)) {
        return parseInt(cidOrSelector);
      } else if (targetCtx && (cidOrSelector !== null || opts.target)) {
        return this.closestComponentID(targetCtx);
      } else {
        return null;
      }
    }
    closestComponentID(targetCtx) {
      if (isCid(targetCtx)) {
        return targetCtx;
      } else if (targetCtx) {
        return maybe(targetCtx.closest(`[${PHX_COMPONENT}]`), (el) => this.ownsElement(el) && this.componentID(el));
      } else {
        return null;
      }
    }
    pushHookEvent(targetCtx, event, payload, onReply) {
      if (!this.isConnected()) {
        this.log("hook", () => ["unable to push hook event. LiveView not connected", event, payload]);
        return false;
      }
      let [ref, els, opts] = this.putRef([], "hook");
      this.pushWithReply(() => [ref, els, opts], "event", {
        type: "hook",
        event,
        value: payload,
        cid: this.closestComponentID(targetCtx)
      }, (resp, reply) => onReply(reply, ref));
      return ref;
    }
    extractMeta(el, meta, value) {
      let prefix = this.binding("value-");
      for (let i2 = 0; i2 < el.attributes.length; i2++) {
        if (!meta) {
          meta = {};
        }
        let name = el.attributes[i2].name;
        if (name.startsWith(prefix)) {
          meta[name.replace(prefix, "")] = el.getAttribute(name);
        }
      }
      if (el.value !== void 0) {
        if (!meta) {
          meta = {};
        }
        meta.value = el.value;
        if (el.tagName === "INPUT" && CHECKABLE_INPUTS.indexOf(el.type) >= 0 && !el.checked) {
          delete meta.value;
        }
      }
      if (value) {
        if (!meta) {
          meta = {};
        }
        for (let key in value) {
          meta[key] = value[key];
        }
      }
      return meta;
    }
    pushEvent(type, el, targetCtx, phxEvent, meta, opts = {}) {
      this.pushWithReply(() => this.putRef([el], type, opts), "event", {
        type,
        event: phxEvent,
        value: this.extractMeta(el, meta, opts.value),
        cid: this.targetComponentID(el, targetCtx, opts)
      });
    }
    pushFileProgress(fileEl, entryRef, progress, onReply = function() {
    }) {
      this.liveSocket.withinOwners(fileEl.form, (view, targetCtx) => {
        view.pushWithReply(null, "progress", {
          event: fileEl.getAttribute(view.binding(PHX_PROGRESS)),
          ref: fileEl.getAttribute(PHX_UPLOAD_REF),
          entry_ref: entryRef,
          progress,
          cid: view.targetComponentID(fileEl.form, targetCtx)
        }, onReply);
      });
    }
    pushInput(inputEl, targetCtx, forceCid, phxEvent, opts, callback) {
      let uploads;
      let cid = isCid(forceCid) ? forceCid : this.targetComponentID(inputEl.form, targetCtx);
      let refGenerator = () => this.putRef([inputEl, inputEl.form], "change", opts);
      let formData;
      if (inputEl.getAttribute(this.binding("change"))) {
        formData = serializeForm(inputEl.form, { _target: opts._target }, [inputEl.name]);
      } else {
        formData = serializeForm(inputEl.form, { _target: opts._target });
      }
      if (dom_default.isUploadInput(inputEl) && inputEl.files && inputEl.files.length > 0) {
        LiveUploader.trackFiles(inputEl, Array.from(inputEl.files));
      }
      uploads = LiveUploader.serializeUploads(inputEl);
      let event = {
        type: "form",
        event: phxEvent,
        value: formData,
        uploads,
        cid
      };
      this.pushWithReply(refGenerator, "event", event, (resp) => {
        dom_default.showError(inputEl, this.liveSocket.binding(PHX_FEEDBACK_FOR));
        if (dom_default.isUploadInput(inputEl) && inputEl.getAttribute("data-phx-auto-upload") !== null) {
          if (LiveUploader.filesAwaitingPreflight(inputEl).length > 0) {
            let [ref, _els] = refGenerator();
            this.uploadFiles(inputEl.form, targetCtx, ref, cid, (_uploads) => {
              callback && callback(resp);
              this.triggerAwaitingSubmit(inputEl.form);
            });
          }
        } else {
          callback && callback(resp);
        }
      });
    }
    triggerAwaitingSubmit(formEl) {
      let awaitingSubmit = this.getScheduledSubmit(formEl);
      if (awaitingSubmit) {
        let [_el, _ref, _opts, callback] = awaitingSubmit;
        this.cancelSubmit(formEl);
        callback();
      }
    }
    getScheduledSubmit(formEl) {
      return this.formSubmits.find(([el, _ref, _opts, _callback]) => el.isSameNode(formEl));
    }
    scheduleSubmit(formEl, ref, opts, callback) {
      if (this.getScheduledSubmit(formEl)) {
        return true;
      }
      this.formSubmits.push([formEl, ref, opts, callback]);
    }
    cancelSubmit(formEl) {
      this.formSubmits = this.formSubmits.filter(([el, ref, _callback]) => {
        if (el.isSameNode(formEl)) {
          this.undoRefs(ref);
          return false;
        } else {
          return true;
        }
      });
    }
    disableForm(formEl, opts = {}) {
      let filterIgnored = (el) => {
        let userIgnored = closestPhxBinding(el, `${this.binding(PHX_UPDATE)}=ignore`, el.form);
        return !(userIgnored || closestPhxBinding(el, "data-phx-update=ignore", el.form));
      };
      let filterDisables = (el) => {
        return el.hasAttribute(this.binding(PHX_DISABLE_WITH));
      };
      let filterButton = (el) => el.tagName == "BUTTON";
      let filterInput = (el) => ["INPUT", "TEXTAREA", "SELECT"].includes(el.tagName);
      let formElements = Array.from(formEl.elements);
      let disables = formElements.filter(filterDisables);
      let buttons = formElements.filter(filterButton).filter(filterIgnored);
      let inputs = formElements.filter(filterInput).filter(filterIgnored);
      buttons.forEach((button) => {
        button.setAttribute(PHX_DISABLED, button.disabled);
        button.disabled = true;
      });
      inputs.forEach((input) => {
        input.setAttribute(PHX_READONLY, input.readOnly);
        input.readOnly = true;
        if (input.files) {
          input.setAttribute(PHX_DISABLED, input.disabled);
          input.disabled = true;
        }
      });
      formEl.setAttribute(this.binding(PHX_PAGE_LOADING), "");
      return this.putRef([formEl].concat(disables).concat(buttons).concat(inputs), "submit", opts);
    }
    pushFormSubmit(formEl, targetCtx, phxEvent, submitter, opts, onReply) {
      let refGenerator = () => this.disableForm(formEl, opts);
      let cid = this.targetComponentID(formEl, targetCtx);
      if (LiveUploader.hasUploadsInProgress(formEl)) {
        let [ref, _els] = refGenerator();
        let push = () => this.pushFormSubmit(formEl, submitter, targetCtx, phxEvent, opts, onReply);
        return this.scheduleSubmit(formEl, ref, opts, push);
      } else if (LiveUploader.inputsAwaitingPreflight(formEl).length > 0) {
        let [ref, els] = refGenerator();
        let proxyRefGen = () => [ref, els, opts];
        this.uploadFiles(formEl, targetCtx, ref, cid, (_uploads) => {
          let formData = serializeForm(formEl, { submitter });
          this.pushWithReply(proxyRefGen, "event", {
            type: "form",
            event: phxEvent,
            value: formData,
            cid
          }, onReply);
        });
      } else {
        let formData = serializeForm(formEl, { submitter });
        this.pushWithReply(refGenerator, "event", {
          type: "form",
          event: phxEvent,
          value: formData,
          cid
        }, onReply);
      }
    }
    uploadFiles(formEl, targetCtx, ref, cid, onComplete) {
      let joinCountAtUpload = this.joinCount;
      let inputEls = LiveUploader.activeFileInputs(formEl);
      let numFileInputsInProgress = inputEls.length;
      inputEls.forEach((inputEl) => {
        let uploader = new LiveUploader(inputEl, this, () => {
          numFileInputsInProgress--;
          if (numFileInputsInProgress === 0) {
            onComplete();
          }
        });
        this.uploaders[inputEl] = uploader;
        let entries = uploader.entries().map((entry) => entry.toPreflightPayload());
        let payload = {
          ref: inputEl.getAttribute(PHX_UPLOAD_REF),
          entries,
          cid: this.targetComponentID(inputEl.form, targetCtx)
        };
        this.log("upload", () => ["sending preflight request", payload]);
        this.pushWithReply(null, "allow_upload", payload, (resp) => {
          this.log("upload", () => ["got preflight response", resp]);
          if (resp.error) {
            this.undoRefs(ref);
            let [entry_ref, reason] = resp.error;
            this.log("upload", () => [`error for entry ${entry_ref}`, reason]);
          } else {
            let onError = (callback) => {
              this.channel.onError(() => {
                if (this.joinCount === joinCountAtUpload) {
                  callback();
                }
              });
            };
            uploader.initAdapterUpload(resp, onError, this.liveSocket);
          }
        });
      });
    }
    dispatchUploads(name, filesOrBlobs) {
      let inputs = dom_default.findUploadInputs(this.el).filter((el) => el.name === name);
      if (inputs.length === 0) {
        logError(`no live file inputs found matching the name "${name}"`);
      } else if (inputs.length > 1) {
        logError(`duplicate live file inputs found matching the name "${name}"`);
      } else {
        dom_default.dispatchEvent(inputs[0], PHX_TRACK_UPLOADS, { detail: { files: filesOrBlobs } });
      }
    }
    pushFormRecovery(form, newCid, callback) {
      this.liveSocket.withinOwners(form, (view, targetCtx) => {
        let input = Array.from(form.elements).find((el) => {
          return dom_default.isFormInput(el) && el.type !== "hidden" && !el.hasAttribute(this.binding("change"));
        });
        let phxEvent = form.getAttribute(this.binding(PHX_AUTO_RECOVER)) || form.getAttribute(this.binding("change"));
        js_default.exec("change", phxEvent, view, input, ["push", { _target: input.name, newCid, callback }]);
      });
    }
    pushLinkPatch(href, targetEl, callback) {
      let linkRef = this.liveSocket.setPendingLink(href);
      let refGen = targetEl ? () => this.putRef([targetEl], "click") : null;
      let fallback = () => this.liveSocket.redirect(window.location.href);
      let push = this.pushWithReply(refGen, "live_patch", { url: href }, (resp) => {
        this.liveSocket.requestDOMUpdate(() => {
          if (resp.link_redirect) {
            this.liveSocket.replaceMain(href, null, callback, linkRef);
          } else {
            if (this.liveSocket.commitPendingLink(linkRef)) {
              this.href = href;
            }
            this.applyPendingUpdates();
            callback && callback(linkRef);
          }
        });
      });
      if (push) {
        push.receive("timeout", fallback);
      } else {
        fallback();
      }
    }
    formsForRecovery(html) {
      if (this.joinCount === 0) {
        return [];
      }
      let phxChange = this.binding("change");
      let template = document.createElement("template");
      template.innerHTML = html;
      return dom_default.all(this.el, `form[${phxChange}]`).filter((form) => form.id && this.ownsElement(form)).filter((form) => form.elements.length > 0).filter((form) => form.getAttribute(this.binding(PHX_AUTO_RECOVER)) !== "ignore").map((form) => {
        let newForm = template.content.querySelector(`form[id="${form.id}"][${phxChange}="${form.getAttribute(phxChange)}"]`);
        if (newForm) {
          return [form, newForm, this.targetComponentID(newForm)];
        } else {
          return [form, null, null];
        }
      }).filter(([form, newForm, newCid]) => newForm);
    }
    maybePushComponentsDestroyed(destroyedCIDs) {
      let willDestroyCIDs = destroyedCIDs.filter((cid) => {
        return dom_default.findComponentNodeList(this.el, cid).length === 0;
      });
      if (willDestroyCIDs.length > 0) {
        this.pruningCIDs.push(...willDestroyCIDs);
        this.pushWithReply(null, "cids_will_destroy", { cids: willDestroyCIDs }, () => {
          this.pruningCIDs = this.pruningCIDs.filter((cid) => willDestroyCIDs.indexOf(cid) !== -1);
          let completelyDestroyCIDs = willDestroyCIDs.filter((cid) => {
            return dom_default.findComponentNodeList(this.el, cid).length === 0;
          });
          if (completelyDestroyCIDs.length > 0) {
            this.pushWithReply(null, "cids_destroyed", { cids: completelyDestroyCIDs }, (resp) => {
              this.rendered.pruneCIDs(resp.cids);
            });
          }
        });
      }
    }
    ownsElement(el) {
      let parentViewEl = el.closest(PHX_VIEW_SELECTOR);
      return el.getAttribute(PHX_PARENT_ID) === this.id || parentViewEl && parentViewEl.id === this.id || !parentViewEl && this.isDead;
    }
    submitForm(form, targetCtx, phxEvent, submitter, opts = {}) {
      dom_default.putPrivate(form, PHX_HAS_SUBMITTED, true);
      let phxFeedback = this.liveSocket.binding(PHX_FEEDBACK_FOR);
      let inputs = Array.from(form.elements);
      inputs.forEach((input) => dom_default.putPrivate(input, PHX_HAS_SUBMITTED, true));
      this.liveSocket.blurActiveElement(this);
      this.pushFormSubmit(form, targetCtx, phxEvent, submitter, opts, () => {
        inputs.forEach((input) => dom_default.showError(input, phxFeedback));
        this.liveSocket.restorePreviouslyActiveFocus();
      });
    }
    binding(kind) {
      return this.liveSocket.binding(kind);
    }
  };
  var LiveSocket = class {
    constructor(url, phxSocket, opts = {}) {
      this.unloaded = false;
      if (!phxSocket || phxSocket.constructor.name === "Object") {
        throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);
      }
      this.socket = new phxSocket(url, opts);
      this.bindingPrefix = opts.bindingPrefix || BINDING_PREFIX;
      this.opts = opts;
      this.params = closure2(opts.params || {});
      this.viewLogger = opts.viewLogger;
      this.metadataCallbacks = opts.metadata || {};
      this.defaults = Object.assign(clone(DEFAULTS), opts.defaults || {});
      this.activeElement = null;
      this.prevActive = null;
      this.silenced = false;
      this.main = null;
      this.outgoingMainEl = null;
      this.clickStartedAtTarget = null;
      this.linkRef = 1;
      this.roots = {};
      this.href = window.location.href;
      this.pendingLink = null;
      this.currentLocation = clone(window.location);
      this.hooks = opts.hooks || {};
      this.uploaders = opts.uploaders || {};
      this.loaderTimeout = opts.loaderTimeout || LOADER_TIMEOUT;
      this.reloadWithJitterTimer = null;
      this.maxReloads = opts.maxReloads || MAX_RELOADS;
      this.reloadJitterMin = opts.reloadJitterMin || RELOAD_JITTER_MIN;
      this.reloadJitterMax = opts.reloadJitterMax || RELOAD_JITTER_MAX;
      this.failsafeJitter = opts.failsafeJitter || FAILSAFE_JITTER;
      this.localStorage = opts.localStorage || window.localStorage;
      this.sessionStorage = opts.sessionStorage || window.sessionStorage;
      this.boundTopLevelEvents = false;
      this.domCallbacks = Object.assign({ onNodeAdded: closure2(), onBeforeElUpdated: closure2() }, opts.dom || {});
      this.transitions = new TransitionSet();
      window.addEventListener("pagehide", (_e2) => {
        this.unloaded = true;
      });
      this.socket.onOpen(() => {
        if (this.isUnloaded()) {
          window.location.reload();
        }
      });
    }
    isProfileEnabled() {
      return this.sessionStorage.getItem(PHX_LV_PROFILE) === "true";
    }
    isDebugEnabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "true";
    }
    isDebugDisabled() {
      return this.sessionStorage.getItem(PHX_LV_DEBUG) === "false";
    }
    enableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "true");
    }
    enableProfiling() {
      this.sessionStorage.setItem(PHX_LV_PROFILE, "true");
    }
    disableDebug() {
      this.sessionStorage.setItem(PHX_LV_DEBUG, "false");
    }
    disableProfiling() {
      this.sessionStorage.removeItem(PHX_LV_PROFILE);
    }
    enableLatencySim(upperBoundMs) {
      this.enableDebug();
      console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable");
      this.sessionStorage.setItem(PHX_LV_LATENCY_SIM, upperBoundMs);
    }
    disableLatencySim() {
      this.sessionStorage.removeItem(PHX_LV_LATENCY_SIM);
    }
    getLatencySim() {
      let str = this.sessionStorage.getItem(PHX_LV_LATENCY_SIM);
      return str ? parseInt(str) : null;
    }
    getSocket() {
      return this.socket;
    }
    connect() {
      if (window.location.hostname === "localhost" && !this.isDebugDisabled()) {
        this.enableDebug();
      }
      let doConnect = () => {
        if (this.joinRootViews()) {
          this.bindTopLevelEvents();
          this.socket.connect();
        } else if (this.main) {
          this.socket.connect();
        } else {
          this.bindTopLevelEvents({ dead: true });
        }
        this.joinDeadView();
      };
      if (["complete", "loaded", "interactive"].indexOf(document.readyState) >= 0) {
        doConnect();
      } else {
        document.addEventListener("DOMContentLoaded", () => doConnect());
      }
    }
    disconnect(callback) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.disconnect(callback);
    }
    replaceTransport(transport) {
      clearTimeout(this.reloadWithJitterTimer);
      this.socket.replaceTransport(transport);
      this.connect();
    }
    execJS(el, encodedJS, eventType = null) {
      this.owner(el, (view) => js_default.exec(eventType, encodedJS, view, el));
    }
    unload() {
      if (this.unloaded) {
        return;
      }
      if (this.main && this.isConnected()) {
        this.log(this.main, "socket", () => ["disconnect for page nav"]);
      }
      this.unloaded = true;
      this.destroyAllViews();
      this.disconnect();
    }
    triggerDOM(kind, args) {
      this.domCallbacks[kind](...args);
    }
    time(name, func) {
      if (!this.isProfileEnabled() || !console.time) {
        return func();
      }
      console.time(name);
      let result = func();
      console.timeEnd(name);
      return result;
    }
    log(view, kind, msgCallback) {
      if (this.viewLogger) {
        let [msg, obj] = msgCallback();
        this.viewLogger(view, kind, msg, obj);
      } else if (this.isDebugEnabled()) {
        let [msg, obj] = msgCallback();
        debug(view, kind, msg, obj);
      }
    }
    requestDOMUpdate(callback) {
      this.transitions.after(callback);
    }
    transition(time, onStart, onDone = function() {
    }) {
      this.transitions.addTransition(time, onStart, onDone);
    }
    onChannel(channel, event, cb) {
      channel.on(event, (data) => {
        let latency = this.getLatencySim();
        if (!latency) {
          cb(data);
        } else {
          setTimeout(() => cb(data), latency);
        }
      });
    }
    wrapPush(view, opts, push) {
      let latency = this.getLatencySim();
      let oldJoinCount = view.joinCount;
      if (!latency) {
        if (this.isConnected() && opts.timeout) {
          return push().receive("timeout", () => {
            if (view.joinCount === oldJoinCount && !view.isDestroyed()) {
              this.reloadWithJitter(view, () => {
                this.log(view, "timeout", () => ["received timeout while communicating with server. Falling back to hard refresh for recovery"]);
              });
            }
          });
        } else {
          return push();
        }
      }
      let fakePush = {
        receives: [],
        receive(kind, cb) {
          this.receives.push([kind, cb]);
        }
      };
      setTimeout(() => {
        if (view.isDestroyed()) {
          return;
        }
        fakePush.receives.reduce((acc, [kind, cb]) => acc.receive(kind, cb), push());
      }, latency);
      return fakePush;
    }
    reloadWithJitter(view, log) {
      clearTimeout(this.reloadWithJitterTimer);
      this.disconnect();
      let minMs = this.reloadJitterMin;
      let maxMs = this.reloadJitterMax;
      let afterMs = Math.floor(Math.random() * (maxMs - minMs + 1)) + minMs;
      let tries = browser_default.updateLocal(this.localStorage, window.location.pathname, CONSECUTIVE_RELOADS, 0, (count) => count + 1);
      if (tries > this.maxReloads) {
        afterMs = this.failsafeJitter;
      }
      this.reloadWithJitterTimer = setTimeout(() => {
        if (view.isDestroyed() || view.isConnected()) {
          return;
        }
        view.destroy();
        log ? log() : this.log(view, "join", () => [`encountered ${tries} consecutive reloads`]);
        if (tries > this.maxReloads) {
          this.log(view, "join", () => [`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]);
        }
        if (this.hasPendingLink()) {
          window.location = this.pendingLink;
        } else {
          window.location.reload();
        }
      }, afterMs);
    }
    getHookCallbacks(name) {
      return name && name.startsWith("Phoenix.") ? hooks_default[name.split(".")[1]] : this.hooks[name];
    }
    isUnloaded() {
      return this.unloaded;
    }
    isConnected() {
      return this.socket.isConnected();
    }
    getBindingPrefix() {
      return this.bindingPrefix;
    }
    binding(kind) {
      return `${this.getBindingPrefix()}${kind}`;
    }
    channel(topic, params) {
      return this.socket.channel(topic, params);
    }
    joinDeadView() {
      let body = document.body;
      if (body && !this.isPhxView(body) && !this.isPhxView(document.firstElementChild)) {
        let view = this.newRootView(body);
        view.setHref(this.getHref());
        view.joinDead();
        if (!this.main) {
          this.main = view;
        }
        window.requestAnimationFrame(() => view.execNewMounted());
      }
    }
    joinRootViews() {
      let rootsFound = false;
      dom_default.all(document, `${PHX_VIEW_SELECTOR}:not([${PHX_PARENT_ID}])`, (rootEl) => {
        if (!this.getRootById(rootEl.id)) {
          let view = this.newRootView(rootEl);
          view.setHref(this.getHref());
          view.join();
          if (rootEl.hasAttribute(PHX_MAIN)) {
            this.main = view;
          }
        }
        rootsFound = true;
      });
      return rootsFound;
    }
    redirect(to, flash) {
      this.unload();
      browser_default.redirect(to, flash);
    }
    replaceMain(href, flash, callback = null, linkRef = this.setPendingLink(href)) {
      let liveReferer = this.currentLocation.href;
      this.outgoingMainEl = this.outgoingMainEl || this.main.el;
      let newMainEl = dom_default.cloneNode(this.outgoingMainEl, "");
      this.main.showLoader(this.loaderTimeout);
      this.main.destroy();
      this.main = this.newRootView(newMainEl, flash, liveReferer);
      this.main.setRedirect(href);
      this.transitionRemoves();
      this.main.join((joinCount, onDone) => {
        if (joinCount === 1 && this.commitPendingLink(linkRef)) {
          this.requestDOMUpdate(() => {
            dom_default.findPhxSticky(document).forEach((el) => newMainEl.appendChild(el));
            this.outgoingMainEl.replaceWith(newMainEl);
            this.outgoingMainEl = null;
            callback && requestAnimationFrame(callback);
            onDone();
          });
        }
      });
    }
    transitionRemoves(elements) {
      let removeAttr = this.binding("remove");
      elements = elements || dom_default.all(document, `[${removeAttr}]`);
      elements.forEach((el) => {
        if (document.body.contains(el)) {
          this.execJS(el, el.getAttribute(removeAttr), "remove");
        }
      });
    }
    isPhxView(el) {
      return el.getAttribute && el.getAttribute(PHX_SESSION) !== null;
    }
    newRootView(el, flash, liveReferer) {
      let view = new View(el, this, null, flash, liveReferer);
      this.roots[view.id] = view;
      return view;
    }
    owner(childEl, callback) {
      let view = maybe(childEl.closest(PHX_VIEW_SELECTOR), (el) => this.getViewByEl(el)) || this.main;
      if (view) {
        callback(view);
      }
    }
    withinOwners(childEl, callback) {
      this.owner(childEl, (view) => callback(view, childEl));
    }
    getViewByEl(el) {
      let rootId = el.getAttribute(PHX_ROOT_ID);
      return maybe(this.getRootById(rootId), (root) => root.getDescendentByEl(el));
    }
    getRootById(id) {
      return this.roots[id];
    }
    destroyAllViews() {
      for (let id in this.roots) {
        this.roots[id].destroy();
        delete this.roots[id];
      }
      this.main = null;
    }
    destroyViewByEl(el) {
      let root = this.getRootById(el.getAttribute(PHX_ROOT_ID));
      if (root && root.id === el.id) {
        root.destroy();
        delete this.roots[root.id];
      } else if (root) {
        root.destroyDescendent(el.id);
      }
    }
    setActiveElement(target) {
      if (this.activeElement === target) {
        return;
      }
      this.activeElement = target;
      let cancel = () => {
        if (target === this.activeElement) {
          this.activeElement = null;
        }
        target.removeEventListener("mouseup", this);
        target.removeEventListener("touchend", this);
      };
      target.addEventListener("mouseup", cancel);
      target.addEventListener("touchend", cancel);
    }
    getActiveElement() {
      if (document.activeElement === document.body) {
        return this.activeElement || document.activeElement;
      } else {
        return document.activeElement || document.body;
      }
    }
    dropActiveElement(view) {
      if (this.prevActive && view.ownsElement(this.prevActive)) {
        this.prevActive = null;
      }
    }
    restorePreviouslyActiveFocus() {
      if (this.prevActive && this.prevActive !== document.body) {
        this.prevActive.focus();
      }
    }
    blurActiveElement() {
      this.prevActive = this.getActiveElement();
      if (this.prevActive !== document.body) {
        this.prevActive.blur();
      }
    }
    bindTopLevelEvents({ dead } = {}) {
      if (this.boundTopLevelEvents) {
        return;
      }
      this.boundTopLevelEvents = true;
      this.socket.onClose((event) => {
        if (event && event.code === 1001) {
          return this.unload();
        }
        if (event && event.code === 1e3 && this.main) {
          return this.reloadWithJitter(this.main);
        }
      });
      document.body.addEventListener("click", function() {
      });
      window.addEventListener("pageshow", (e6) => {
        if (e6.persisted) {
          this.getSocket().disconnect();
          this.withPageLoading({ to: window.location.href, kind: "redirect" });
          window.location.reload();
        }
      }, true);
      if (!dead) {
        this.bindNav();
      }
      this.bindClicks();
      if (!dead) {
        this.bindForms();
      }
      this.bind({ keyup: "keyup", keydown: "keydown" }, (e6, type, view, targetEl, phxEvent, eventTarget) => {
        let matchKey = targetEl.getAttribute(this.binding(PHX_KEY));
        let pressedKey = e6.key && e6.key.toLowerCase();
        if (matchKey && matchKey.toLowerCase() !== pressedKey) {
          return;
        }
        let data = __spreadValues({ key: e6.key }, this.eventMeta(type, e6, targetEl));
        js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
      });
      this.bind({ blur: "focusout", focus: "focusin" }, (e6, type, view, targetEl, phxEvent, eventTarget) => {
        if (!eventTarget) {
          let data = __spreadValues({ key: e6.key }, this.eventMeta(type, e6, targetEl));
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      this.bind({ blur: "blur", focus: "focus" }, (e6, type, view, targetEl, targetCtx, phxEvent, phxTarget) => {
        if (phxTarget === "window") {
          let data = this.eventMeta(type, e6, targetEl);
          js_default.exec(type, phxEvent, view, targetEl, ["push", { data }]);
        }
      });
      window.addEventListener("dragover", (e6) => e6.preventDefault());
      window.addEventListener("drop", (e6) => {
        e6.preventDefault();
        let dropTargetId = maybe(closestPhxBinding(e6.target, this.binding(PHX_DROP_TARGET)), (trueTarget) => {
          return trueTarget.getAttribute(this.binding(PHX_DROP_TARGET));
        });
        let dropTarget = dropTargetId && document.getElementById(dropTargetId);
        let files = Array.from(e6.dataTransfer.files || []);
        if (!dropTarget || dropTarget.disabled || files.length === 0 || !(dropTarget.files instanceof FileList)) {
          return;
        }
        LiveUploader.trackFiles(dropTarget, files, e6.dataTransfer);
        dropTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
      this.on(PHX_TRACK_UPLOADS, (e6) => {
        let uploadTarget = e6.target;
        if (!dom_default.isUploadInput(uploadTarget)) {
          return;
        }
        let files = Array.from(e6.detail.files || []).filter((f2) => f2 instanceof File || f2 instanceof Blob);
        LiveUploader.trackFiles(uploadTarget, files);
        uploadTarget.dispatchEvent(new Event("input", { bubbles: true }));
      });
    }
    eventMeta(eventName, e6, targetEl) {
      let callback = this.metadataCallbacks[eventName];
      return callback ? callback(e6, targetEl) : {};
    }
    setPendingLink(href) {
      this.linkRef++;
      this.pendingLink = href;
      return this.linkRef;
    }
    commitPendingLink(linkRef) {
      if (this.linkRef !== linkRef) {
        return false;
      } else {
        this.href = this.pendingLink;
        this.pendingLink = null;
        return true;
      }
    }
    getHref() {
      return this.href;
    }
    hasPendingLink() {
      return !!this.pendingLink;
    }
    bind(events, callback) {
      for (let event in events) {
        let browserEventName = events[event];
        this.on(browserEventName, (e6) => {
          let binding = this.binding(event);
          let windowBinding = this.binding(`window-${event}`);
          let targetPhxEvent = e6.target.getAttribute && e6.target.getAttribute(binding);
          if (targetPhxEvent) {
            this.debounce(e6.target, e6, browserEventName, () => {
              this.withinOwners(e6.target, (view) => {
                callback(e6, event, view, e6.target, targetPhxEvent, null);
              });
            });
          } else {
            dom_default.all(document, `[${windowBinding}]`, (el) => {
              let phxEvent = el.getAttribute(windowBinding);
              this.debounce(el, e6, browserEventName, () => {
                this.withinOwners(el, (view) => {
                  callback(e6, event, view, el, phxEvent, "window");
                });
              });
            });
          }
        });
      }
    }
    bindClicks() {
      window.addEventListener("click", (e6) => this.clickStartedAtTarget = e6.target);
      this.bindClick("click", "click", false);
      this.bindClick("mousedown", "capture-click", true);
    }
    bindClick(eventName, bindingName, capture) {
      let click = this.binding(bindingName);
      window.addEventListener(eventName, (e6) => {
        let target = null;
        if (capture) {
          target = e6.target.matches(`[${click}]`) ? e6.target : e6.target.querySelector(`[${click}]`);
        } else {
          let clickStartedAtTarget = this.clickStartedAtTarget || e6.target;
          target = closestPhxBinding(clickStartedAtTarget, click);
          this.dispatchClickAway(e6, clickStartedAtTarget);
          this.clickStartedAtTarget = null;
        }
        let phxEvent = target && target.getAttribute(click);
        if (!phxEvent) {
          let href = e6.target instanceof HTMLAnchorElement ? e6.target.getAttribute("href") : null;
          if (!capture && href !== null && !dom_default.wantsNewTab(e6) && dom_default.isNewPageHref(href, window.location)) {
            this.unload();
          }
          return;
        }
        if (target.getAttribute("href") === "#") {
          e6.preventDefault();
        }
        this.debounce(target, e6, "click", () => {
          this.withinOwners(target, (view) => {
            js_default.exec("click", phxEvent, view, target, ["push", { data: this.eventMeta("click", e6, target) }]);
          });
        });
      }, capture);
    }
    dispatchClickAway(e6, clickStartedAt) {
      let phxClickAway = this.binding("click-away");
      dom_default.all(document, `[${phxClickAway}]`, (el) => {
        if (!(el.isSameNode(clickStartedAt) || el.contains(clickStartedAt))) {
          this.withinOwners(e6.target, (view) => {
            let phxEvent = el.getAttribute(phxClickAway);
            if (js_default.isVisible(el)) {
              js_default.exec("click", phxEvent, view, el, ["push", { data: this.eventMeta("click", e6, e6.target) }]);
            }
          });
        }
      });
    }
    bindNav() {
      if (!browser_default.canPushState()) {
        return;
      }
      if (history.scrollRestoration) {
        history.scrollRestoration = "manual";
      }
      let scrollTimer = null;
      window.addEventListener("scroll", (_e2) => {
        clearTimeout(scrollTimer);
        scrollTimer = setTimeout(() => {
          browser_default.updateCurrentState((state) => Object.assign(state, { scroll: window.scrollY }));
        }, 100);
      });
      window.addEventListener("popstate", (event) => {
        if (!this.registerNewLocation(window.location)) {
          return;
        }
        let { type, id, root, scroll } = event.state || {};
        let href = window.location.href;
        this.requestDOMUpdate(() => {
          if (this.main.isConnected() && (type === "patch" && id === this.main.id)) {
            this.main.pushLinkPatch(href, null, () => {
              this.maybeScroll(scroll);
            });
          } else {
            this.replaceMain(href, null, () => {
              if (root) {
                this.replaceRootHistory();
              }
              this.maybeScroll(scroll);
            });
          }
        });
      }, false);
      window.addEventListener("click", (e6) => {
        let target = closestPhxBinding(e6.target, PHX_LIVE_LINK);
        let type = target && target.getAttribute(PHX_LIVE_LINK);
        if (!type || !this.isConnected() || !this.main || dom_default.wantsNewTab(e6)) {
          return;
        }
        let href = target.href;
        let linkState = target.getAttribute(PHX_LINK_STATE);
        e6.preventDefault();
        e6.stopImmediatePropagation();
        if (this.pendingLink === href) {
          return;
        }
        this.requestDOMUpdate(() => {
          if (type === "patch") {
            this.pushHistoryPatch(href, linkState, target);
          } else if (type === "redirect") {
            this.historyRedirect(href, linkState);
          } else {
            throw new Error(`expected ${PHX_LIVE_LINK} to be "patch" or "redirect", got: ${type}`);
          }
          let phxClick = target.getAttribute(this.binding("click"));
          if (phxClick) {
            this.requestDOMUpdate(() => this.execJS(target, phxClick, "click"));
          }
        });
      }, false);
    }
    maybeScroll(scroll) {
      if (typeof scroll === "number") {
        requestAnimationFrame(() => {
          window.scrollTo(0, scroll);
        });
      }
    }
    dispatchEvent(event, payload = {}) {
      dom_default.dispatchEvent(window, `phx:${event}`, { detail: payload });
    }
    dispatchEvents(events) {
      events.forEach(([event, payload]) => this.dispatchEvent(event, payload));
    }
    withPageLoading(info, callback) {
      dom_default.dispatchEvent(window, "phx:page-loading-start", { detail: info });
      let done = () => dom_default.dispatchEvent(window, "phx:page-loading-stop", { detail: info });
      return callback ? callback(done) : done;
    }
    pushHistoryPatch(href, linkState, targetEl) {
      if (!this.isConnected()) {
        return browser_default.redirect(href);
      }
      this.withPageLoading({ to: href, kind: "patch" }, (done) => {
        this.main.pushLinkPatch(href, targetEl, (linkRef) => {
          this.historyPatch(href, linkState, linkRef);
          done();
        });
      });
    }
    historyPatch(href, linkState, linkRef = this.setPendingLink(href)) {
      if (!this.commitPendingLink(linkRef)) {
        return;
      }
      browser_default.pushState(linkState, { type: "patch", id: this.main.id }, href);
      this.registerNewLocation(window.location);
    }
    historyRedirect(href, linkState, flash) {
      if (!this.isConnected()) {
        return browser_default.redirect(href, flash);
      }
      if (/^\/$|^\/[^\/]+.*$/.test(href)) {
        let { protocol, host } = window.location;
        href = `${protocol}//${host}${href}`;
      }
      let scroll = window.scrollY;
      this.withPageLoading({ to: href, kind: "redirect" }, (done) => {
        this.replaceMain(href, flash, () => {
          browser_default.pushState(linkState, { type: "redirect", id: this.main.id, scroll }, href);
          this.registerNewLocation(window.location);
          done();
        });
      });
    }
    replaceRootHistory() {
      browser_default.pushState("replace", { root: true, type: "patch", id: this.main.id });
    }
    registerNewLocation(newLocation) {
      let { pathname, search } = this.currentLocation;
      if (pathname + search === newLocation.pathname + newLocation.search) {
        return false;
      } else {
        this.currentLocation = clone(newLocation);
        return true;
      }
    }
    bindForms() {
      let iterations = 0;
      let externalFormSubmitted = false;
      this.on("submit", (e6) => {
        let phxSubmit = e6.target.getAttribute(this.binding("submit"));
        let phxChange = e6.target.getAttribute(this.binding("change"));
        if (!externalFormSubmitted && phxChange && !phxSubmit) {
          externalFormSubmitted = true;
          e6.preventDefault();
          this.withinOwners(e6.target, (view) => {
            view.disableForm(e6.target);
            window.requestAnimationFrame(() => {
              if (dom_default.isUnloadableFormSubmit(e6)) {
                this.unload();
              }
              e6.target.submit();
            });
          });
        }
      }, true);
      this.on("submit", (e6) => {
        let phxEvent = e6.target.getAttribute(this.binding("submit"));
        if (!phxEvent) {
          if (dom_default.isUnloadableFormSubmit(e6)) {
            this.unload();
          }
          return;
        }
        e6.preventDefault();
        e6.target.disabled = true;
        this.withinOwners(e6.target, (view) => {
          js_default.exec("submit", phxEvent, view, e6.target, ["push", { submitter: e6.submitter }]);
        });
      }, false);
      for (let type of ["change", "input"]) {
        this.on(type, (e6) => {
          let phxChange = this.binding("change");
          let input = e6.target;
          let inputEvent = input.getAttribute(phxChange);
          let formEvent = input.form && input.form.getAttribute(phxChange);
          let phxEvent = inputEvent || formEvent;
          if (!phxEvent) {
            return;
          }
          if (input.type === "number" && input.validity && input.validity.badInput) {
            return;
          }
          let dispatcher = inputEvent ? input : input.form;
          let currentIterations = iterations;
          iterations++;
          let { at: at2, type: lastType } = dom_default.private(input, "prev-iteration") || {};
          if (at2 === currentIterations - 1 && type !== lastType) {
            return;
          }
          dom_default.putPrivate(input, "prev-iteration", { at: currentIterations, type });
          this.debounce(input, e6, type, () => {
            this.withinOwners(dispatcher, (view) => {
              dom_default.putPrivate(input, PHX_HAS_FOCUSED, true);
              if (!dom_default.isTextualInput(input)) {
                this.setActiveElement(input);
              }
              js_default.exec("change", phxEvent, view, input, ["push", { _target: e6.target.name, dispatcher }]);
            });
          });
        }, false);
      }
      this.on("reset", (e6) => {
        let form = e6.target;
        dom_default.resetForm(form, this.binding(PHX_FEEDBACK_FOR));
        let input = Array.from(form.elements).find((el) => el.type === "reset");
        window.requestAnimationFrame(() => {
          input.dispatchEvent(new Event("input", { bubbles: true, cancelable: false }));
        });
      });
    }
    debounce(el, event, eventType, callback) {
      if (eventType === "blur" || eventType === "focusout") {
        return callback();
      }
      let phxDebounce = this.binding(PHX_DEBOUNCE);
      let phxThrottle = this.binding(PHX_THROTTLE);
      let defaultDebounce = this.defaults.debounce.toString();
      let defaultThrottle = this.defaults.throttle.toString();
      this.withinOwners(el, (view) => {
        let asyncFilter = () => !view.isDestroyed() && document.body.contains(el);
        dom_default.debounce(el, event, phxDebounce, defaultDebounce, phxThrottle, defaultThrottle, asyncFilter, () => {
          callback();
        });
      });
    }
    silenceEvents(callback) {
      this.silenced = true;
      callback();
      this.silenced = false;
    }
    on(event, callback) {
      window.addEventListener(event, (e6) => {
        if (!this.silenced) {
          callback(e6);
        }
      });
    }
  };
  var TransitionSet = class {
    constructor() {
      this.transitions = /* @__PURE__ */ new Set();
      this.pendingOps = [];
    }
    reset() {
      this.transitions.forEach((timer) => {
        clearTimeout(timer);
        this.transitions.delete(timer);
      });
      this.flushPendingOps();
    }
    after(callback) {
      if (this.size() === 0) {
        callback();
      } else {
        this.pushPendingOp(callback);
      }
    }
    addTransition(time, onStart, onDone) {
      onStart();
      let timer = setTimeout(() => {
        this.transitions.delete(timer);
        onDone();
        this.flushPendingOps();
      }, time);
      this.transitions.add(timer);
    }
    pushPendingOp(op) {
      this.pendingOps.push(op);
    }
    size() {
      return this.transitions.size;
    }
    flushPendingOps() {
      if (this.size() > 0) {
        return;
      }
      let op = this.pendingOps.shift();
      if (op) {
        op();
        this.flushPendingOps();
      }
    }
  };

  // js/app.js
  var import_topbar = __toESM(require_topbar());
  Oi.init("phc_Byagoba6TS6UBZ4AAMOSY5NZpbaEUJltMKH9CsZkv4l", { api_host: "https://app.posthog.com" });
  var csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
  var liveSocket = new LiveSocket("/live", Socket, { params: { _csrf_token: csrfToken } });
  var searchTimeout;
  document.addEventListener("input", function(event) {
    if (event.target.matches(".search-box-default")) {
      const searchQuery = event.target.value;
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(function() {
        Oi.capture("used_search", { query: searchQuery });
      }, 5e3);
    }
  }, false);
  import_topbar.default.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
  var topBarScheduled = void 0;
  window.addEventListener("phx:page-loading-start", () => {
    if (!topBarScheduled) {
      topBarScheduled = setTimeout(() => import_topbar.default.show(), 500);
    }
  });
  window.addEventListener("phx:page-loading-stop", () => {
    clearTimeout(topBarScheduled);
    topBarScheduled = void 0;
    import_topbar.default.hide();
  });
  liveSocket.connect();
  liveSocket.enableDebug();
  window.liveSocket = liveSocket;
})();
/**
 * @license MIT
 * topbar 1.0.0, 2021-01-06
 * https://buunguyen.github.io/topbar
 * Copyright (c) 2021 Buu Nguyen
 */
//# sourceMappingURL=data:application/json;base64,
