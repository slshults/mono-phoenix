var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { window } from './utils/globals';
import { _isArray } from './utils/type-utils';
var PageViewManager = /** @class */ (function () {
    function PageViewManager(instance) {
        var _this = this;
        this._hasSeenPageView = false;
        this._updateScrollData = function () {
            var _a, _b, _c, _d;
            if (!_this._pageViewData) {
                _this._pageViewData = _this._createPageViewData();
            }
            var pageViewData = _this._pageViewData;
            var scrollY = _this._scrollY();
            var scrollHeight = _this._scrollHeight();
            var contentY = _this._contentY();
            var contentHeight = _this._contentHeight();
            pageViewData.lastScrollY = scrollY;
            pageViewData.maxScrollY = Math.max(scrollY, (_a = pageViewData.maxScrollY) !== null && _a !== void 0 ? _a : 0);
            pageViewData.maxScrollHeight = Math.max(scrollHeight, (_b = pageViewData.maxScrollHeight) !== null && _b !== void 0 ? _b : 0);
            pageViewData.lastContentY = contentY;
            pageViewData.maxContentY = Math.max(contentY, (_c = pageViewData.maxContentY) !== null && _c !== void 0 ? _c : 0);
            pageViewData.maxContentHeight = Math.max(contentHeight, (_d = pageViewData.maxContentHeight) !== null && _d !== void 0 ? _d : 0);
        };
        this._instance = instance;
    }
    PageViewManager.prototype._createPageViewData = function () {
        var _a;
        return {
            pathname: (_a = window === null || window === void 0 ? void 0 : window.location.pathname) !== null && _a !== void 0 ? _a : '',
        };
    };
    PageViewManager.prototype.doPageView = function () {
        var prevPageViewData;
        // if there were events created before the first PageView, we would have created a
        // pageViewData for them. If this happened, we don't want to create a new pageViewData
        if (!this._hasSeenPageView) {
            this._hasSeenPageView = true;
            prevPageViewData = undefined;
            if (!this._pageViewData) {
                this._pageViewData = this._createPageViewData();
            }
        }
        else {
            prevPageViewData = this._pageViewData;
            this._pageViewData = this._createPageViewData();
        }
        // update the scroll properties for the new page, but wait until the next tick
        // of the event loop
        setTimeout(this._updateScrollData, 0);
        return __assign({ $prev_pageview_pathname: prevPageViewData === null || prevPageViewData === void 0 ? void 0 : prevPageViewData.pathname }, this._calculatePrevPageScrollProperties(prevPageViewData));
    };
    PageViewManager.prototype.doPageLeave = function () {
        var prevPageViewData = this._pageViewData;
        return __assign({ $prev_pageview_pathname: prevPageViewData === null || prevPageViewData === void 0 ? void 0 : prevPageViewData.pathname }, this._calculatePrevPageScrollProperties(prevPageViewData));
    };
    PageViewManager.prototype._calculatePrevPageScrollProperties = function (prevPageViewData) {
        if (!prevPageViewData ||
            prevPageViewData.maxScrollHeight == null ||
            prevPageViewData.lastScrollY == null ||
            prevPageViewData.maxScrollY == null ||
            prevPageViewData.maxContentHeight == null ||
            prevPageViewData.lastContentY == null ||
            prevPageViewData.maxContentY == null) {
            return {};
        }
        var maxScrollHeight = prevPageViewData.maxScrollHeight, lastScrollY = prevPageViewData.lastScrollY, maxScrollY = prevPageViewData.maxScrollY, maxContentHeight = prevPageViewData.maxContentHeight, lastContentY = prevPageViewData.lastContentY, maxContentY = prevPageViewData.maxContentY;
        // Use ceil, so that e.g. scrolling 999.5px of a 1000px page is considered 100% scrolled
        maxScrollHeight = Math.ceil(maxScrollHeight);
        lastScrollY = Math.ceil(lastScrollY);
        maxScrollY = Math.ceil(maxScrollY);
        maxContentHeight = Math.ceil(maxContentHeight);
        lastContentY = Math.ceil(lastContentY);
        maxContentY = Math.ceil(maxContentY);
        // if the maximum scroll height is near 0, then the percentage is 1
        var lastScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(lastScrollY / maxScrollHeight, 0, 1);
        var maxScrollPercentage = maxScrollHeight <= 1 ? 1 : clamp(maxScrollY / maxScrollHeight, 0, 1);
        var lastContentPercentage = maxContentHeight <= 1 ? 1 : clamp(lastContentY / maxContentHeight, 0, 1);
        var maxContentPercentage = maxContentHeight <= 1 ? 1 : clamp(maxContentY / maxContentHeight, 0, 1);
        return {
            $prev_pageview_last_scroll: lastScrollY,
            $prev_pageview_last_scroll_percentage: lastScrollPercentage,
            $prev_pageview_max_scroll: maxScrollY,
            $prev_pageview_max_scroll_percentage: maxScrollPercentage,
            $prev_pageview_last_content: lastContentY,
            $prev_pageview_last_content_percentage: lastContentPercentage,
            $prev_pageview_max_content: maxContentY,
            $prev_pageview_max_content_percentage: maxContentPercentage,
        };
    };
    PageViewManager.prototype.startMeasuringScrollPosition = function () {
        // setting the third argument to `true` means that we will receive scroll events for other scrollable elements
        // on the page, not just the window
        // see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#usecapture
        window === null || window === void 0 ? void 0 : window.addEventListener('scroll', this._updateScrollData, true);
        window === null || window === void 0 ? void 0 : window.addEventListener('scrollend', this._updateScrollData, true);
        window === null || window === void 0 ? void 0 : window.addEventListener('resize', this._updateScrollData);
    };
    PageViewManager.prototype.stopMeasuringScrollPosition = function () {
        window === null || window === void 0 ? void 0 : window.removeEventListener('scroll', this._updateScrollData);
        window === null || window === void 0 ? void 0 : window.removeEventListener('scrollend', this._updateScrollData);
        window === null || window === void 0 ? void 0 : window.removeEventListener('resize', this._updateScrollData);
    };
    PageViewManager.prototype._scrollElement = function () {
        var e_1, _a;
        if (this._instance.config.scroll_root_selector) {
            var selectors = _isArray(this._instance.config.scroll_root_selector)
                ? this._instance.config.scroll_root_selector
                : [this._instance.config.scroll_root_selector];
            try {
                for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {
                    var selector = selectors_1_1.value;
                    var element = window === null || window === void 0 ? void 0 : window.document.querySelector(selector);
                    if (element) {
                        return element;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return undefined;
        }
        else {
            return window === null || window === void 0 ? void 0 : window.document.documentElement;
        }
    };
    PageViewManager.prototype._scrollHeight = function () {
        var element = this._scrollElement();
        return element ? Math.max(0, element.scrollHeight - element.clientHeight) : 0;
    };
    PageViewManager.prototype._scrollY = function () {
        if (this._instance.config.scroll_root_selector) {
            var element = this._scrollElement();
            return (element && element.scrollTop) || 0;
        }
        else {
            return window ? window.scrollY || window.pageYOffset || window.document.documentElement.scrollTop || 0 : 0;
        }
    };
    PageViewManager.prototype._contentHeight = function () {
        var element = this._scrollElement();
        return (element === null || element === void 0 ? void 0 : element.scrollHeight) || 0;
    };
    PageViewManager.prototype._contentY = function () {
        var element = this._scrollElement();
        var clientHeight = (element === null || element === void 0 ? void 0 : element.clientHeight) || 0;
        return this._scrollY() + clientHeight;
    };
    return PageViewManager;
}());
export { PageViewManager };
function clamp(x, min, max) {
    return Math.max(min, Math.min(x, max));
}
//# sourceMappingURL=page-view.js.map