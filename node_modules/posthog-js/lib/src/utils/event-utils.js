var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { _getQueryParam, convertToURL } from './request-utils';
import { _isNull } from './type-utils';
import Config from '../config';
import { _each, _extend, _strip_empty_properties, _timestamp } from './index';
import { assignableWindow, document, location, userAgent, window } from './globals';
import { detectBrowser, detectBrowserVersion, detectDevice, detectDeviceType, detectOS } from './user-agent-utils';
var URL_REGEX_PREFIX = 'https?://(.*)';
export var _info = {
    campaignParams: function (customParams) {
        // Should be kept in sync with https://github.com/PostHog/posthog/blob/master/plugin-server/src/utils/db/utils.ts#L60
        var campaign_keywords = [
            'utm_source',
            'utm_medium',
            'utm_campaign',
            'utm_content',
            'utm_term',
            'gclid',
            'gad_source',
            'gclsrc',
            'dclid',
            'gbraid',
            'wbraid',
            'fbclid',
            'msclkid',
            'twclid',
            'li_fat_id',
            'mc_cid',
            'igshid',
            'ttclid', // tiktok
        ].concat(customParams || []);
        var params = {};
        _each(campaign_keywords, function (kwkey) {
            var kw = document ? _getQueryParam(document.URL, kwkey) : '';
            if (kw.length) {
                params[kwkey] = kw;
            }
        });
        return params;
    },
    searchEngine: function () {
        var referrer = document === null || document === void 0 ? void 0 : document.referrer;
        if (!referrer) {
            return null;
        }
        else {
            if (referrer.search(URL_REGEX_PREFIX + 'google.([^/?]*)') === 0) {
                return 'google';
            }
            else if (referrer.search(URL_REGEX_PREFIX + 'bing.com') === 0) {
                return 'bing';
            }
            else if (referrer.search(URL_REGEX_PREFIX + 'yahoo.com') === 0) {
                return 'yahoo';
            }
            else if (referrer.search(URL_REGEX_PREFIX + 'duckduckgo.com') === 0) {
                return 'duckduckgo';
            }
            else {
                return null;
            }
        }
    },
    searchInfo: function () {
        var search = _info.searchEngine(), param = search != 'yahoo' ? 'q' : 'p', ret = {};
        if (!_isNull(search)) {
            ret['$search_engine'] = search;
            var keyword = document ? _getQueryParam(document.referrer, param) : '';
            if (keyword.length) {
                ret['ph_keyword'] = keyword;
            }
        }
        return ret;
    },
    /**
     * This function detects which browser is running this script.
     * The order of the checks are important since many user agents
     * include keywords used in later checks.
     */
    browser: detectBrowser,
    /**
     * This function detects which browser version is running this script,
     * parsing major and minor version (e.g., 42.1). User agent strings from:
     * http://www.useragentstring.com/pages/useragentstring.php
     *
     * `navigator.vendor` is passed in and used to help with detecting certain browsers
     * NB `navigator.vendor` is deprecated and not present in every browser
     */
    browserVersion: detectBrowserVersion,
    browserLanguage: function () {
        return (navigator.language || // Any modern browser
            navigator.userLanguage // IE11
        );
    },
    os: detectOS,
    device: detectDevice,
    deviceType: detectDeviceType,
    referrer: function () {
        return (document === null || document === void 0 ? void 0 : document.referrer) || '$direct';
    },
    referringDomain: function () {
        var _a;
        if (!(document === null || document === void 0 ? void 0 : document.referrer)) {
            return '$direct';
        }
        return ((_a = convertToURL(document.referrer)) === null || _a === void 0 ? void 0 : _a.host) || '$direct';
    },
    properties: function () {
        if (!userAgent) {
            return {};
        }
        var _a = __read(_info.os(userAgent), 2), os_name = _a[0], os_version = _a[1];
        return _extend(_strip_empty_properties({
            $os: os_name,
            $os_version: os_version,
            $browser: _info.browser(userAgent, navigator.vendor, assignableWindow.opera),
            $device: _info.device(userAgent),
            $device_type: _info.deviceType(userAgent),
        }), {
            $current_url: location === null || location === void 0 ? void 0 : location.href,
            $host: location === null || location === void 0 ? void 0 : location.host,
            $pathname: location === null || location === void 0 ? void 0 : location.pathname,
            $raw_user_agent: userAgent.length > 1000 ? userAgent.substring(0, 997) + '...' : userAgent,
            $browser_version: _info.browserVersion(userAgent, navigator.vendor, assignableWindow.opera),
            $browser_language: _info.browserLanguage(),
            $screen_height: window === null || window === void 0 ? void 0 : window.screen.height,
            $screen_width: window === null || window === void 0 ? void 0 : window.screen.width,
            $viewport_height: window === null || window === void 0 ? void 0 : window.innerHeight,
            $viewport_width: window === null || window === void 0 ? void 0 : window.innerWidth,
            $lib: 'web',
            $lib_version: Config.LIB_VERSION,
            $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10),
            $time: _timestamp() / 1000, // epoch time in seconds
        });
    },
    people_properties: function () {
        if (!userAgent) {
            return {};
        }
        var _a = __read(_info.os(userAgent), 2), os_name = _a[0], os_version = _a[1];
        return _extend(_strip_empty_properties({
            $os: os_name,
            $os_version: os_version,
            $browser: _info.browser(userAgent, navigator.vendor, assignableWindow.opera),
        }), {
            $browser_version: _info.browserVersion(userAgent, navigator.vendor, assignableWindow.opera),
        });
    },
};
//# sourceMappingURL=event-utils.js.map