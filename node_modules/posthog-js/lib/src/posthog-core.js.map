{"version":3,"file":"posthog-core.js","sourceRoot":"","sources":["../../src/posthog-core.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,UAAU,CAAA;AAC7B,OAAO,EACH,uBAAuB,EACvB,KAAK,EACL,UAAU,EACV,OAAO,EACP,SAAS,EACT,eAAe,EACf,eAAe,EACf,mBAAmB,EACnB,sBAAsB,GACzB,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAA;AAC1D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAC3C,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAA;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAA;AAC1D,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,MAAM,aAAa,CAAA;AACtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,sCAAsC,CAAA;AACvE,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AACjC,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAA;AAC9C,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAClG,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,WAAW,CAAA;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAA;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAC1C,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAA;AAC9C,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAA;AACtD,OAAO,EAIH,WAAW,GAed,MAAM,SAAS,CAAA;AAChB,OAAO,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAA;AACnE,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAA;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAA;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAA;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AAEjC,OAAO,EACH,QAAQ,EACR,cAAc,EACd,cAAc,EACd,WAAW,EACX,SAAS,EACT,SAAS,EACT,SAAS,EACT,YAAY,GACf,MAAM,oBAAoB,CAAA;AAC3B,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAA;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACvC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAA;AACrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAA;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAA;AAClD,OAAO,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAA;AAEtE;;;;;;;;EAQE;AAEF,IAAM,SAAS,GAA4B,EAAE,CAAA;AAE7C,+BAA+B;AAC/B,IAAM,MAAM,GAAG,cAAO,CAAC,CAAA;AAEvB,IAAM,qBAAqB,GAAG,SAAS,CAAA;AAEvC;;GAEG;AACH,wEAAwE;AACxE,8EAA8E;AAE9E,4DAA4D;AAC5D,yDAAyD;AACzD,mCAAmC;AACnC,IAAI,gBAAgB,GAAG,CAAC,gBAAgB,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,CAAC,MAAM,CAAC,MAAK,CAAC,CAAC,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,CAAC,SAAS,CAAC,MAAK,CAAC,CAAC,CAAA;AAErH,MAAM,CAAC,IAAM,aAAa,GAAG;;IAAqB,OAAA,CAAC;QAC/C,QAAQ,EAAE,yBAAyB;QACnC,aAAa,EAAE,KAAK;QACpB,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI;QACf,sBAAsB,EAAE,mBAAmB,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAC;QAC/D,WAAW,EAAE,qBAAqB;QAClC,gBAAgB,EAAE,EAAE;QACpB,WAAW,EAAE,EAAE;QACf,MAAM,EAAE,MAAM;QACd,YAAY,EAAE,IAAI;QAClB,sBAAsB,EAAE,EAAE;QAC1B,yBAAyB,EAAE,EAAE;QAC7B,aAAa,EAAE,IAAI;QACnB,gBAAgB,EAAE,IAAI;QACtB,iBAAiB,EAAE,IAAI;QACvB,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,KAAK;QACd,iBAAiB,EAAE,GAAG;QACtB,OAAO,EAAE,KAAK;QACd,yBAAyB,EAAE,KAAK;QAChC,mBAAmB,EAAE,KAAK;QAC1B,cAAc,EAAE,KAAK;QACrB,4BAA4B,EAAE,SAAS;QACvC,aAAa,EAAE,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,0CAAE,QAAQ,MAAK,QAAQ;QACtD,EAAE,EAAE,IAAI;QACR,4BAA4B,EAAE,KAAK;QACnC,8BAA8B,EAAE,KAAK;QACrC,wBAAwB,EAAE,KAAK;QAC/B,kCAAkC,EAAE,cAAc;QAClD,+BAA+B,EAAE,IAAI;QACrC,gBAAgB,EAAE,KAAK;QACvB,6CAA6C;QAC7C,kBAAkB,EAAE,EAAE;QACtB,iBAAiB,EAAE,EAAE;QACrB,WAAW,EAAE,KAAK;QAClB,mBAAmB,EAAE,IAAI;QACzB,eAAe,EAAE,EAAE;QACnB,cAAc,EAAE,IAAI;QACpB,qBAAqB,EAAE,KAAK;QAC5B,gBAAgB,EAAE,IAAI;QACtB,4BAA4B,EAAE,KAAK;QACnC,iBAAiB,EAAE,EAAE;QACrB,2BAA2B,EAAE,KAAK;QAClC,aAAa,EAAE,KAAK;QACpB,uBAAuB,EAAE,KAAK;QAC9B,8BAA8B,EAAE,KAAK;QACrC,4CAA4C,EAAE,KAAK;QACnD,gCAAgC,EAAE,KAAK;QACvC,+BAA+B,EAAE,IAAI;QACrC,gBAAgB,EAAE,UAAC,GAAG;YAClB,IAAM,KAAK,GAAG,mBAAmB,GAAG,GAAG,CAAC,UAAU,GAAG,GAAG,GAAG,GAAG,CAAC,IAAI,CAAA;YACnE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACvB,CAAC;QACD,aAAa,EAAE,UAAC,IAAI,IAAK,OAAA,IAAI,EAAJ,CAAI;QAC7B,4BAA4B;QAC5B,UAAU,EAAE,MAAM;QAClB,mBAAmB,EAAE,SAAS;QAC9B,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,EAAE;QACb,mBAAmB,EAAE,KAAK;QAC1B,4BAA4B,EAAE,EAAE,GAAG,EAAE,EAAE,aAAa;KACvD,CAAC,CAAA;CAAA,CAAA;AAEF;IAAA;QAUY,0BAAqB,GAAY,KAAK,CAAA;IAClD,CAAC;IAVG,sBAAI,kEAAoB;aAAxB;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAA;QACrC,CAAC;aACD,UAAyB,KAAc;YACnC,MAAM,CAAC,KAAK,CACR,mJAAmJ,CACtJ,CAAA;YACD,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAA;QACtC,CAAC;;;OANA;IAQL,uCAAC;AAAD,CAAC,AAXD,IAWC;AAED;;;GAGG;AACH;IAyCI;QAAA,iBAiCC;QArDD,mBAAc,GAAG,IAAI,gCAAgC,EAAE,CAAA;QAGvD,gBAAW,GAAiB,WAAW,CAAC,MAAM,CAAA,CAAC,kDAAkD;QAkB7F,IAAI,CAAC,MAAM,GAAG,aAAa,EAAE,CAAA;QAC7B,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAA;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAA;QAC1C,IAAI,CAAC,kBAAkB,GAAG,cAAM,OAAA,wBAAwB,CAAC,KAAI,CAAC,EAA9B,CAA8B,CAAA;QAC9D,IAAI,CAAC,cAAc,GAAG,EAAE,CAAA;QACxB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,yBAAyB,GAAG,SAAS,CAAA;QAC1C,IAAI,CAAC,aAAa,GAAG,SAAS,CAAA;QAC9B,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAA;QACrC,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAA;QAElC,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAA;QACjD,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAA;QAChC,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAA;QAChD,IAAI,CAAC,OAAO,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAA;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,EAAE,CAAA;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAA;QAE5C,2DAA2D;QAC3D,IAAI,CAAC,MAAM,GAAG;YACV,GAAG,EAAE,UAAC,IAAyB,EAAE,EAAW,EAAE,QAA0B;;gBACpE,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,WAAG,GAAC,IAAI,IAAG,EAAE,MAAG,CAAC,CAAC,IAAI,CAAA;gBACxD,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAA;gBAClC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,EAAS,CAAC,CAAA;YACzB,CAAC;YACD,QAAQ,EAAE,UAAC,IAAyB,EAAE,EAAW,EAAE,QAA0B;;gBACzE,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,WAAG,GAAC,IAAI,IAAG,EAAE,MAAG,CAAC,CAAC,IAAI,CAAA;gBACxD,KAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;gBAC7C,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAG,EAAS,CAAC,CAAA;YACzB,CAAC;SACJ,CAAA;IACL,CAAC;IAED,yBAAyB;IAEzB;;;;;;;;;;;;;;;OAeG;IACH,sBAAI,GAAJ,UAAK,KAAa,EAAE,MAA+B,EAAE,IAAa;;QAC9D,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,qBAAqB,EAAE;YACzC,kEAAkE;YAClE,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;SACzC;aAAM;YACH,IAAM,YAAY,GAAG,MAAA,SAAS,CAAC,IAAI,CAAC,mCAAI,IAAI,OAAO,EAAE,CAAA;YACrD,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;YACvC,SAAS,CAAC,IAAI,CAAC,GAAG,YAAY,CAE7B;YAAC,SAAS,CAAC,qBAAqB,CAAS,CAAC,IAAI,CAAC,GAAG,YAAY,CAAA;YAE/D,OAAO,YAAY,CAAA;SACtB;IACL,CAAC;IAED,0DAA0D;IAC1D,EAAE;IACF,4DAA4D;IAC5D,iEAAiE;IACjE,kEAAkE;IAClE,gEAAgE;IAChE,EAAE;IACF,iEAAiE;IACjE,kEAAkE;IAClE,kEAAkE;IAClE,gEAAgE;IAChE,kDAAkD;IAClD,EAAE;IACF,uBAAK,GAAL,UAAM,KAAa,EAAE,MAAmC,EAAE,IAAa;QAAvE,iBA6JC;;QA7JoB,uBAAA,EAAA,WAAmC;QACpD,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;YAC9C,MAAM,CAAC,QAAQ,CACX,6IAA6I,CAChJ,CAAA;YACD,OAAM;SACT;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAA;YAC/E,OAAM;SACT;QAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,EAAmB,CAAA,CAAC,0BAA0B;QAC5D,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAA;QAE3B,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,WAAW,CAAA;QAErE,IAAI,CAAC,UAAU,CACX,OAAO,CAAC,EAAE,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE;YACjC,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,KAAK;SACf,CAAC,CACL,CAAA;QAED,yCAAyC;QACzC,6DAA6D;QAC7D,aAAa;QACb,IAAI,CAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,0CAAE,MAAM,MAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,CAAA,EAAE;YAC9C,6DAA6D;YAC7D,aAAa;YACb,IAAI,CAAC,yBAAyB,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,0CAAE,OAAO,CAAA;SAC1D;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACtD,IAAI,CAAC,kBAAkB;YACnB,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,gBAAgB;gBACxC,CAAC,CAAC,IAAI,CAAC,WAAW;gBAClB,CAAC,CAAC,IAAI,kBAAkB,uBAAM,IAAI,CAAC,MAAM,KAAE,WAAW,EAAE,gBAAgB,IAAG,CAAA;QAEnF,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAA;QACvE,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAA;QACvC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAA;QACxB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QAEzB,IAAI,CAAC,cAAc,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QACzE,IAAI,CAAC,mBAAmB,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QAEzF,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAClD,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,CAAA;QAE/C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE;YACxC,IAAI,CAAC,eAAe,CAAC,4BAA4B,EAAE,CAAA;SACtD;QAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA;QAC5C,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAA;QAC1C,IAAI,WAAW,CAAC,qBAAqB,EAAE;YACnC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA;YAC5C,IAAM,WAAW,GAAG,GAAG,CAAA;YACvB,IAAM,mBAAmB,GAAG,GAAG,CAAA;YAC/B,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,mBAAmB,CAAC,EAAE;gBACrF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;gBAC1B,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAA;aAC7E;iBAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,EAAE;gBAC1C,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;gBAC1B,MAAM,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAA;aAC5F;iBAAM;gBACH,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACzB;SACJ;QAED,2DAA2D;QAC3D,0BAA0B;QAC1B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAA;QAEhD,IAAI,CAAC,UAAU,EAAE,CAAA;QAEjB,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,mCAAmC;YACnC,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,cAAM,OAAA,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,EAAnC,CAAmC,CAAA;YAErE,yDAAyD;YACzD,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE;gBAC5B,IAAI,CAAC,QAAQ,CAAC;oBACV,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;iBAC1C,CAAC,CAAA;gBACF,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;aAChD;SACJ;QAED,6FAA6F;QAC7F,gEAAgE;QAChE,IAAI,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,UAAU,MAAK,SAAS,EAAE;YAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;YAChD,IAAM,QAAQ,GAAG,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,cAAc,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAA;YACtF,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,cAAc,EAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA;YAC9F,IAAI,CAAC,QAAQ,CAAC;gBACV,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU;gBACxC,UAAU,EAAE,QAAQ;aACvB,CAAC,CAAA;SACL;QAED,IAAI,IAAI,CAAC,4BAA4B,EAAE,EAAE;YACrC,IAAM,aAAW,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,YAAY,KAAI,EAAE,CAAC;iBAChE,MAAM,CAAC,UAAC,IAAI,gBAAK,OAAA,CAAC,CAAC,CAAA,MAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,YAAY,0CAAG,IAAI,CAAC,CAAA,CAAA,EAAA,CAAC;iBAC1D,MAAM,CACH,UAAC,GAAqC,EAAE,GAAG;;gBAAK,OAAA,CAC5C,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAA,MAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,YAAY,0CAAG,GAAG,CAAC,KAAI,KAAK,CAAC,EAAE,GAAG,CACnE,CAAA;aAAA,EACD,EAAE,CACL,CAAA;YACL,IAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,mBAAmB,KAAI,EAAE,CAAC;iBAC/E,MAAM,CAAC,UAAC,GAAG,IAAK,OAAA,aAAW,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC;iBACjC,MAAM,CAAC,UAAC,GAA6B,EAAE,GAAG;;gBACvC,IAAI,MAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,mBAAmB,0CAAG,GAAG,CAAC,EAAE;oBAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,MAAA,MAAA,MAAM,CAAC,SAAS,0CAAE,mBAAmB,0CAAG,GAAG,CAAC,CAAA;iBAC1D;gBACD,OAAO,GAAG,CAAA;YACd,CAAC,EAAE,EAAE,CAAC,CAAA;YAEV,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,EAAE,YAAY,EAAE,aAAW,EAAE,mBAAmB,qBAAA,EAAE,CAAC,CAAA;SAC7F;QAED,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;YACzB,0CAA0C;YAC1C,mDAAmD;YACnD,oBAAoB;YACpB,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;YAEhD,IAAI,CAAC,aAAa,CACd;gBACI,WAAW,EAAE,IAAI;gBACjB,UAAU,EAAE,IAAI;aACnB,EACD,EAAE,CACL,CAAA;YACD,0DAA0D;YAC1D,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;SAC/C;QACD,qCAAqC;QACrC,yIAAyI;QACzI,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,gBAAgB,uDAAG,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAExG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAA;QAE/B,8EAA8E;QAC9E,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAAC;gBACpD,KAAI,CAAC,OAAO,EAAE,CAAA;YAClB,CAAC,CAAC,CAAA;SACL;aAAM;YACH,IAAI,CAAC,OAAO,EAAE,CAAA;SACjB;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED,kBAAkB;IAClB,sCAAoB,GAApB,UAAqB,QAAwB;;QACzC,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA;QAC5B,IAAI,QAAQ,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;YACnE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC;gBAC9E,CAAC,CAAC,WAAW,CAAC,MAAM;gBACpB,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC;oBACjE,CAAC,CAAC,WAAW,CAAC,MAAM;oBACpB,CAAC,CAAC,SAAS,CAAA;SAClB;QAED,IAAI,MAAA,QAAQ,CAAC,SAAS,0CAAE,QAAQ,EAAE;YAC9B,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAA;SAC9D;QAED,IAAI,QAAQ,CAAC,qBAAqB,EAAE;YAChC,IAAI,CAAC,qBAAqB,GAAG,QAAQ,CAAC,qBAAqB,CAAA;SAC9D;IACL,CAAC;IAED,yBAAO,GAAP;QAAA,iBAsCC;QArCG,8DAA8D;QAC9D,+DAA+D;QAC/D,aAAa;QACb,IAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAA;QACzD,IAAI,CAAC,aAAa,EAAE;YAChB,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;SAC7C;QAED,IAAI;YACA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SAC3B;QAAC,OAAO,GAAG,EAAE;YACV,MAAM,CAAC,QAAQ,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAA;SACnD;QAED,IAAI,CAAC,wBAAwB,EAAE,CAAA;QAE/B,wGAAwG;QACxG,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,kGAAkG;YAClG,kCAAkC;YAClC,UAAU,CAAC;gBACP,IAAI,QAAQ,EAAE;oBACV,KAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;iBACjF;YACL,CAAC,EAAE,CAAC,CAAC,CAAA;SACR;QAED,mEAAmE;QACnE,8GAA8G;QAC9G,yCAAyC;QACzC,IAAI,CAAC,aAAa,EAAE;YAChB,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;YAEvB,kFAAkF;YAClF,0CAA0C;YAC1C,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,CAAA;SACxC;IACL,CAAC;IAED,0CAAwB,GAAxB;;QACI,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;YACjC,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;gBAC9B,MAAA,IAAI,CAAC,aAAa,0CAAE,MAAM,EAAE,CAAA;aAC/B;SACJ;IACL,CAAC;IAED,6BAAW,GAAX;QAAA,iBAOC;QANG,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE;YACjC,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,UAAC,IAAI,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,EAAlC,CAAkC,CAAC,CAAA;SACjF;QAED,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QACzB,IAAI,CAAC,wBAAwB,EAAE,CAAA;IACnC,CAAC;IAED,gCAAc,GAAd;;QACI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;gBAC/D,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAA;aAChE;YACD,OAAM;SACT;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;YAC/D,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA;SAC7B;QAED,MAAA,IAAI,CAAC,aAAa,0CAAE,MAAM,EAAE,CAAA;QAC5B,MAAA,IAAI,CAAC,WAAW,0CAAE,MAAM,EAAE,CAAA;IAC9B,CAAC;IAED,+BAAa,GAAb,UAAc,OAA6B;QAA3C,iBAiCC;QAhCG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,OAAM;SACT;QAED,IAAI,gBAAgB,EAAE;YAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAClC,OAAM;SACT;QAED,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAClD,OAAM;SACT;QAED,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAA;QAClE,OAAO,CAAC,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE;YACvC,mCAAmC;YACnC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7B,CAAC,CAAA;QACF,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAA;QAE7C,OAAO,uBACA,OAAO,KACV,QAAQ,EAAE,UAAC,QAAQ;;gBACf,KAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;gBAE3C,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,EAAE;oBAC5B,MAAA,MAAA,KAAI,CAAC,MAAM,EAAC,gBAAgB,mDAAG,QAAQ,CAAC,CAAA;iBAC3C;gBAED,MAAA,OAAO,CAAC,QAAQ,wDAAG,QAAQ,CAAC,CAAA;YAChC,CAAC,IACH,CAAA;IACN,CAAC;IAED,yCAAuB,GAAvB,UAAwB,OAA6B;QACjD,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;SAC7C;aAAM;YACH,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;SAC9B;IACL,CAAC;IAED;;;;;;;;;;;OAWG;IACH,gCAAc,GAAd,UAAe,KAAyB;QAAxC,iBA6CC;QA5CG,IAAI,OAAO,CAAA;QACX,IAAM,WAAW,GAAuB,EAAE,CAAA;QAC1C,IAAM,WAAW,GAAuB,EAAE,CAAA;QAC1C,IAAM,eAAe,GAAuB,EAAE,CAAA;QAC9C,UAAU,CAAC,KAAK,EAAE,UAAC,IAAI;YACnB,IAAI,IAAI,EAAE;gBACN,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;gBACjB,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;oBACnB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,8CAA8C;iBAC5E;qBAAM,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;oBAC1B,CAAC;oBAAC,IAAY,CAAC,IAAI,CAAC,KAAI,CAAC,CAAA;iBAC5B;qBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,KAAK,OAAO,EAAE;oBAC9C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBACzB;qBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,WAAW,CAAE,KAAY,CAAC,OAAO,CAAC,CAAC,EAAE;oBACnG,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBAC7B;qBAAM;oBACH,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;iBACzB;aACJ;QACL,CAAC,CAAC,CAAA;QAEF,IAAM,OAAO,GAAG,UAAU,KAAyB,EAAE,OAAY;YAC7D,UAAU,CACN,KAAK,EACL,UAAU,IAAI;gBACV,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;oBACnB,eAAe;oBACf,IAAI,QAAM,GAAG,OAAO,CAAA;oBACpB,KAAK,CAAC,IAAI,EAAE,UAAU,IAAI;wBACtB,QAAM,GAAG,QAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;oBACzD,CAAC,CAAC,CAAA;iBACL;qBAAM;oBACH,6DAA6D;oBAC7D,aAAa;oBACb,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;iBAC3C;YACL,CAAC,EACD,OAAO,CACV,CAAA;QACL,CAAC,CAAA;QAED,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;QAC1B,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;QAC1B,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAA;IAClC,CAAC;IAED,8CAA4B,GAA5B;;QACI,OAAO,CACH,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,CAAC,SAAS,0CAAE,YAAY,KAAI,MAAM,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,MAAM,CAAC,SAAS,0CAAE,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YACpG,KAAK,CACR,CAAA;IACL,CAAC;IAED;;;;;;;;;;;OAWG;IACH,sBAAI,GAAJ,UAAK,IAAsB;QACvB,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;IAC/B,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,yBAAO,GAAP,UAAQ,UAAkB,EAAE,UAA8B,EAAE,OAAwB;;QAChF,sEAAsE;QACtE,oDAAoD;QACpD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACnE,OAAO,MAAM,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAA;SACxD;QAED,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;YACpB,OAAM;SACT;QAED,0CAA0C;QAC1C,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YACpD,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAA;YACzD,OAAM;SACT;QAED,IACI,SAAS;YACT,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB;YACrC,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAChE;YACE,OAAM;SACT;QAED,qBAAqB;QACrB,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,CAAA;QAE/C,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YAC1B,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAA;SACnD;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,CAAA;SACjD;QAED,IAAI,IAAI,GAAkB;YACtB,IAAI,EAAE,MAAM,EAAE;YACd,KAAK,EAAE,UAAU;YACjB,UAAU,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,EAAE,UAAU,IAAI,EAAE,CAAC;SAC7E,CAAA;QAED,IAAI,UAAU,KAAK,WAAW,EAAE;YAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,MAAM,CAAC,CAAA;YAChC,IAAI,CAAC,WAAW,CAAC,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,WAAW,CAAC,CAAA;SAC7C;QAED,IAAI,GAAG,uBAAuB,CAAC,IAAI,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAA;QAC5G,IAAI,CAAC,SAAS,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,KAAI,IAAI,IAAI,EAAE,CAAA;QACjD,IAAI,CAAC,YAAY,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,GAAG,IAAI,CAAA;YACvD,IAAI,CAAC,UAAU,CAAC,kCAAkC,CAAC,GAAG,IAAI,IAAI,EAAE,CAAA;SACnE;QAED,+GAA+G;QAC/G,uEAAuE;QACvE,IAAM,QAAQ,yBAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAK,IAAI,CAAC,MAAM,CAAC,CAAE,CAAA;QAChE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAA;SAC7C;QAED,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QAEzB,IAAM,cAAc,GAAyB;YACzC,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,mCAAI,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC;YAC1F,IAAI,MAAA;YACJ,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS;SAC/B,CAAA;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,CAAC,CAAC,OAAO,KAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA,CAAC,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,cAAc,CAAA,EAAE;YAC9F,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;SAC7C;aAAM;YACH,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAA;SAC/C;QAED,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QAE1C,OAAO,IAAI,CAAA;IACf,CAAC;IAED,iCAAe,GAAf,UAAgB,QAAqC;QACjD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACtC,CAAC;IAED,qCAAmB,GAAnB,UAAoB,SAAiB,EAAE,SAAwB;QAC3D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;QAC5C,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,SAAS,CAAC,EAAnB,CAAmB,CAAC,CAAA;IACjE,CAAC;IAED,6CAA2B,GAA3B,UAA4B,UAAkB,EAAE,gBAA4B;QACxE,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC/C,OAAO,gBAAgB,CAAA;SAC1B;QAED,eAAe;QACf,IAAM,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;QACvE,IAAI,UAAU,gBAAQ,gBAAgB,CAAE,CAAA;QACxC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAA;QAEvC,IAAI,UAAU,KAAK,WAAW,EAAE;YAC5B,IAAM,gBAAgB,yBAAQ,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,GAAK,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAE,CAAA;YACtG,UAAU,CAAC,aAAa,CAAC,GAAG,gBAAgB,CAAC,WAAW,CAAA;YACxD,OAAO,UAAU,CAAA;SACpB;QAED,IAAM,cAAc,GAAG,KAAK,CAAC,UAAU,EAAE,CAAA;QAEzC,IAAI,IAAI,CAAC,cAAc,EAAE;YACf,IAAA,KAA0B,IAAI,CAAC,cAAc,CAAC,6BAA6B,EAAE,EAA3E,SAAS,eAAA,EAAE,QAAQ,cAAwD,CAAA;YACnF,UAAU,CAAC,aAAa,CAAC,GAAG,SAAS,CAAA;YACrC,UAAU,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAA;SACtC;QAED,IACI,IAAI,CAAC,mBAAmB;YACxB,IAAI,CAAC,MAAM,CAAC,oCAAoC;YAChD,CAAC,UAAU,KAAK,WAAW,IAAI,UAAU,KAAK,YAAY,IAAI,UAAU,KAAK,cAAc,CAAC,EAC9F;YACE,IAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAA;YAC/D,UAAU,GAAG,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;SACjD;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,EAAE;YACxC,IAAI,qBAAqB,GAAwB,EAAE,CAAA;YACnD,IAAI,UAAU,KAAK,WAAW,EAAE;gBAC5B,qBAAqB,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAA;aAC5D;iBAAM,IAAI,UAAU,KAAK,YAAY,EAAE;gBACpC,qBAAqB,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAA;aAC7D;YACD,UAAU,GAAG,OAAO,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAA;SAC1D;QAED,IAAI,UAAU,KAAK,WAAW,IAAI,QAAQ,EAAE;YACxC,UAAU,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAA;SACvC;QAED,IAAI,UAAU,KAAK,oBAAoB,EAAE;YACrC,IAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAA;YACtD,6EAA6E;YAC7E,UAAU,CAAC,aAAa,CAAC,GAAG,gBAAgB,CAAC,WAAW,CAAA;YACxD,UAAU,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC,YAAY,CAAA;YACxD,OAAO,UAAU,CAAA;SACpB;QAED,mEAAmE;QACnE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE;YAChC,IAAM,cAAc,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,eAAe,CAAA;YAC7D,UAAU,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;SAC3E;QAED,wEAAwE;QACxE,mCAAmC;QACnC,IAAI,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE;YACnD,UAAU,CAAC,eAAe,CAAC,GAAG,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC;gBACxF,CAAC,CAAC,KAAK;gBACP,CAAC,CAAC,SAAS,CAAA;SAClB;QAED,gEAAgE;QAChE,4DAA4D;QAC5D,+CAA+C;QAE/C,4DAA4D;QAC5D,UAAU,GAAG,OAAO,CAChB,EAAE,EACF,KAAK,CAAC,UAAU,EAAE,EAClB,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAC7B,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,EACpC,UAAU,CACb,CAAA;QAED,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE;YACrF,mGAAmG;YACnG,yDAAyD;YACzD,IAAM,iBAAiB,0CAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,kBAAK,IAAI,CAAC,MAAM,CAAC,iBAAiB,SAAC,CAAA;YAC/F,KAAK,CAAC,iBAAiB,EAAE,UAAU,eAAe;gBAC9C,OAAO,UAAU,CAAC,eAAe,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;SACL;aAAM;YACH,MAAM,CAAC,KAAK,CACR,8CAA8C;gBAC1C,IAAI,CAAC,MAAM,CAAC,iBAAiB;gBAC7B,iCAAiC;gBACjC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CACrC,CAAA;SACJ;QAED,IAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAA;QAC3D,IAAI,mBAAmB,EAAE;YACrB,UAAU,GAAG,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;SAC3D;QAED,OAAO,UAAU,CAAA;IACrB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,0BAAQ,GAAR,UAAS,UAAsB,EAAE,IAAa;;QAC1C,MAAA,IAAI,CAAC,WAAW,0CAAE,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;IAChD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,+BAAa,GAAb,UAAc,UAAsB,EAAE,aAAwB,EAAE,IAAa;;QACzE,MAAA,IAAI,CAAC,WAAW,0CAAE,aAAa,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,CAAA;IACpE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,sCAAoB,GAApB,UAAqB,UAAsB;;QACvC,MAAA,IAAI,CAAC,kBAAkB,0CAAE,QAAQ,CAAC,UAAU,CAAC,CAAA;IACjD,CAAC;IAED;;;;OAIG;IACH,4BAAU,GAAV,UAAW,QAAgB;;QACvB,MAAA,IAAI,CAAC,WAAW,0CAAE,UAAU,CAAC,QAAQ,CAAC,CAAA;IAC1C,CAAC;IAED;;;;OAIG;IACH,wCAAsB,GAAtB,UAAuB,QAAgB;;QACnC,MAAA,IAAI,CAAC,kBAAkB,0CAAE,UAAU,CAAC,QAAQ,CAAC,CAAA;IACjD,CAAC;IAED,kCAAgB,GAAhB,UAAiB,IAAY,EAAE,KAAe;;QAC1C,IAAI,CAAC,QAAQ,WAAG,GAAC,IAAI,IAAG,KAAK,MAAG,CAAA;IACpC,CAAC;IAED;;;;;;;;;OASG;IACH,gCAAc,GAAd,UAAe,GAAW,EAAE,OAAkC;QAC1D,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACzD,CAAC;IAED;;;;;;;;;;;OAWG;IACH,uCAAqB,GAArB,UAAsB,GAAW;QAC7B,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAA;QAC5D,IAAI;YACA,OAAO,IAAI,CAAC,KAAK,CAAC,OAAc,CAAC,CAAA;SACpC;QAAC,WAAM;YACJ,OAAO,OAAO,CAAA;SACjB;IACL,CAAC;IAED;;;;;;;;;OASG;IACH,kCAAgB,GAAhB,UAAiB,GAAW,EAAE,OAAiC;QAC3D,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IAC3D,CAAC;IAED,oCAAkB,GAAlB;QACI,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAA;IAC1C,CAAC;IAED,yDAAyD;IACzD,oDAAkC,GAAlC,UAAmC,GAAW,EAAE,UAAmB;QAC/D,IAAI,CAAC,YAAY,CAAC,kCAAkC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAA;IACzE,CAAC;IAED,iGAAiG;IACjG,wCAAsB,GAAtB,UAAuB,QAAoC,EAAE,YAAoB;QAApB,6BAAA,EAAA,oBAAoB;QAC7E,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAA;IAC3E,CAAC;IAED;;;;;;;;;;;OAWG;IACH,gCAAc,GAAd,UAAe,QAA+E;QAC1F,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;IACrD,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,6BAAW,GAAX,UAAY,QAAkC;;QAC1C,OAAO,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,WAAW,CAAC,QAAQ,CAAC,mCAAI,CAAC,cAAO,CAAC,CAAC,CAAA;IACnE,CAAC;IAED,+BAA+B;IAC/B,4BAAU,GAAV,UAAW,QAAwB,EAAE,WAAmB;QAAnB,4BAAA,EAAA,mBAAmB;QACpD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAA;IAClD,CAAC;IAED,+DAA+D;IAC/D,0CAAwB,GAAxB,UAAyB,QAAwB,EAAE,WAAmB;QAAnB,4BAAA,EAAA,mBAAmB;QAClE,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAA;IAChE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6CG;IACH,0BAAQ,GAAR,UAAS,eAAwB,EAAE,mBAAgC,EAAE,uBAAoC;QACrG,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrC,OAAO,MAAM,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAA;SACzD;QACD,IAAI,SAAS,CAAC,eAAe,CAAC,EAAE;YAC5B,eAAe,GAAI,eAA0B,CAAC,QAAQ,EAAE,CAAA;YACxD,MAAM,CAAC,IAAI,CACP,oHAAoH,CACvH,CAAA;SACJ;QAED,mEAAmE;QACnE,IAAI,CAAC,eAAe,EAAE;YAClB,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAA;YACnE,OAAM;SACT;QAED,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;YACzC,MAAM,CAAC,QAAQ,CACX,uBAAe,eAAe,8HAA0H,CAC3J,CAAA;YACD,OAAM;SACT;QAED,IAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;QACnD,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,CAAC,CAAA;QAE5C,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YAClC,qEAAqE;YACrE,oDAAoD;YACpD,IAAM,SAAS,GAAG,oBAAoB,CAAA;YACtC,IAAI,CAAC,aAAa,CACd;gBACI,0BAA0B,EAAE,IAAI;gBAChC,UAAU,EAAE,SAAS;aACxB,EACD,EAAE,CACL,CAAA;SACJ;QAED,oEAAoE;QACpE,IAAI,eAAe,KAAK,oBAAoB,IAAI,eAAe,KAAK,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;YACjG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAA;YAC7B,IAAI,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC,CAAA;SAClD;QAED,IAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,KAAK,WAAW,CAAA;QAE1E,gGAAgG;QAChG,8EAA8E;QAC9E,IAAI,eAAe,KAAK,oBAAoB,IAAI,gBAAgB,EAAE;YAC9D,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;YAE7C,iCAAiC;YACjC,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,IAAI,EAAE,EAAE,KAAK,CAAC,CAAA;YAElE,IAAI,CAAC,OAAO,CACR,WAAW,EACX;gBACI,WAAW,EAAE,eAAe;gBAC5B,iBAAiB,EAAE,oBAAoB;aAC1C,EACD,EAAE,IAAI,EAAE,mBAAmB,IAAI,EAAE,EAAE,SAAS,EAAE,uBAAuB,IAAI,EAAE,EAAE,CAChF,CAAA;YACD,6EAA6E;YAC7E,uBAAuB;YACvB,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,CAAA;SACjE;aAAM,IAAI,mBAAmB,IAAI,uBAAuB,EAAE;YACvD,qGAAqG;YACrG,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,uBAAuB,CAAC,CAAA;SACzE;QAED,4DAA4D;QAC5D,6EAA6E;QAC7E,IAAI,eAAe,KAAK,oBAAoB,EAAE;YAC1C,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACzB,mCAAmC;YACnC,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAA;SACtC;IACL,CAAC;IAED;;;;;;OAMG;IACH,qCAAmB,GAAnB,UAAoB,mBAAgC,EAAE,uBAAoC;QACtF,IAAI,CAAC,mBAAmB,IAAI,CAAC,uBAAuB,EAAE;YAClD,OAAM;SACT;QAED,iCAAiC;QACjC,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAA;QAE3D,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,mBAAmB,IAAI,EAAE,EAAE,SAAS,EAAE,uBAAuB,IAAI,EAAE,EAAE,CAAC,CAAA;IACvG,CAAC;IAED;;;;;;;;OAQG;IACH,uBAAK,GAAL,UAAM,SAAiB,EAAE,QAAgB,EAAE,oBAAiC;;QACxE,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,EAAE;YACzB,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAA;YACjE,OAAM;SACT;QAED,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,EAAE,CAAA;QAEvC,uDAAuD;QACvD,IAAI,cAAc,CAAC,SAAS,CAAC,KAAK,QAAQ,EAAE;YACxC,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAA;SAC/C;QAED,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,wBAAO,cAAc,gBAAG,SAAS,IAAG,QAAQ,MAAE,EAAE,CAAC,CAAA;QAExE,IAAI,oBAAoB,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBAC3B,WAAW,EAAE,SAAS;gBACtB,UAAU,EAAE,QAAQ;gBACpB,UAAU,EAAE,oBAAoB;aACnC,CAAC,CAAA;YACF,IAAI,CAAC,0BAA0B,WAAG,GAAC,SAAS,IAAG,oBAAoB,MAAG,CAAA;SACzE;QAED,mEAAmE;QACnE,4EAA4E;QAC5E,IAAI,cAAc,CAAC,SAAS,CAAC,KAAK,QAAQ,IAAI,CAAC,oBAAoB,EAAE;YACjE,IAAI,CAAC,kBAAkB,EAAE,CAAA;SAC5B;IACL,CAAC;IAED;;OAEG;IACH,6BAAW,GAAX;QACI,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAA;QAC9B,IAAI,CAAC,4BAA4B,EAAE,CAAA;QAEnC,2CAA2C;QAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC7B,CAAC;IAED;;;;OAIG;IACH,6CAA2B,GAA3B,UAA4B,UAAsB,EAAE,kBAAyB;QAAzB,mCAAA,EAAA,yBAAyB;QACzE,IAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAA;IACjF,CAAC;IAED,+CAA6B,GAA7B;QACI,IAAI,CAAC,YAAY,CAAC,6BAA6B,EAAE,CAAA;IACrD,CAAC;IAED;;;;;;;OAOG;IACH,4CAA0B,GAA1B,UAA2B,UAA0C,EAAE,kBAAyB;QAAzB,mCAAA,EAAA,yBAAyB;QAC5F,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAA;IAChF,CAAC;IAED,8CAA4B,GAA5B,UAA6B,UAAmB;QAC5C,IAAI,CAAC,YAAY,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAA;IAC9D,CAAC;IAED;;;OAGG;IACH,uBAAK,GAAL,UAAM,eAAyB;;QAC3B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,OAAO,MAAM,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAA;SACtD;QACD,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;QACjD,MAAA,IAAI,CAAC,WAAW,0CAAE,KAAK,EAAE,CAAA;QACzB,MAAA,IAAI,CAAC,kBAAkB,0CAAE,KAAK,EAAE,CAAA;QAChC,MAAA,IAAI,CAAC,WAAW,0CAAE,cAAc,CAAC,WAAW,CAAC,CAAA;QAC7C,MAAA,IAAI,CAAC,cAAc,0CAAE,cAAc,EAAE,CAAA;QACrC,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAA;QAChD,IAAI,CAAC,aAAa,CACd;YACI,WAAW,EAAE,IAAI;YACjB,UAAU,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;SACjD,EACD,EAAE,CACL,CAAA;IACL,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,iCAAe,GAAf;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAA;IAC3C,CAAC;IAED,2BAAS,GAAT;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAA;IAC7C,CAAC;IAED;;;;;OAKG;IAEH,gCAAc,GAAd;;QACI,OAAO,MAAA,MAAA,IAAI,CAAC,cAAc,0CAAE,6BAA6B,CAAC,IAAI,EAAE,SAAS,mCAAI,EAAE,CAAA;IACnF,CAAC;IAED;;;;;;OAMG;IACH,wCAAsB,GAAtB,UAAuB,OAAiE;;QACpF,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,OAAO,EAAE,CAAA;SACZ;QACK,IAAA,KAAuC,IAAI,CAAC,cAAc,CAAC,6BAA6B,CAAC,IAAI,CAAC,EAA5F,SAAS,eAAA,EAAE,qBAAqB,2BAA4D,CAAA;QACpG,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,GAAG,SAAS,CAAC,CAAA;QACtE,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,KAAI,qBAAqB,EAAE;YACjD,IAAM,SAAS,GAAG,MAAA,OAAO,CAAC,iBAAiB,mCAAI,EAAE,CAAA;YACjD,IAAI,CAAC,qBAAqB,EAAE;gBACxB,OAAO,GAAG,CAAA;aACb;YACD,IAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC/B,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,qBAAqB,CAAC,GAAG,IAAI,CAAC,GAAG,SAAS,EAC7E,CAAC,CACJ,CAAA;YACD,GAAG,IAAI,aAAM,kBAAkB,CAAE,CAAA;SACpC;QAED,OAAO,GAAG,CAAA;IACd,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,uBAAK,GAAL,UAAM,KAAa,EAAE,QAAiB;QAClC,kFAAkF;QAClF,0FAA0F;QAC1F,uCAAuC;QACvC,IAAI,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,EAAE;YACrD,MAAM,CAAC,QAAQ,CAAC,iEAAiE,CAAC,CAAA;YAClF,OAAO,CAAC,CAAC,CAAA;SACZ;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;YACxB,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;SACpC;QACD,IAAI,KAAK,KAAK,QAAQ,EAAE;YACpB,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAA;YAC1C,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAA;SAChF;aAAM;YACH,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAA;YACrE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YACpB,OAAO,CAAC,CAAC,CAAA;SACZ;IACL,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwIG;IAEH,4BAAU,GAAV,UAAW,MAA8B;;QACrC,IAAM,SAAS,gBAAQ,IAAI,CAAC,MAAM,CAAE,CAAA;QACpC,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;YACnB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAE5B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE;gBAC/B,IAAI,CAAC,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAA;aACzD;YACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE;gBAClC,IAAI,CAAC,MAAM,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAA;aAC/D;YAED,MAAA,IAAI,CAAC,WAAW,0CAAE,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;YACvD,IAAI,CAAC,kBAAkB;gBACnB,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,gBAAgB;oBACxC,CAAC,CAAC,IAAI,CAAC,WAAW;oBAClB,CAAC,CAAC,IAAI,kBAAkB,uBAAM,IAAI,CAAC,MAAM,KAAE,WAAW,EAAE,gBAAgB,IAAG,CAAA;YAEnF,IAAI,UAAU,CAAC,YAAY,EAAE,IAAI,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAM,EAAE;gBACpE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAA;aAC3B;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;gBACnB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAA;aACtB;YAED,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAAE;gBAC1E,IAAM,qCAAqC,GACvC,SAAS,CAAC,yBAAyB,KAAK,MAAM,CAAC,yBAAyB,CAAA;gBAC5E,wDAAwD;gBACxD,IAAM,uBAAuB,GACzB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAA;gBAE9F,IAAI,qCAAqC,IAAI,uBAAuB,EAAE;oBAClE,IAAI,MAAM,CAAC,yBAAyB,EAAE;wBAClC,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAA;qBACxC;yBAAM;wBACH,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,CAAA;qBAClD;iBACJ;aACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,uCAAqB,GAArB;QACI,IAAI,CAAC,UAAU,CAAC,EAAE,yBAAyB,EAAE,KAAK,EAAE,CAAC,CAAA;IACzD,CAAC;IAED;;;OAGG;IACH,sCAAoB,GAApB;QACI,IAAI,CAAC,UAAU,CAAC,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,CAAA;IACxD,CAAC;IAED;;;OAGG;IACH,yCAAuB,GAAvB;;QACI,OAAO,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,gBAAgB,0CAAE,OAAO,CAAA,CAAA;IAC3C,CAAC;IAED;;;OAGG;IAEH,6BAAW,GAAX,UAAY,MAAqB;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;IAC3C,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,8BAAY,GAAZ,UAAa,aAAqB;;QAC9B,OAAO,MAAA,IAAI,CAAC,WAAW,0CAAE,KAAK,CAAC,aAAa,CAAC,CAAA;IACjD,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACH,oCAAkB,GAAlB,UAAmB,aAAqB;;QACpC,OAAO,MAAA,IAAI,CAAC,kBAAkB,0CAAE,KAAK,CAAC,aAAa,CAAC,CAAA;IACxD,CAAC;IAED,0BAAQ,GAAR;;QACI,IAAI,IAAI,GAAG,MAAA,IAAI,CAAC,MAAM,CAAC,IAAI,mCAAI,qBAAqB,CAAA;QACpD,IAAI,IAAI,KAAK,qBAAqB,EAAE;YAChC,IAAI,GAAG,qBAAqB,GAAG,GAAG,GAAG,IAAI,CAAA;SAC5C;QACD,OAAO,IAAI,CAAA;IACf,CAAC;IAED,yDAAyD;IACzD,4BAAU,GAAV;QACI,IAAM,yBAAyB,GAAG,IAAI,CAAC,MAAM,CAAC,kCAAkC,KAAK,cAAc,CAAA;QAEnG,gEAAgE;QAChE,IAAI,yBAAyB,IAAI,UAAU,CAAC,YAAY,EAAE,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAC,EAAE;gBAC/F,IAAI,CAAC,gBAAgB,CAAC,EAAE,kBAAkB,EAAE,KAAK,EAAE,CAAC,CAAA;aACvD;YACD,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAC,EAAE;gBACjG,IAAI,CAAC,iBAAiB,CAAC,EAAE,iBAAiB,EAAE,KAAK,EAAE,CAAC,CAAA;aACvD;YACD,IAAI,CAAC,0BAA0B,CAAC;gBAC5B,gBAAgB,EAAE,QAAQ;gBAC1B,kBAAkB,EAAE,KAAK;aAC5B,CAAC,CAAA;SACL;QAED,oFAAoF;QACpF,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;YAChC,IAAI,CAAC,wBAAwB,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAA;YAE1D,6CAA6C;YAC7C,wFAAwF;YACxF,2EAA2E;SAC9E;aAAM,IACH,CAAC,IAAI,CAAC,sBAAsB,EAAE;YAC9B,CAAC,IAAI,CAAC,MAAM,CAAC,4BAA4B,IAAI,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAC5E;YACE,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;YAC/B,IAAI,CAAC,iBAAiB,CAAC;gBACnB,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,8BAA8B;aAChE,CAAC,CAAA;SACL;IACL,CAAC;IAED;;;;;OAKG;IACH,0CAAwB,GAAxB,UAAyB,OAA0C;;QAC/D,IAAI,QAAQ,CAAA;QACZ,IAAI,OAAO,IAAI,OAAO,CAAC,mBAAmB,CAAC,EAAE;YACzC,QAAQ,GAAG,IAAI,CAAA;SAClB;aAAM,IAAI,OAAO,IAAI,OAAO,CAAC,oBAAoB,CAAC,EAAE;YACjD,QAAQ,GAAG,KAAK,CAAA;SACnB;aAAM;YACH,OAAM;SACT;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,CAAA,MAAA,IAAI,CAAC,WAAW,0CAAE,QAAQ,MAAK,QAAQ,EAAE;YAC7E,MAAA,IAAI,CAAC,WAAW,0CAAE,YAAY,CAAC,QAAQ,CAAC,CAAA;SAC3C;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,CAAA,MAAA,IAAI,CAAC,kBAAkB,0CAAE,QAAQ,MAAK,QAAQ,EAAE;YACpF,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,CAAC,QAAQ,CAAC,CAAA;SAClD;IACL,CAAC;IAED,sFAAsF;IACtF,iCAAe,GAAf,UACI,IAAgD,EAChD,OAA2C;QAE3C,OAAO,GAAG,OAAO,CACb;YACI,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,kCAAkC;YAChE,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,+BAA+B;YAC1D,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB;YAChD,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB;YAC1D,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;SAC3C,EACD,OAAO,IAAI,EAAE,CAChB,CAAA;QAED,6FAA6F;QAC7F,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,IAAI,OAAO,CAAC,kBAAkB,CAAC,KAAK,cAAc,EAAE;YAC9E,OAAO,CAAC,kBAAkB,CAAC,GAAG,QAAQ,CAAA;SACzC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YAC3B,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC;YAC3B,gBAAgB,EAAE,OAAO,CAAC,oBAAoB,CAAC;YAC/C,iBAAiB,EAAE,OAAO,CAAC,oBAAoB,CAAC;YAChD,eAAe,EAAE,OAAO,CAAC,kBAAkB,CAAC;YAC5C,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC;YAC3C,gBAAgB,EAAE,OAAO,CAAC,mBAAmB,CAAC;YAC9C,oBAAoB,EAAE,OAAO,CAAC,wBAAwB,CAAC;YACvD,YAAY,EAAE,OAAO,CAAC,eAAe,CAAC;SACzC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4BG;IACH,kCAAgB,GAAhB,UAAiB,OAA2C;QACxD,OAAO,GAAG,OAAO,CACb;YACI,kBAAkB,EAAE,IAAI;SAC3B,EACD,OAAO,IAAI,EAAE,CAChB,CAAA;QAED,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;QACpC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAA;IAC1C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,mCAAiB,GAAjB,UAAkB,OAA2C;QACzD,IAAM,QAAQ,GAAG,OAAO,CACpB;YACI,iBAAiB,EAAE,IAAI;SAC1B,EACD,OAAO,IAAI,EAAE,CAChB,CAAA;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QACtC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAA;IAC3C,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,wCAAsB,GAAtB,UAAuB,OAA2C;QAC9D,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;IACpD,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,yCAAuB,GAAvB,UAAwB,OAA2C;QAC/D,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;IACrD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,4CAA0B,GAA1B,UAA2B,OAA2C;QAClE,IAAM,QAAQ,GAAsC,OAAO,CACvD;YACI,kBAAkB,EAAE,IAAI;SAC3B,EACD,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAChB,CAAA;QACD,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAA;QAC7C,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAA;IAC3C,CAAC;IAED,uBAAK,GAAL,UAAM,KAAe;QACjB,IAAI,KAAK,KAAK,KAAK,EAAE;YACjB,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAA;YAClD,YAAY,IAAI,YAAY,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;YACnD,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAA;SACpC;aAAM;YACH,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,GAAG,CACf,mIAAmI,CACtI,CAAA;YACD,YAAY,IAAI,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;YACxD,IAAI,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;SACnC;IACL,CAAC;IACL,cAAC;AAAD,CAAC,AAhwDD,IAgwDC;;AAED,eAAe,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC,CAAA;AAEtC,IAAM,sBAAsB,GAAG;IAC3B,mCAAmC;IACnC,SAAS,kBAAkB;QACvB,wDAAwD;QACxD,IAAK,kBAA0B,CAAC,IAAI,EAAE;YAClC,OAAM;SACT;QACD,CAAC;QAAC,kBAA0B,CAAC,IAAI,GAAG,IAAI,CAAA;QAExC,gBAAgB,GAAG,KAAK,CAAA;QAExB,KAAK,CAAC,SAAS,EAAE,UAAU,IAAa;YACpC,IAAI,CAAC,WAAW,EAAE,CAAA;QACtB,CAAC,CAAC,CAAA;IACN,CAAC;IAED,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,gBAAgB,EAAE;QAC5B,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;YACpC,kEAAkE;YAClE,iEAAiE;YACjE,+DAA+D;YAC/D,0BAA0B;YAC1B,kBAAkB,EAAE,CAAA;SACvB;aAAM;YACH,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAA;SAC3E;KACJ;IAED,qCAAqC;IACrC,IAAI,MAAM,EAAE;QACR,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAA;KAC5D;AACL,CAAC,CAAA;AAED,MAAM,UAAU,iBAAiB;IAC7B,IAAM,WAAW,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,IAAI,OAAO,EAAE,CAAC,CAAA;IAEtE,IAAM,cAAc,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAA;IAElD,IAAI,cAAc,EAAE;QAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA4BG;QAEH,0CAA0C;QAE1C,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,UAAU,IAAmE;YACrG,IAAI,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACxB,IAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBAE5D,IAAM,eAAe,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAA;gBAEjE,IAAI,QAAQ,EAAE;oBACV,kEAAkE;oBAClE,qEAAqE;oBACrE,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC,CAAA;oBACrE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;iBAC3C;aACJ;QACL,CAAC,CAAC,CAAA;KACL;IAED,gBAAgB,CAAC,SAAS,CAAC,GAAG,WAAW,CAAA;IAEzC,sBAAsB,EAAE,CAAA;AAC5B,CAAC;AAED,MAAM,UAAU,cAAc;IAC1B,IAAM,WAAW,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,IAAI,OAAO,EAAE,CAAC,CAAA;IAEtE,sBAAsB,EAAE,CAAA;IAExB,OAAO,WAAW,CAAA;AACtB,CAAC","sourcesContent":["import Config from './config'\nimport {\n    _copyAndTruncateStrings,\n    _each,\n    _eachArray,\n    _extend,\n    _includes,\n    _register_event,\n    _safewrap_class,\n    isCrossDomainCookie,\n    isDistinctIdStringLike,\n} from './utils'\nimport { window, assignableWindow } from './utils/globals'\nimport { autocapture } from './autocapture'\nimport { PostHogFeatureFlags } from './posthog-featureflags'\nimport { PostHogPersistence } from './posthog-persistence'\nimport { ALIAS_ID_KEY, FLAG_CALL_REPORTED, PEOPLE_DISTINCT_ID_KEY } from './constants'\nimport { SessionRecording } from './extensions/replay/sessionrecording'\nimport { Decide } from './decide'\nimport { Toolbar } from './extensions/toolbar'\nimport { clearOptInOut, hasOptedIn, hasOptedOut, optIn, optOut, userOptedOut } from './gdpr-utils'\nimport { cookieStore, localStore } from './storage'\nimport { RequestQueue } from './request-queue'\nimport { RetryQueue } from './retry-queue'\nimport { SessionIdManager } from './sessionid'\nimport { RequestRouter } from './utils/request-router'\nimport {\n    AutocaptureConfig,\n    CaptureOptions,\n    CaptureResult,\n    Compression,\n    DecideResponse,\n    EarlyAccessFeatureCallback,\n    GDPROptions,\n    IsFeatureEnabledOptions,\n    JsonType,\n    OptInOutCapturingOptions,\n    PostHogConfig,\n    Properties,\n    Property,\n    QueuedRequestOptions,\n    RequestCallback,\n    SessionIdChangedCallback,\n    SnippetArrayItem,\n    ToolbarParams,\n} from './types'\nimport { SentryIntegration } from './extensions/sentry-integration'\nimport { createSegmentIntegration } from './extensions/segment-integration'\nimport { PageViewManager } from './page-view'\nimport { PostHogSurveys } from './posthog-surveys'\nimport { RateLimiter } from './rate-limiter'\nimport { uuidv7 } from './uuidv7'\nimport { SurveyCallback } from './posthog-surveys-types'\nimport {\n    _isArray,\n    _isEmptyObject,\n    _isEmptyString,\n    _isFunction,\n    _isNumber,\n    _isObject,\n    _isString,\n    _isUndefined,\n} from './utils/type-utils'\nimport { _info } from './utils/event-utils'\nimport { logger } from './utils/logger'\nimport { document, userAgent } from './utils/globals'\nimport { SessionPropsManager } from './session-props'\nimport { _isBlockedUA } from './utils/blocked-uas'\nimport { extendURLParams, request, SUPPORTS_REQUEST } from './request'\n\n/*\nSIMPLE STYLE GUIDE:\n\nthis.x === public function\nthis._x === internal - only use within this file\nthis.__x === private - only use within the class\n\nGlobals should be all caps\n*/\n\nconst instances: Record<string, PostHog> = {}\n\n// some globals for comparisons\nconst __NOOP = () => {}\n\nconst PRIMARY_INSTANCE_NAME = 'posthog'\n\n/*\n * Dynamic... constants? Is that an oxymoron?\n */\n// http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\n// https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#withCredentials\n\n// IE<10 does not support cross-origin XHR's but script tags\n// with defer won't block window.onload; ENQUEUE_REQUESTS\n// should only be true for Opera<12\nlet ENQUEUE_REQUESTS = !SUPPORTS_REQUEST && userAgent?.indexOf('MSIE') === -1 && userAgent?.indexOf('Mozilla') === -1\n\nexport const defaultConfig = (): PostHogConfig => ({\n    api_host: 'https://app.posthog.com',\n    api_transport: 'XHR',\n    ui_host: null,\n    token: '',\n    autocapture: true,\n    rageclick: true,\n    cross_subdomain_cookie: isCrossDomainCookie(document?.location),\n    persistence: 'localStorage+cookie', // up to 1.92.0 this was 'cookie'. It's easy to migrate as 'localStorage+cookie' will migrate data from cookie storage\n    persistence_name: '',\n    cookie_name: '',\n    loaded: __NOOP,\n    store_google: true,\n    custom_campaign_params: [],\n    custom_blocked_useragents: [],\n    save_referrer: true,\n    capture_pageview: true,\n    capture_pageleave: true, // We'll only capture pageleave events if capture_pageview is also true\n    debug: false,\n    verbose: false,\n    cookie_expiration: 365,\n    upgrade: false,\n    disable_session_recording: false,\n    disable_persistence: false,\n    disable_cookie: false,\n    enable_recording_console_log: undefined, // When undefined, it falls back to the server-side setting\n    secure_cookie: window?.location?.protocol === 'https:',\n    ip: true,\n    opt_out_capturing_by_default: false,\n    opt_out_persistence_by_default: false,\n    opt_out_useragent_filter: false,\n    opt_out_capturing_persistence_type: 'localStorage',\n    opt_out_capturing_cookie_prefix: null,\n    opt_in_site_apps: false,\n    // Deprecated, use property_denylist instead.\n    property_blacklist: [],\n    property_denylist: [],\n    respect_dnt: false,\n    sanitize_properties: null,\n    request_headers: {}, // { header: value, header2: value }\n    inapp_protocol: '//',\n    inapp_link_new_window: false,\n    request_batching: true,\n    properties_string_max_length: 65535,\n    session_recording: {},\n    mask_all_element_attributes: false,\n    mask_all_text: false,\n    advanced_disable_decide: false,\n    advanced_disable_feature_flags: false,\n    advanced_disable_feature_flags_on_first_load: false,\n    advanced_disable_toolbar_metrics: false,\n    feature_flag_request_timeout_ms: 3000,\n    on_request_error: (res) => {\n        const error = 'Bad HTTP status: ' + res.statusCode + ' ' + res.text\n        logger.error(error)\n    },\n    get_device_id: (uuid) => uuid,\n    // Used for internal testing\n    _onCapture: __NOOP,\n    capture_performance: undefined,\n    name: 'posthog',\n    bootstrap: {},\n    disable_compression: false,\n    session_idle_timeout_seconds: 30 * 60, // 30 minutes\n})\n\nclass DeprecatedWebPerformanceObserver {\n    get _forceAllowLocalhost(): boolean {\n        return this.__forceAllowLocalhost\n    }\n    set _forceAllowLocalhost(value: boolean) {\n        logger.error(\n            'WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`'\n        )\n        this.__forceAllowLocalhost = value\n    }\n    private __forceAllowLocalhost: boolean = false\n}\n\n/**\n * PostHog Library Object\n * @constructor\n */\nexport class PostHog {\n    __loaded: boolean\n    __loaded_recorder_version: 'v1' | 'v2' | undefined // flag that keeps track of which version of recorder is loaded\n    config: PostHogConfig\n\n    rateLimiter: RateLimiter\n    pageViewManager: PageViewManager\n    featureFlags: PostHogFeatureFlags\n    surveys: PostHogSurveys\n    toolbar: Toolbar\n\n    // These are instance-specific state created after initialisation\n    persistence?: PostHogPersistence\n    sessionPersistence?: PostHogPersistence\n    sessionManager?: SessionIdManager\n    sessionPropsManager?: SessionPropsManager\n    requestRouter: RequestRouter\n\n    _requestQueue?: RequestQueue\n    _retryQueue?: RetryQueue\n    sessionRecording?: SessionRecording\n    webPerformance = new DeprecatedWebPerformanceObserver()\n\n    _triggered_notifs: any\n    compression?: Compression = Compression.Base64 // Upgrades to gzip if decide response supports it\n    __captureHooks: ((eventName: string) => void)[]\n    __request_queue: QueuedRequestOptions[]\n    __autocapture: boolean | AutocaptureConfig | undefined\n    decideEndpointWasHit: boolean\n    analyticsDefaultEndpoint: string\n    elementsChainAsString: boolean\n\n    SentryIntegration: typeof SentryIntegration\n    segmentIntegration: () => any\n\n    /** DEPRECATED: We keep this to support existing usage but now one should just call .setPersonProperties */\n    people: {\n        set: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n        set_once: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n    }\n\n    constructor() {\n        this.config = defaultConfig()\n        this.decideEndpointWasHit = false\n        this.SentryIntegration = SentryIntegration\n        this.segmentIntegration = () => createSegmentIntegration(this)\n        this.__captureHooks = []\n        this.__request_queue = []\n        this.__loaded = false\n        this.__loaded_recorder_version = undefined\n        this.__autocapture = undefined\n        this.analyticsDefaultEndpoint = '/e/'\n        this.elementsChainAsString = false\n\n        this.featureFlags = new PostHogFeatureFlags(this)\n        this.toolbar = new Toolbar(this)\n        this.pageViewManager = new PageViewManager(this)\n        this.surveys = new PostHogSurveys(this)\n        this.rateLimiter = new RateLimiter()\n        this.requestRouter = new RequestRouter(this)\n\n        // NOTE: See the property definition for deprecation notice\n        this.people = {\n            set: (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n                const setProps = _isString(prop) ? { [prop]: to } : prop\n                this.setPersonProperties(setProps)\n                callback?.({} as any)\n            },\n            set_once: (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n                const setProps = _isString(prop) ? { [prop]: to } : prop\n                this.setPersonProperties(undefined, setProps)\n                callback?.({} as any)\n            },\n        }\n    }\n\n    // Initialization methods\n\n    /**\n     * This function initializes a new instance of the PostHog capturing object.\n     * All new instances are added to the main posthog object as sub properties (such as\n     * posthog.library_name) and also returned by this function. To define a\n     * second instance on the page, you would call:\n     *\n     *     posthog.init('new token', { your: 'config' }, 'library_name');\n     *\n     * and use it like so:\n     *\n     *     posthog.library_name.capture(...);\n     *\n     * @param {String} token   Your PostHog API token\n     * @param {Object} [config]  A dictionary of config options to override. <a href=\"https://github.com/posthog/posthog-js/blob/6e0e873/src/posthog-core.js#L57-L91\">See a list of default config options</a>.\n     * @param {String} [name]    The name for the new posthog instance that you want created\n     */\n    init(token: string, config?: Partial<PostHogConfig>, name?: string): PostHog | void {\n        if (!name || name === PRIMARY_INSTANCE_NAME) {\n            // This means we are initialising the primary instance (i.e. this)\n            return this._init(token, config, name)\n        } else {\n            const namedPosthog = instances[name] ?? new PostHog()\n            namedPosthog._init(token, config, name)\n            instances[name] = namedPosthog\n            // Add as a property to the primary instance (this isn't type-safe but its how it was always done)\n            ;(instances[PRIMARY_INSTANCE_NAME] as any)[name] = namedPosthog\n\n            return namedPosthog\n        }\n    }\n\n    // posthog._init(token:string, config:object, name:string)\n    //\n    // This function sets up the current instance of the posthog\n    // library.  The difference between this method and the init(...)\n    // method is this one initializes the actual instance, whereas the\n    // init(...) method sets up a new library and calls _init on it.\n    //\n    // Note that there are operations that can be asynchronous, so we\n    // accept a callback that is called when all the asynchronous work\n    // is done. Note that we do not use promises because we want to be\n    // IE11 compatible. We could use polyfills, which would make the\n    // code a bit cleaner, but will add some overhead.\n    //\n    _init(token: string, config: Partial<PostHogConfig> = {}, name?: string): PostHog | void {\n        if (_isUndefined(token) || _isEmptyString(token)) {\n            logger.critical(\n                'PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()'\n            )\n            return\n        }\n\n        if (this.__loaded) {\n            logger.warn('You have already initialized PostHog! Re-initialising is a no-op')\n            return\n        }\n\n        this.__loaded = true\n        this.config = {} as PostHogConfig // will be set right below\n        this._triggered_notifs = []\n\n        config.request_headers = config.request_headers || config.xhr_headers\n\n        this.set_config(\n            _extend({}, defaultConfig(), config, {\n                name: name,\n                token: token,\n            })\n        )\n\n        // Check if recorder.js is already loaded\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (window?.rrweb?.record || window?.rrwebRecord) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this.__loaded_recorder_version = window?.rrweb?.version\n        }\n\n        this.persistence = new PostHogPersistence(this.config)\n        this.sessionPersistence =\n            this.config.persistence === 'sessionStorage'\n                ? this.persistence\n                : new PostHogPersistence({ ...this.config, persistence: 'sessionStorage' })\n\n        this._requestQueue = new RequestQueue((req) => this._send_request(req))\n        this._retryQueue = new RetryQueue(this)\n        this.__captureHooks = []\n        this.__request_queue = []\n\n        this.sessionManager = new SessionIdManager(this.config, this.persistence)\n        this.sessionPropsManager = new SessionPropsManager(this.sessionManager, this.persistence)\n\n        this.sessionRecording = new SessionRecording(this)\n        this.sessionRecording.startRecordingIfEnabled()\n\n        if (!this.config.disable_scroll_properties) {\n            this.pageViewManager.startMeasuringScrollPosition()\n        }\n\n        this.__autocapture = this.config.autocapture\n        autocapture._setIsAutocaptureEnabled(this)\n        if (autocapture._isAutocaptureEnabled) {\n            this.__autocapture = this.config.autocapture\n            const num_buckets = 100\n            const num_enabled_buckets = 100\n            if (!autocapture.enabledForProject(this.config.token, num_buckets, num_enabled_buckets)) {\n                this.__autocapture = false\n                logger.info('Not in active bucket: disabling Automatic Event Collection.')\n            } else if (!autocapture.isBrowserSupported()) {\n                this.__autocapture = false\n                logger.info('Disabling Automatic Event Collection because this browser is not supported')\n            } else {\n                autocapture.init(this)\n            }\n        }\n\n        // if any instance on the page has debug = true, we set the\n        // global debug to be true\n        Config.DEBUG = Config.DEBUG || this.config.debug\n\n        this._gdpr_init()\n\n        if (config.segment) {\n            // Use segments anonymousId instead\n            this.config.get_device_id = () => config.segment.user().anonymousId()\n\n            // If a segment user ID exists, set it as the distinct_id\n            if (config.segment.user().id()) {\n                this.register({\n                    distinct_id: config.segment.user().id(),\n                })\n                this.persistence.set_user_state('identified')\n            }\n        }\n\n        // isUndefined doesn't provide typehint here so wouldn't reduce bundle as we'd need to assign\n        // eslint-disable-next-line posthog-js/no-direct-undefined-check\n        if (config.bootstrap?.distinctID !== undefined) {\n            const uuid = this.config.get_device_id(uuidv7())\n            const deviceID = config.bootstrap?.isIdentifiedID ? uuid : config.bootstrap.distinctID\n            this.persistence.set_user_state(config.bootstrap?.isIdentifiedID ? 'identified' : 'anonymous')\n            this.register({\n                distinct_id: config.bootstrap.distinctID,\n                $device_id: deviceID,\n            })\n        }\n\n        if (this._hasBootstrappedFeatureFlags()) {\n            const activeFlags = Object.keys(config.bootstrap?.featureFlags || {})\n                .filter((flag) => !!config.bootstrap?.featureFlags?.[flag])\n                .reduce(\n                    (res: Record<string, string | boolean>, key) => (\n                        (res[key] = config.bootstrap?.featureFlags?.[key] || false), res\n                    ),\n                    {}\n                )\n            const featureFlagPayloads = Object.keys(config.bootstrap?.featureFlagPayloads || {})\n                .filter((key) => activeFlags[key])\n                .reduce((res: Record<string, JsonType>, key) => {\n                    if (config.bootstrap?.featureFlagPayloads?.[key]) {\n                        res[key] = config.bootstrap?.featureFlagPayloads?.[key]\n                    }\n                    return res\n                }, {})\n\n            this.featureFlags.receivedFeatureFlags({ featureFlags: activeFlags, featureFlagPayloads })\n        }\n\n        if (!this.get_distinct_id()) {\n            // There is no need to set the distinct id\n            // or the device id if something was already stored\n            // in the persitence\n            const uuid = this.config.get_device_id(uuidv7())\n\n            this.register_once(\n                {\n                    distinct_id: uuid,\n                    $device_id: uuid,\n                },\n                ''\n            )\n            // distinct id == $device_id is a proxy for anonymous user\n            this.persistence.set_user_state('anonymous')\n        }\n        // Set up event handler for pageleave\n        // Use `onpagehide` if available, see https://calendar.perfplanet.com/2020/beaconing-in-practice/#beaconing-reliability-avoiding-abandons\n        window?.addEventListener?.('onpagehide' in self ? 'pagehide' : 'unload', this._handle_unload.bind(this))\n\n        this.toolbar.maybeLoadToolbar()\n\n        // We wan't to avoid promises for IE11 compatibility, so we use callbacks here\n        if (config.segment) {\n            config.segment.register(this.segmentIntegration()).then(() => {\n                this._loaded()\n            })\n        } else {\n            this._loaded()\n        }\n\n        return this\n    }\n\n    // Private methods\n    _afterDecideResponse(response: DecideResponse) {\n        this.compression = undefined\n        if (response.supportedCompression && !this.config.disable_compression) {\n            this.compression = _includes(response['supportedCompression'], Compression.GZipJS)\n                ? Compression.GZipJS\n                : _includes(response['supportedCompression'], Compression.Base64)\n                ? Compression.Base64\n                : undefined\n        }\n\n        if (response.analytics?.endpoint) {\n            this.analyticsDefaultEndpoint = response.analytics.endpoint\n        }\n\n        if (response.elementsChainAsString) {\n            this.elementsChainAsString = response.elementsChainAsString\n        }\n    }\n\n    _loaded(): void {\n        // Pause `reloadFeatureFlags` calls in config.loaded callback.\n        // These feature flags are loaded in the decide call made right\n        // afterwards\n        const disableDecide = this.config.advanced_disable_decide\n        if (!disableDecide) {\n            this.featureFlags.setReloadingPaused(true)\n        }\n\n        try {\n            this.config.loaded(this)\n        } catch (err) {\n            logger.critical('`loaded` function failed', err)\n        }\n\n        this._start_queue_if_opted_in()\n\n        // this happens after \"loaded\" so a user can call identify or any other things before the pageview fires\n        if (this.config.capture_pageview) {\n            // NOTE: We want to fire this on the next tick as the previous implementation had this side effect\n            // and some clients may rely on it\n            setTimeout(() => {\n                if (document) {\n                    this.capture('$pageview', { title: document.title }, { send_instantly: true })\n                }\n            }, 1)\n        }\n\n        // Call decide to get what features are enabled and other settings.\n        // As a reminder, if the /decide endpoint is disabled, feature flags, toolbar, session recording, autocapture,\n        // and compression will not be available.\n        if (!disableDecide) {\n            new Decide(this).call()\n\n            // TRICKY: Reset any decide reloads queued during config.loaded because they'll be\n            // covered by the decide call right above.\n            this.featureFlags.resetRequestQueue()\n        }\n    }\n\n    _start_queue_if_opted_in(): void {\n        if (!this.has_opted_out_capturing()) {\n            if (this.config.request_batching) {\n                this._requestQueue?.enable()\n            }\n        }\n    }\n\n    _dom_loaded(): void {\n        if (!this.has_opted_out_capturing()) {\n            _eachArray(this.__request_queue, (item) => this._send_retriable_request(item))\n        }\n\n        this.__request_queue = []\n        this._start_queue_if_opted_in()\n    }\n\n    _handle_unload(): void {\n        if (!this.config.request_batching) {\n            if (this.config.capture_pageview && this.config.capture_pageleave) {\n                this.capture('$pageleave', null, { transport: 'sendBeacon' })\n            }\n            return\n        }\n\n        if (this.config.capture_pageview && this.config.capture_pageleave) {\n            this.capture('$pageleave')\n        }\n\n        this._requestQueue?.unload()\n        this._retryQueue?.unload()\n    }\n\n    _send_request(options: QueuedRequestOptions): void {\n        if (!this.__loaded) {\n            return\n        }\n\n        if (ENQUEUE_REQUESTS) {\n            this.__request_queue.push(options)\n            return\n        }\n\n        if (this.rateLimiter.isRateLimited(options.batchKey)) {\n            return\n        }\n\n        options.transport = options.transport || this.config.api_transport\n        options.url = extendURLParams(options.url, {\n            // Whether to detect ip info or not\n            ip: this.config.ip ? 1 : 0,\n        })\n        options.headers = this.config.request_headers\n\n        request({\n            ...options,\n            callback: (response) => {\n                this.rateLimiter.checkForLimiting(response)\n\n                if (response.statusCode >= 400) {\n                    this.config.on_request_error?.(response)\n                }\n\n                options.callback?.(response)\n            },\n        })\n    }\n\n    _send_retriable_request(options: QueuedRequestOptions): void {\n        if (this._retryQueue) {\n            this._retryQueue.retriableRequest(options)\n        } else {\n            this._send_request(options)\n        }\n    }\n\n    /**\n     * _execute_array() deals with processing any posthog function\n     * calls that were called before the PostHog library were loaded\n     * (and are thus stored in an array so they can be called later)\n     *\n     * Note: we fire off all the posthog function calls && user defined\n     * functions BEFORE we fire off posthog capturing calls. This is so\n     * identify/register/set_config calls can properly modify early\n     * capturing calls.\n     *\n     * @param {Array} array\n     */\n    _execute_array(array: SnippetArrayItem[]): void {\n        let fn_name\n        const alias_calls: SnippetArrayItem[] = []\n        const other_calls: SnippetArrayItem[] = []\n        const capturing_calls: SnippetArrayItem[] = []\n        _eachArray(array, (item) => {\n            if (item) {\n                fn_name = item[0]\n                if (_isArray(fn_name)) {\n                    capturing_calls.push(item) // chained call e.g. posthog.get_group().set()\n                } else if (_isFunction(item)) {\n                    ;(item as any).call(this)\n                } else if (_isArray(item) && fn_name === 'alias') {\n                    alias_calls.push(item)\n                } else if (_isArray(item) && fn_name.indexOf('capture') !== -1 && _isFunction((this as any)[fn_name])) {\n                    capturing_calls.push(item)\n                } else {\n                    other_calls.push(item)\n                }\n            }\n        })\n\n        const execute = function (calls: SnippetArrayItem[], thisArg: any) {\n            _eachArray(\n                calls,\n                function (item) {\n                    if (_isArray(item[0])) {\n                        // chained call\n                        let caller = thisArg\n                        _each(item, function (call) {\n                            caller = caller[call[0]].apply(caller, call.slice(1))\n                        })\n                    } else {\n                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                        // @ts-ignore\n                        this[item[0]].apply(this, item.slice(1))\n                    }\n                },\n                thisArg\n            )\n        }\n\n        execute(alias_calls, this)\n        execute(other_calls, this)\n        execute(capturing_calls, this)\n    }\n\n    _hasBootstrappedFeatureFlags(): boolean {\n        return (\n            (this.config.bootstrap?.featureFlags && Object.keys(this.config.bootstrap?.featureFlags).length > 0) ||\n            false\n        )\n    }\n\n    /**\n     * push() keeps the standard async-array-push\n     * behavior around after the lib is loaded.\n     * This is only useful for external integrations that\n     * do not wish to rely on our convenience methods\n     * (created in the snippet).\n     *\n     * ### Usage:\n     *     posthog.push(['register', { a: 'b' }]);\n     *\n     * @param {Array} item A [function_name, args...] array to be executed\n     */\n    push(item: SnippetArrayItem): void {\n        this._execute_array([item])\n    }\n\n    /**\n     * Capture an event. This is the most important and\n     * frequently used PostHog function.\n     *\n     * ### Usage:\n     *\n     *     // capture an event named 'Registered'\n     *     posthog.capture('Registered', {'Gender': 'Male', 'Age': 21});\n     *\n     *     // capture an event using navigator.sendBeacon\n     *     posthog.capture('Left page', {'duration_seconds': 35}, {transport: 'sendBeacon'});\n     *\n     * @param {String} event_name The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n     * @param {Object} [properties] A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n     * @param {Object} [options] Optional configuration for this capture request.\n     * @param {String} [options.transport] Transport method for network request ('XHR' or 'sendBeacon').\n     * @param {Date} [options.timestamp] Timestamp is a Date object. If not set, it'll automatically be set to the current time.\n     */\n    capture(event_name: string, properties?: Properties | null, options?: CaptureOptions): CaptureResult | void {\n        // While developing, a developer might purposefully _not_ call init(),\n        // in this case, we would like capture to be a noop.\n        if (!this.__loaded || !this.sessionPersistence || !this._requestQueue) {\n            return logger.uninitializedWarning('posthog.capture')\n        }\n\n        if (userOptedOut(this)) {\n            return\n        }\n\n        // typing doesn't prevent interesting data\n        if (_isUndefined(event_name) || !_isString(event_name)) {\n            logger.error('No event name provided to posthog.capture')\n            return\n        }\n\n        if (\n            userAgent &&\n            !this.config.opt_out_useragent_filter &&\n            _isBlockedUA(userAgent, this.config.custom_blocked_useragents)\n        ) {\n            return\n        }\n\n        // update persistence\n        this.sessionPersistence.update_search_keyword()\n\n        if (this.config.store_google) {\n            this.sessionPersistence.update_campaign_params()\n        }\n        if (this.config.save_referrer) {\n            this.sessionPersistence.update_referrer_info()\n        }\n\n        let data: CaptureResult = {\n            uuid: uuidv7(),\n            event: event_name,\n            properties: this._calculate_event_properties(event_name, properties || {}),\n        }\n\n        if (event_name === '$identify') {\n            data['$set'] = options?.['$set']\n            data['$set_once'] = options?.['$set_once']\n        }\n\n        data = _copyAndTruncateStrings(data, options?._noTruncate ? null : this.config.properties_string_max_length)\n        data.timestamp = options?.timestamp || new Date()\n        if (!_isUndefined(options?.timestamp)) {\n            data.properties['$event_time_override_provided'] = true\n            data.properties['$event_time_override_system_time'] = new Date()\n        }\n\n        // Top-level $set overriding values from the one from properties is taken from the plugin-server normalizeEvent\n        // This doesn't handle $set_once, because posthog-people doesn't either\n        const finalSet = { ...data.properties['$set'], ...data['$set'] }\n        if (!_isEmptyObject(finalSet)) {\n            this.setPersonPropertiesForFlags(finalSet)\n        }\n\n        logger.info('send', data)\n\n        const requestOptions: QueuedRequestOptions = {\n            method: 'POST',\n            url: options?._url ?? this.requestRouter.endpointFor('api', this.analyticsDefaultEndpoint),\n            data,\n            compression: this.compression,\n            batchKey: options?._batchKey,\n        }\n\n        if (this.config.request_batching && (!options || options?._batchKey) && !options?.send_instantly) {\n            this._requestQueue.enqueue(requestOptions)\n        } else {\n            this._send_retriable_request(requestOptions)\n        }\n\n        this._invokeCaptureHooks(event_name, data)\n\n        return data\n    }\n\n    _addCaptureHook(callback: (eventName: string) => void): void {\n        this.__captureHooks.push(callback)\n    }\n\n    _invokeCaptureHooks(eventName: string, eventData: CaptureResult): void {\n        this.config._onCapture(eventName, eventData)\n        _each(this.__captureHooks, (callback) => callback(eventName))\n    }\n\n    _calculate_event_properties(event_name: string, event_properties: Properties): Properties {\n        if (!this.persistence || !this.sessionPersistence) {\n            return event_properties\n        }\n\n        // set defaults\n        const start_timestamp = this.persistence.remove_event_timer(event_name)\n        let properties = { ...event_properties }\n        properties['token'] = this.config.token\n\n        if (event_name === '$snapshot') {\n            const persistenceProps = { ...this.persistence.properties(), ...this.sessionPersistence.properties() }\n            properties['distinct_id'] = persistenceProps.distinct_id\n            return properties\n        }\n\n        const infoProperties = _info.properties()\n\n        if (this.sessionManager) {\n            const { sessionId, windowId } = this.sessionManager.checkAndGetSessionAndWindowId()\n            properties['$session_id'] = sessionId\n            properties['$window_id'] = windowId\n        }\n\n        if (\n            this.sessionPropsManager &&\n            this.config.__preview_send_client_session_params &&\n            (event_name === '$pageview' || event_name === '$pageleave' || event_name === '$autocapture')\n        ) {\n            const sessionProps = this.sessionPropsManager.getSessionProps()\n            properties = _extend(properties, sessionProps)\n        }\n\n        if (!this.config.disable_scroll_properties) {\n            let performanceProperties: Record<string, any> = {}\n            if (event_name === '$pageview') {\n                performanceProperties = this.pageViewManager.doPageView()\n            } else if (event_name === '$pageleave') {\n                performanceProperties = this.pageViewManager.doPageLeave()\n            }\n            properties = _extend(properties, performanceProperties)\n        }\n\n        if (event_name === '$pageview' && document) {\n            properties['title'] = document.title\n        }\n\n        if (event_name === '$performance_event') {\n            const persistenceProps = this.persistence.properties()\n            // Early exit for $performance_event as we only need session and $current_url\n            properties['distinct_id'] = persistenceProps.distinct_id\n            properties['$current_url'] = infoProperties.$current_url\n            return properties\n        }\n\n        // set $duration if time_event was previously called for this event\n        if (!_isUndefined(start_timestamp)) {\n            const duration_in_ms = new Date().getTime() - start_timestamp\n            properties['$duration'] = parseFloat((duration_in_ms / 1000).toFixed(3))\n        }\n\n        // this is only added when this.config.opt_out_useragent_filter is true,\n        // or it would always add \"browser\"\n        if (userAgent && this.config.opt_out_useragent_filter) {\n            properties['$browser_type'] = _isBlockedUA(userAgent, this.config.custom_blocked_useragents)\n                ? 'bot'\n                : 'browser'\n        }\n\n        // note: extend writes to the first object, so lets make sure we\n        // don't write to the persistence properties object and info\n        // properties object by passing in a new object\n\n        // update properties with pageview info and super-properties\n        properties = _extend(\n            {},\n            _info.properties(),\n            this.persistence.properties(),\n            this.sessionPersistence.properties(),\n            properties\n        )\n\n        if (_isArray(this.config.property_denylist) && _isArray(this.config.property_blacklist)) {\n            // since property_blacklist is deprecated in favor of property_denylist, we merge both of them here\n            // TODO: merge this only once, requires refactoring tests\n            const property_denylist = [...this.config.property_blacklist, ...this.config.property_denylist]\n            _each(property_denylist, function (denylisted_prop) {\n                delete properties[denylisted_prop]\n            })\n        } else {\n            logger.error(\n                'Invalid value for property_denylist config: ' +\n                    this.config.property_denylist +\n                    ' or property_blacklist config: ' +\n                    this.config.property_blacklist\n            )\n        }\n\n        const sanitize_properties = this.config.sanitize_properties\n        if (sanitize_properties) {\n            properties = sanitize_properties(properties, event_name)\n        }\n\n        return properties\n    }\n\n    /**\n     * Register a set of super properties, which are included with all\n     * events. This will overwrite previous super property values, except\n     * for session properties (see `register_for_session(properties)`).\n     *\n     * ### Usage:\n     *\n     *     // register 'Gender' as a super property\n     *     posthog.register({'Gender': 'Female'});\n     *\n     *     // register several super properties when a user signs up\n     *     posthog.register({\n     *         'Email': 'jdoe@example.com',\n     *         'Account Type': 'Free'\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.persistence.properties())\n     *\n     * @param {Object} properties An associative array of properties to store about the user\n     * @param {Number} [days] How many days since the user's last visit to store the super properties\n     */\n    register(properties: Properties, days?: number): void {\n        this.persistence?.register(properties, days)\n    }\n\n    /**\n     * Register a set of super properties only once. These will not\n     * overwrite previous super property values, unlike register().\n     *\n     * ### Usage:\n     *\n     *     // register a super property for the first time only\n     *     posthog.register_once({\n     *         'First Login Date': new Date().toISOString()\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.persistence.properties())\n     *\n     * ### Notes:\n     *\n     * If default_value is specified, current super properties\n     * with that value will be overwritten.\n     *\n     * @param {Object} properties An associative array of properties to store about the user\n     * @param {*} [default_value] Value to override if already set in super properties (ex: 'False') Default: 'None'\n     * @param {Number} [days] How many days since the users last visit to store the super properties\n     */\n    register_once(properties: Properties, default_value?: Property, days?: number): void {\n        this.persistence?.register_once(properties, default_value, days)\n    }\n\n    /**\n     * Register a set of super properties, which are included with all events, but only\n     * for THIS SESSION. These will overwrite all other super property values.\n     *\n     * Unlike regular super properties, which last in LocalStorage for a long time,\n     * session super properties get cleared after a session ends.\n     *\n     * ### Usage:\n     *\n     *     // register on all events this session\n     *     posthog.register_for_session({'referer': customGetReferer()});\n     *\n     *     // register several session super properties when a user signs up\n     *     posthog.register_for_session({\n     *         'selectedPlan': 'pro',\n     *         'completedSteps': 4,\n     *     });\n     *\n     *     // Display the properties\n     *     console.log(posthog.sessionPersistence.properties())\n     *\n     * @param {Object} properties An associative array of properties to store about the user\n     */\n    register_for_session(properties: Properties): void {\n        this.sessionPersistence?.register(properties)\n    }\n\n    /**\n     * Delete a super property stored with the current user.\n     *\n     * @param {String} property The name of the super property to remove\n     */\n    unregister(property: string): void {\n        this.persistence?.unregister(property)\n    }\n\n    /**\n     * Delete a session super property stored with the current user.\n     *\n     * @param {String} property The name of the session super property to remove\n     */\n    unregister_for_session(property: string): void {\n        this.sessionPersistence?.unregister(property)\n    }\n\n    _register_single(prop: string, value: Property) {\n        this.register({ [prop]: value })\n    }\n\n    /*\n     * Get feature flag value for user (supports multivariate flags).\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('beta-feature') === 'some-value') { // do something }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    getFeatureFlag(key: string, options?: { send_event?: boolean }): boolean | string | undefined {\n        return this.featureFlags.getFeatureFlag(key, options)\n    }\n\n    /*\n     * Get feature flag payload value matching key for user (supports multivariate flags).\n     *\n     * ### Usage:\n     *\n     *     if(posthog.getFeatureFlag('beta-feature') === 'some-value') {\n     *          const someValue = posthog.getFeatureFlagPayload('beta-feature')\n     *          // do something\n     *     }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     */\n    getFeatureFlagPayload(key: string): JsonType {\n        const payload = this.featureFlags.getFeatureFlagPayload(key)\n        try {\n            return JSON.parse(payload as any)\n        } catch {\n            return payload\n        }\n    }\n\n    /*\n     * See if feature flag is enabled for user.\n     *\n     * ### Usage:\n     *\n     *     if(posthog.isFeatureEnabled('beta-feature')) { // do something }\n     *\n     * @param {Object|String} prop Key of the feature flag.\n     * @param {Object|String} options (optional) If {send_event: false}, we won't send an $feature_flag_call event to PostHog.\n     */\n    isFeatureEnabled(key: string, options?: IsFeatureEnabledOptions): boolean | undefined {\n        return this.featureFlags.isFeatureEnabled(key, options)\n    }\n\n    reloadFeatureFlags(): void {\n        this.featureFlags.reloadFeatureFlags()\n    }\n\n    /** Opt the user in or out of an early access feature. */\n    updateEarlyAccessFeatureEnrollment(key: string, isEnrolled: boolean): void {\n        this.featureFlags.updateEarlyAccessFeatureEnrollment(key, isEnrolled)\n    }\n\n    /** Get the list of early access features. To check enrollment status, use `isFeatureEnabled`. */\n    getEarlyAccessFeatures(callback: EarlyAccessFeatureCallback, force_reload = false): void {\n        return this.featureFlags.getEarlyAccessFeatures(callback, force_reload)\n    }\n\n    /*\n     * Register an event listener that runs when feature flags become available or when they change.\n     * If there are flags, the listener is called immediately in addition to being called on future changes.\n     *\n     * ### Usage:\n     *\n     *     posthog.onFeatureFlags(function(featureFlags) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once the feature flags are ready or when they are updated.\n     *                              It'll return a list of feature flags enabled for the user.\n     * @returns {Function} A function that can be called to unsubscribe the listener. Used by useEffect when the component unmounts.\n     */\n    onFeatureFlags(callback: (flags: string[], variants: Record<string, string | boolean>) => void): () => void {\n        return this.featureFlags.onFeatureFlags(callback)\n    }\n\n    /*\n     * Register an event listener that runs whenever the session id or window id change.\n     * If there is already a session id, the listener is called immediately in addition to being called on future changes.\n     *\n     * Can be used, for example, to sync the PostHog session id with a backend session.\n     *\n     * ### Usage:\n     *\n     *     posthog.onSessionId(function(sessionId, windowId) { // do something })\n     *\n     * @param {Function} [callback] The callback function will be called once a session id is present or when it or the window id are updated.\n     * @returns {Function} A function that can be called to unsubscribe the listener. E.g. Used by useEffect when the component unmounts.\n     */\n    onSessionId(callback: SessionIdChangedCallback): () => void {\n        return this.sessionManager?.onSessionId(callback) ?? (() => {})\n    }\n\n    /** Get list of all surveys. */\n    getSurveys(callback: SurveyCallback, forceReload = false): void {\n        this.surveys.getSurveys(callback, forceReload)\n    }\n\n    /** Get surveys that should be enabled for the current user. */\n    getActiveMatchingSurveys(callback: SurveyCallback, forceReload = false): void {\n        this.surveys.getActiveMatchingSurveys(callback, forceReload)\n    }\n\n    /**\n     * Identify a user with a unique ID instead of a PostHog\n     * randomly generated distinct_id. If the method is never called,\n     * then unique visitors will be identified by a UUID that is generated\n     * the first time they visit the site.\n     *\n     * If user properties are passed, they are also sent to posthog.\n     *\n     * ### Usage:\n     *\n     *      posthog.identify('[user unique id]')\n     *      posthog.identify('[user unique id]', { email: 'john@example.com' })\n     *      posthog.identify('[user unique id]', {}, { referral_code: '12345' })\n     *\n     * ### Notes:\n     *\n     * You can call this function to overwrite a previously set\n     * unique ID for the current user.\n     *\n     * If the user has been identified ($user_state in persistence is set to 'identified'),\n     * then capture of $identify is skipped to avoid merging users. For example,\n     * if your system allows an admin user to impersonate another user.\n     *\n     * Then a single browser instance can have:\n     *\n     *  `identify('a') -> capture(1) -> identify('b') -> capture(2)`\n     *\n     * and capture 1 and capture 2 will have the correct distinct_id.\n     * but users a and b will NOT be merged in posthog.\n     *\n     * However, if reset is called then:\n     *\n     *  `identify('a') -> capture(1) -> reset() -> capture(2) -> identify('b') -> capture(3)`\n     *\n     * users a and b are not merged.\n     * Capture 1 is associated with user a.\n     * A new distinct id is generated for capture 2.\n     * which is merged with user b.\n     * So, capture 2 and 3 are associated with user b.\n     *\n     * If you want to merge two identified users, you can call posthog.alias\n     *\n     * @param {String} [new_distinct_id] A string that uniquely identifies a user. If not provided, the distinct_id currently in the persistent store (cookie or localStorage) will be used.\n     * @param {Object} [userPropertiesToSet] Optional: An associative array of properties to store about the user\n     * @param {Object} [userPropertiesToSetOnce] Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.\n     */\n    identify(new_distinct_id?: string, userPropertiesToSet?: Properties, userPropertiesToSetOnce?: Properties): void {\n        if (!this.__loaded || !this.persistence) {\n            return logger.uninitializedWarning('posthog.identify')\n        }\n        if (_isNumber(new_distinct_id)) {\n            new_distinct_id = (new_distinct_id as number).toString()\n            logger.warn(\n                'The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.'\n            )\n        }\n\n        //if the new_distinct_id has not been set ignore the identify event\n        if (!new_distinct_id) {\n            logger.error('Unique user id has not been set in posthog.identify')\n            return\n        }\n\n        if (isDistinctIdStringLike(new_distinct_id)) {\n            logger.critical(\n                `The string \"${new_distinct_id}\" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.`\n            )\n            return\n        }\n\n        const previous_distinct_id = this.get_distinct_id()\n        this.register({ $user_id: new_distinct_id })\n\n        if (!this.get_property('$device_id')) {\n            // The persisted distinct id might not actually be a device id at all\n            // it might be a distinct id of the user from before\n            const device_id = previous_distinct_id\n            this.register_once(\n                {\n                    $had_persisted_distinct_id: true,\n                    $device_id: device_id,\n                },\n                ''\n            )\n        }\n\n        // if the previous distinct id had an alias stored, then we clear it\n        if (new_distinct_id !== previous_distinct_id && new_distinct_id !== this.get_property(ALIAS_ID_KEY)) {\n            this.unregister(ALIAS_ID_KEY)\n            this.register({ distinct_id: new_distinct_id })\n        }\n\n        const isKnownAnonymous = this.persistence.get_user_state() === 'anonymous'\n\n        // send an $identify event any time the distinct_id is changing and the old ID is an anoymous ID\n        // - logic on the server will determine whether or not to do anything with it.\n        if (new_distinct_id !== previous_distinct_id && isKnownAnonymous) {\n            this.persistence.set_user_state('identified')\n\n            // Update current user properties\n            this.setPersonPropertiesForFlags(userPropertiesToSet || {}, false)\n\n            this.capture(\n                '$identify',\n                {\n                    distinct_id: new_distinct_id,\n                    $anon_distinct_id: previous_distinct_id,\n                },\n                { $set: userPropertiesToSet || {}, $set_once: userPropertiesToSetOnce || {} }\n            )\n            // let the reload feature flag request know to send this previous distinct id\n            // for flag consistency\n            this.featureFlags.setAnonymousDistinctId(previous_distinct_id)\n        } else if (userPropertiesToSet || userPropertiesToSetOnce) {\n            // If the distinct_id is not changing, but we have user properties to set, we can go for a $set event\n            this.setPersonProperties(userPropertiesToSet, userPropertiesToSetOnce)\n        }\n\n        // Reload active feature flags if the user identity changes.\n        // Note we don't reload this on property changes as these get processed async\n        if (new_distinct_id !== previous_distinct_id) {\n            this.reloadFeatureFlags()\n            // also clear any stored flag calls\n            this.unregister(FLAG_CALL_REPORTED)\n        }\n    }\n\n    /**\n     * Sets properties for the Person associated with the current distinct_id.\n     *\n     *\n     * @param {Object} [userPropertiesToSet] Optional: An associative array of properties to store about the user\n     * @param {Object} [userPropertiesToSetOnce] Optional: An associative array of properties to store about the user. If property is previously set, this does not override that value.\n     */\n    setPersonProperties(userPropertiesToSet?: Properties, userPropertiesToSetOnce?: Properties): void {\n        if (!userPropertiesToSet && !userPropertiesToSetOnce) {\n            return\n        }\n\n        // Update current user properties\n        this.setPersonPropertiesForFlags(userPropertiesToSet || {})\n\n        this.capture('$set', { $set: userPropertiesToSet || {}, $set_once: userPropertiesToSetOnce || {} })\n    }\n\n    /**\n     * Alpha feature: don't use unless you know what you're doing!\n     *\n     * Sets group analytics information for subsequent events and reloads feature flags.\n     *\n     * @param {String} groupType Group type (example: 'organization')\n     * @param {String} groupKey Group key (example: 'org::5')\n     * @param {Object} groupPropertiesToSet Optional properties to set for group\n     */\n    group(groupType: string, groupKey: string, groupPropertiesToSet?: Properties): void {\n        if (!groupType || !groupKey) {\n            logger.error('posthog.group requires a group type and group key')\n            return\n        }\n\n        const existingGroups = this.getGroups()\n\n        // if group key changes, remove stored group properties\n        if (existingGroups[groupType] !== groupKey) {\n            this.resetGroupPropertiesForFlags(groupType)\n        }\n\n        this.register({ $groups: { ...existingGroups, [groupType]: groupKey } })\n\n        if (groupPropertiesToSet) {\n            this.capture('$groupidentify', {\n                $group_type: groupType,\n                $group_key: groupKey,\n                $group_set: groupPropertiesToSet,\n            })\n            this.setGroupPropertiesForFlags({ [groupType]: groupPropertiesToSet })\n        }\n\n        // If groups change and no properties change, reload feature flags.\n        // The property change reload case is handled in setGroupPropertiesForFlags.\n        if (existingGroups[groupType] !== groupKey && !groupPropertiesToSet) {\n            this.reloadFeatureFlags()\n        }\n    }\n\n    /**\n     * Resets only the group properties of the user currently logged in.\n     */\n    resetGroups(): void {\n        this.register({ $groups: {} })\n        this.resetGroupPropertiesForFlags()\n\n        // If groups changed, reload feature flags.\n        this.reloadFeatureFlags()\n    }\n\n    /**\n     * Set override person properties for feature flags.\n     * This is used when dealing with new persons / where you don't want to wait for ingestion\n     * to update user properties.\n     */\n    setPersonPropertiesForFlags(properties: Properties, reloadFeatureFlags = true): void {\n        this.featureFlags.setPersonPropertiesForFlags(properties, reloadFeatureFlags)\n    }\n\n    resetPersonPropertiesForFlags(): void {\n        this.featureFlags.resetPersonPropertiesForFlags()\n    }\n\n    /**\n     * Set override group properties for feature flags.\n     * This is used when dealing with new groups / where you don't want to wait for ingestion\n     * to update properties.\n     * Takes in an object, the key of which is the group type.\n     * For example:\n     *     setGroupPropertiesForFlags({'organization': { name: 'CYZ', employees: '11' } })\n     */\n    setGroupPropertiesForFlags(properties: { [type: string]: Properties }, reloadFeatureFlags = true): void {\n        this.featureFlags.setGroupPropertiesForFlags(properties, reloadFeatureFlags)\n    }\n\n    resetGroupPropertiesForFlags(group_type?: string): void {\n        this.featureFlags.resetGroupPropertiesForFlags(group_type)\n    }\n\n    /**\n     * Clears super properties and generates a new random distinct_id for this instance.\n     * Useful for clearing data when a user logs out.\n     */\n    reset(reset_device_id?: boolean): void {\n        if (!this.__loaded) {\n            return logger.uninitializedWarning('posthog.reset')\n        }\n        const device_id = this.get_property('$device_id')\n        this.persistence?.clear()\n        this.sessionPersistence?.clear()\n        this.persistence?.set_user_state('anonymous')\n        this.sessionManager?.resetSessionId()\n        const uuid = this.config.get_device_id(uuidv7())\n        this.register_once(\n            {\n                distinct_id: uuid,\n                $device_id: reset_device_id ? uuid : device_id,\n            },\n            ''\n        )\n    }\n\n    /**\n     * Returns the current distinct id of the user. This is either the id automatically\n     * generated by the library or the id that has been passed by a call to identify().\n     *\n     * ### Notes:\n     *\n     * get_distinct_id() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // set distinct_id after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             distinct_id = posthog.get_distinct_id();\n     *         }\n     *     });\n     */\n    get_distinct_id(): string {\n        return this.get_property('distinct_id')\n    }\n\n    getGroups(): Record<string, any> {\n        return this.get_property('$groups') || {}\n    }\n\n    /**\n     * Returns the current session_id.\n     *\n     * NOTE: This should only be used for informative purposes.\n     * Any actual internal use case for the session_id should be handled by the sessionManager.\n     */\n\n    get_session_id(): string {\n        return this.sessionManager?.checkAndGetSessionAndWindowId(true).sessionId ?? ''\n    }\n\n    /**\n     * Returns the Replay url for the current session.\n     *\n     * @param options Options for the url\n     * @param options.withTimestamp Whether to include the timestamp in the url (defaults to false)\n     * @param options.timestampLookBack How many seconds to look back for the timestamp (defaults to 10)\n     */\n    get_session_replay_url(options?: { withTimestamp?: boolean; timestampLookBack?: number }): string {\n        if (!this.sessionManager) {\n            return ''\n        }\n        const { sessionId, sessionStartTimestamp } = this.sessionManager.checkAndGetSessionAndWindowId(true)\n        let url = this.requestRouter.endpointFor('ui', '/replay/' + sessionId)\n        if (options?.withTimestamp && sessionStartTimestamp) {\n            const LOOK_BACK = options.timestampLookBack ?? 10\n            if (!sessionStartTimestamp) {\n                return url\n            }\n            const recordingStartTime = Math.max(\n                Math.floor((new Date().getTime() - sessionStartTimestamp) / 1000) - LOOK_BACK,\n                0\n            )\n            url += `?t=${recordingStartTime}`\n        }\n\n        return url\n    }\n\n    /**\n     * Create an alias, which PostHog will use to link two distinct_ids going forward (not retroactively).\n     * Multiple aliases can map to the same original ID, but not vice-versa. Aliases can also be chained - the\n     * following is a valid scenario:\n     *\n     *     posthog.alias('new_id', 'existing_id');\n     *     ...\n     *     posthog.alias('newer_id', 'new_id');\n     *\n     * If the original ID is not passed in, we will use the current distinct_id - probably the auto-generated GUID.\n     *\n     * ### Notes:\n     *\n     * The best practice is to call alias() when a unique ID is first created for a user\n     * (e.g., when a user first registers for an account and provides an email address).\n     * alias() should never be called more than once for a given user, except to\n     * chain a newer ID to a previously new ID, as described above.\n     *\n     * @param {String} alias A unique identifier that you want to use for this user in the future.\n     * @param {String} [original] The current identifier being used for this user.\n     */\n    alias(alias: string, original?: string): CaptureResult | void | number {\n        // If the $people_distinct_id key exists in persistence, there has been a previous\n        // posthog.people.identify() call made for this user. It is VERY BAD to make an alias with\n        // this ID, as it will duplicate users.\n        if (alias === this.get_property(PEOPLE_DISTINCT_ID_KEY)) {\n            logger.critical('Attempting to create alias for existing People user - aborting.')\n            return -2\n        }\n\n        if (_isUndefined(original)) {\n            original = this.get_distinct_id()\n        }\n        if (alias !== original) {\n            this._register_single(ALIAS_ID_KEY, alias)\n            return this.capture('$create_alias', { alias: alias, distinct_id: original })\n        } else {\n            logger.warn('alias matches current distinct_id - skipping api call.')\n            this.identify(alias)\n            return -1\n        }\n    }\n\n    /**\n     * Update the configuration of a posthog library instance.\n     *\n     * The default config is:\n     *\n     *     {\n     *       // PostHog API host\n     *       api_host: 'https://app.posthog.com',\n     *     *\n     *       // PostHog web app host, currently only used by the Sentry integration.\n     *       // This will only be different from api_host when using a reverse-proxied API host – in that case\n     *       // the original web app host needs to be passed here so that links to the web app are still convenient.\n     *       ui_host: 'https://app.posthog.com',\n     *\n     *       // Automatically capture clicks, form submissions and change events\n     *       autocapture: true\n     *\n     *       // Capture rage clicks\n     *       rageclick: true\n     *\n     *       // transport for sending requests ('XHR' or 'sendBeacon')\n     *       // NB: sendBeacon should only be used for scenarios such as\n     *       // page unload where a \"best-effort\" attempt to send is\n     *       // acceptable; the sendBeacon API does not support callbacks\n     *       // or any way to know the result of the request. PostHog\n     *       // capturing via sendBeacon will not support any event-\n     *       // batching or retry mechanisms.\n     *       api_transport: 'XHR'\n     *\n     *       // super properties cookie expiration (in days)\n     *       cookie_expiration: 365\n     *\n     *       // super properties span subdomains\n     *       cross_subdomain_cookie: true\n     *\n     *       // debug mode\n     *       debug: false\n     *\n     *       // if this is true, the posthog cookie or localStorage entry\n     *       // will be deleted, and no user persistence will take place\n     *       disable_persistence: false\n     *\n     *       // if this is true, PostHog will automatically determine\n     *       // City, Region and Country data using the IP address of\n     *       //the client\n     *       ip: true\n     *\n     *       // opt users out of capturing by this PostHog instance by default\n     *       opt_out_capturing_by_default: false\n     *\n     *       // opt users out of browser data storage by this PostHog instance by default\n     *       opt_out_persistence_by_default: false\n     *\n     *       // opt out of user agent filtering such as googlebot or other bots\n     *       opt_out_useragent_filter: false\n     *\n     *       // persistence mechanism used by opt-in/opt-out methods - cookie\n     *       // or localStorage - falls back to cookie if localStorage is unavailable\n     *       opt_out_capturing_persistence_type: 'localStorage'\n     *\n     *       // customize the name of cookie/localStorage set by opt-in/opt-out methods\n     *       opt_out_capturing_cookie_prefix: null\n     *\n     *       // type of persistent store for super properties (cookie/\n     *       // localStorage) if set to 'localStorage', any existing\n     *       // posthog cookie value with the same persistence_name\n     *       // will be transferred to localStorage and deleted\n     *       persistence: 'cookie'\n     *\n     *       // name for super properties persistent store\n     *       persistence_name: ''\n     *\n     *       // deprecated, use property_denylist instead.\n     *       // names of properties/superproperties which should never\n     *       // be sent with capture() calls.\n     *       property_blacklist: []\n     *\n     *       // names of properties/superproperties which should never\n     *       // be sent with capture() calls.\n     *       property_denylist: []\n     *\n     *       // if this is true, posthog cookies will be marked as\n     *       // secure, meaning they will only be transmitted over https\n     *       secure_cookie: false\n     *\n     *       // should we capture a page view on page load\n     *       capture_pageview: true\n     *\n     *       // if you set upgrade to be true, the library will check for\n     *       // a cookie from our old js library and import super\n     *       // properties from it, then the old cookie is deleted\n     *       // The upgrade config option only works in the initialization,\n     *       // so make sure you set it when you create the library.\n     *       upgrade: false\n     *\n     *       // if this is true, session recording is always disabled.\n     *       disable_session_recording: false,\n     *\n     *       // extra HTTP request headers to set for each API request, in\n     *       // the format {'Header-Name': value}\n     *       response_headers: {}\n     *\n     *       // protocol for fetching in-app message resources, e.g.\n     *       // 'https://' or 'http://'; defaults to '//' (which defers to the\n     *       // current page's protocol)\n     *       inapp_protocol: '//'\n     *\n     *       // whether to open in-app message link in new tab/window\n     *       inapp_link_new_window: false\n     *\n     *      // a set of rrweb config options that PostHog users can configure\n     *      // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n     *      session_recording: {\n     *         blockClass: 'ph-no-capture',\n     *         blockSelector: null,\n     *         ignoreClass: 'ph-ignore-input',\n     *         maskAllInputs: true,\n     *         maskInputOptions: {},\n     *         maskInputFn: null,\n     *         slimDOMOptions: {},\n     *         collectFonts: false\n     *      }\n     *\n     *      // prevent autocapture from capturing any attribute names on elements\n     *      mask_all_element_attributes: false\n     *\n     *      // prevent autocapture from capturing textContent on all elements\n     *      mask_all_text: false\n     *\n     *      // Anonymous users get a random UUID as their device by default.\n     *      // This option allows overriding that option.\n     *      get_device_id: (uuid) => uuid\n     *     }\n     *\n     *\n     * @param {Object} config A dictionary of new configuration values to update\n     */\n\n    set_config(config: Partial<PostHogConfig>): void {\n        const oldConfig = { ...this.config }\n        if (_isObject(config)) {\n            _extend(this.config, config)\n\n            if (!this.config.persistence_name) {\n                this.config.persistence_name = this.config.cookie_name\n            }\n            if (!this.config.disable_persistence) {\n                this.config.disable_persistence = this.config.disable_cookie\n            }\n\n            this.persistence?.update_config(this.config, oldConfig)\n            this.sessionPersistence =\n                this.config.persistence === 'sessionStorage'\n                    ? this.persistence\n                    : new PostHogPersistence({ ...this.config, persistence: 'sessionStorage' })\n\n            if (localStore.is_supported() && localStore.get('ph_debug') === 'true') {\n                this.config.debug = true\n            }\n            if (this.config.debug) {\n                Config.DEBUG = true\n            }\n\n            if (this.sessionRecording && !_isUndefined(config.disable_session_recording)) {\n                const disable_session_recording_has_changed =\n                    oldConfig.disable_session_recording !== config.disable_session_recording\n                // if opting back in, this config might not have changed\n                const try_enable_after_opt_in =\n                    !userOptedOut(this) && !config.disable_session_recording && !this.sessionRecording.started\n\n                if (disable_session_recording_has_changed || try_enable_after_opt_in) {\n                    if (config.disable_session_recording) {\n                        this.sessionRecording.stopRecording()\n                    } else {\n                        this.sessionRecording.startRecordingIfEnabled()\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * turns session recording on, and updates the config option\n     * disable_session_recording to false\n     */\n    startSessionRecording(): void {\n        this.set_config({ disable_session_recording: false })\n    }\n\n    /**\n     * turns session recording off, and updates the config option\n     * disable_session_recording to true\n     */\n    stopSessionRecording(): void {\n        this.set_config({ disable_session_recording: true })\n    }\n\n    /**\n     * returns a boolean indicating whether session recording\n     * is currently running\n     */\n    sessionRecordingStarted(): boolean {\n        return !!this.sessionRecording?.started\n    }\n\n    /**\n     * returns a boolean indicating whether the toolbar loaded\n     * @param toolbarParams\n     */\n\n    loadToolbar(params: ToolbarParams): boolean {\n        return this.toolbar.loadToolbar(params)\n    }\n\n    /**\n     * Returns the value of the super property named property_name. If no such\n     * property is set, get_property() will return the undefined value.\n     *\n     * ### Notes:\n     *\n     * get_property() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // grab value for '$user_id' after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             user_id = posthog.get_property('$user_id');\n     *         }\n     *     });\n     *\n     * @param {String} property_name The name of the super property you want to retrieve\n     */\n    get_property(property_name: string): Property | undefined {\n        return this.persistence?.props[property_name]\n    }\n\n    /**\n     * Returns the value of the session super property named property_name. If no such\n     * property is set, getSessionProperty() will return the undefined value.\n     *\n     * ### Notes:\n     *\n     * This is based on browser-level `sessionStorage`, NOT the PostHog session.\n     * getSessionProperty() can only be called after the PostHog library has finished loading.\n     * init() has a loaded function available to handle this automatically. For example:\n     *\n     *     // grab value for 'user_id' after the posthog library has loaded\n     *     posthog.init('YOUR PROJECT TOKEN', {\n     *         loaded: function(posthog) {\n     *             user_id = posthog.getSessionProperty('user_id');\n     *         }\n     *     });\n     *\n     * @param {String} property_name The name of the session super property you want to retrieve\n     */\n    getSessionProperty(property_name: string): Property | undefined {\n        return this.sessionPersistence?.props[property_name]\n    }\n\n    toString(): string {\n        let name = this.config.name ?? PRIMARY_INSTANCE_NAME\n        if (name !== PRIMARY_INSTANCE_NAME) {\n            name = PRIMARY_INSTANCE_NAME + '.' + name\n        }\n        return name\n    }\n\n    // perform some housekeeping around GDPR opt-in/out state\n    _gdpr_init(): void {\n        const is_localStorage_requested = this.config.opt_out_capturing_persistence_type === 'localStorage'\n\n        // try to convert opt-in/out cookies to localStorage if possible\n        if (is_localStorage_requested && localStore.is_supported()) {\n            if (!this.has_opted_in_capturing() && this.has_opted_in_capturing({ persistence_type: 'cookie' })) {\n                this.opt_in_capturing({ enable_persistence: false })\n            }\n            if (!this.has_opted_out_capturing() && this.has_opted_out_capturing({ persistence_type: 'cookie' })) {\n                this.opt_out_capturing({ clear_persistence: false })\n            }\n            this.clear_opt_in_out_capturing({\n                persistence_type: 'cookie',\n                enable_persistence: false,\n            })\n        }\n\n        // check whether the user has already opted out - if so, clear & disable persistence\n        if (this.has_opted_out_capturing()) {\n            this._gdpr_update_persistence({ clear_persistence: true })\n\n            // check whether we should opt out by default\n            // note: we don't clear persistence here by default since opt-out default state is often\n            //       used as an initial state while GDPR information is being collected\n        } else if (\n            !this.has_opted_in_capturing() &&\n            (this.config.opt_out_capturing_by_default || cookieStore.get('ph_optout'))\n        ) {\n            cookieStore.remove('ph_optout')\n            this.opt_out_capturing({\n                clear_persistence: this.config.opt_out_persistence_by_default,\n            })\n        }\n    }\n\n    /**\n     * Enable or disable persistence based on options\n     * only enable/disable if persistence is not already in this state\n     * @param {boolean} [options.clear_persistence] If true, will delete all data stored by the sdk in persistence and disable it\n     * @param {boolean} [options.enable_persistence] If true, will re-enable sdk persistence\n     */\n    _gdpr_update_persistence(options: Partial<OptInOutCapturingOptions>): void {\n        let disabled\n        if (options && options['clear_persistence']) {\n            disabled = true\n        } else if (options && options['enable_persistence']) {\n            disabled = false\n        } else {\n            return\n        }\n\n        if (!this.config.disable_persistence && this.persistence?.disabled !== disabled) {\n            this.persistence?.set_disabled(disabled)\n        }\n        if (!this.config.disable_persistence && this.sessionPersistence?.disabled !== disabled) {\n            this.sessionPersistence?.set_disabled(disabled)\n        }\n    }\n\n    // call a base gdpr function after constructing the appropriate token and options args\n    _gdpr_call_func<R = any>(\n        func: (token: string, options: GDPROptions) => R,\n        options?: Partial<OptInOutCapturingOptions>\n    ): R {\n        options = _extend(\n            {\n                capture: this.capture.bind(this),\n                persistence_type: this.config.opt_out_capturing_persistence_type,\n                cookie_prefix: this.config.opt_out_capturing_cookie_prefix,\n                cookie_expiration: this.config.cookie_expiration,\n                cross_subdomain_cookie: this.config.cross_subdomain_cookie,\n                secure_cookie: this.config.secure_cookie,\n            },\n            options || {}\n        )\n\n        // check if localStorage can be used for recording opt out status, fall back to cookie if not\n        if (!localStore.is_supported() && options['persistence_type'] === 'localStorage') {\n            options['persistence_type'] = 'cookie'\n        }\n\n        return func(this.config.token, {\n            capture: options['capture'],\n            captureEventName: options['capture_event_name'],\n            captureProperties: options['capture_properties'],\n            persistenceType: options['persistence_type'],\n            persistencePrefix: options['cookie_prefix'],\n            cookieExpiration: options['cookie_expiration'],\n            crossSubdomainCookie: options['cross_subdomain_cookie'],\n            secureCookie: options['secure_cookie'],\n        })\n    }\n\n    /**\n     * Opt the user in to data capturing and cookies/localstorage for this PostHog instance\n     *\n     * ### Usage\n     *\n     *     // opt user in\n     *     posthog.opt_in_capturing();\n     *\n     *     // opt user in with specific event name, properties, cookie configuration\n     *     posthog.opt_in_capturing({\n     *         capture_event_name: 'User opted in',\n     *         capture_event_properties: {\n     *             'Email': 'jdoe@example.com'\n     *         },\n     *         cookie_expiration: 30,\n     *         secure_cookie: true\n     *     });\n     *\n     * @param {Object} [options] A dictionary of config options to override\n     * @param {function} [options.capture] Function used for capturing a PostHog event to record the opt-in action (default is this PostHog instance's capture method)\n     * @param {string} [options.capture_event_name=$opt_in] Event name to be used for capturing the opt-in action\n     * @param {Object} [options.capture_properties] Set of properties to be captured along with the opt-in action\n     * @param {boolean} [options.enable_persistence=true] If true, will re-enable sdk persistence\n     * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n     * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n     * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n     */\n    opt_in_capturing(options?: Partial<OptInOutCapturingOptions>): void {\n        options = _extend(\n            {\n                enable_persistence: true,\n            },\n            options || {}\n        )\n\n        this._gdpr_call_func(optIn, options)\n        this._gdpr_update_persistence(options)\n    }\n\n    /**\n     * Opt the user out of data capturing and cookies/localstorage for this PostHog instance\n     *\n     * ### Usage\n     *\n     *     // opt user out\n     *     posthog.opt_out_capturing();\n     *\n     *     // opt user out with different cookie configuration from PostHog instance\n     *     posthog.opt_out_capturing({\n     *         cookie_expiration: 30,\n     *         secure_cookie: true\n     *     });\n     *\n     * @param {Object} [options] A dictionary of config options to override\n     * @param {boolean} [options.clear_persistence=true] If true, will delete all data stored by the sdk in persistence\n     * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n     * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n     * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n     */\n    opt_out_capturing(options?: Partial<OptInOutCapturingOptions>): void {\n        const _options = _extend(\n            {\n                clear_persistence: true,\n            },\n            options || {}\n        )\n\n        this._gdpr_call_func(optOut, _options)\n        this._gdpr_update_persistence(_options)\n    }\n\n    /**\n     * Check whether the user has opted in to data capturing and cookies/localstorage for this PostHog instance\n     *\n     * ### Usage\n     *\n     *     const has_opted_in = posthog.has_opted_in_capturing();\n     *     // use has_opted_in value\n     *\n     * @param {Object} [options] A dictionary of config options to override\n     * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n     * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n     * @returns {boolean} current opt-in status\n     */\n    has_opted_in_capturing(options?: Partial<OptInOutCapturingOptions>): boolean {\n        return this._gdpr_call_func(hasOptedIn, options)\n    }\n\n    /**\n     * Check whether the user has opted out of data capturing and cookies/localstorage for this PostHog instance\n     *\n     * ### Usage\n     *\n     *     const has_opted_out = posthog.has_opted_out_capturing();\n     *     // use has_opted_out value\n     *\n     * @param {Object} [options] A dictionary of config options to override\n     * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n     * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n     * @returns {boolean} current opt-out status\n     */\n    has_opted_out_capturing(options?: Partial<OptInOutCapturingOptions>): boolean {\n        return this._gdpr_call_func(hasOptedOut, options)\n    }\n\n    /**\n     * Clear the user's opt in/out status of data capturing and cookies/localstorage for this PostHog instance\n     *\n     * ### Usage\n     *\n     *     // clear user's opt-in/out status\n     *     posthog.clear_opt_in_out_capturing();\n     *\n     *     // clear user's opt-in/out status with specific cookie configuration - should match\n     *     // configuration used when opt_in_capturing/opt_out_capturing methods were called.\n     *     posthog.clear_opt_in_out_capturing({\n     *         cookie_expiration: 30,\n     *         secure_cookie: true\n     *     });\n     *\n     * @param {Object} [options] A dictionary of config options to override\n     * @param {boolean} [options.enable_persistence=true] If true, will re-enable sdk persistence\n     * @param {string} [options.persistence_type=localStorage] Persistence mechanism used - cookie or localStorage - falls back to cookie if localStorage is unavailable\n     * @param {string} [options.cookie_prefix=__ph_opt_in_out] Custom prefix to be used in the cookie/localstorage name\n     * @param {Number} [options.cookie_expiration] Number of days until the opt-in cookie expires (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.cross_subdomain_cookie] Whether the opt-in cookie is set as cross-subdomain or not (overrides value specified in this PostHog instance's config)\n     * @param {boolean} [options.secure_cookie] Whether the opt-in cookie is set as secure or not (overrides value specified in this PostHog instance's config)\n     */\n    clear_opt_in_out_capturing(options?: Partial<OptInOutCapturingOptions>): void {\n        const _options: Partial<OptInOutCapturingOptions> = _extend(\n            {\n                enable_persistence: true,\n            },\n            options ?? {}\n        )\n        this._gdpr_call_func(clearOptInOut, _options)\n        this._gdpr_update_persistence(_options)\n    }\n\n    debug(debug?: boolean): void {\n        if (debug === false) {\n            window?.console.log(\"You've disabled debug mode.\")\n            localStorage && localStorage.removeItem('ph_debug')\n            this.set_config({ debug: false })\n        } else {\n            window?.console.log(\n                \"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\"\n            )\n            localStorage && localStorage.setItem('ph_debug', 'true')\n            this.set_config({ debug: true })\n        }\n    }\n}\n\n_safewrap_class(PostHog, ['identify'])\n\nconst add_dom_loaded_handler = function () {\n    // Cross browser DOM Loaded support\n    function dom_loaded_handler() {\n        // function flag since we only want to execute this once\n        if ((dom_loaded_handler as any).done) {\n            return\n        }\n        ;(dom_loaded_handler as any).done = true\n\n        ENQUEUE_REQUESTS = false\n\n        _each(instances, function (inst: PostHog) {\n            inst._dom_loaded()\n        })\n    }\n\n    if (document?.addEventListener) {\n        if (document.readyState === 'complete') {\n            // safari 4 can fire the DOMContentLoaded event before loading all\n            // external JS (including this file). you will see some copypasta\n            // on the internet that checks for 'complete' and 'loaded', but\n            // 'loaded' is an IE thing\n            dom_loaded_handler()\n        } else {\n            document.addEventListener('DOMContentLoaded', dom_loaded_handler, false)\n        }\n    }\n\n    // fallback handler, always will work\n    if (window) {\n        _register_event(window, 'load', dom_loaded_handler, true)\n    }\n}\n\nexport function init_from_snippet(): void {\n    const posthogMain = (instances[PRIMARY_INSTANCE_NAME] = new PostHog())\n\n    const snippetPostHog = assignableWindow['posthog']\n\n    if (snippetPostHog) {\n        /**\n         * The snippet uses some clever tricks to allow deferred loading of array.js (this code)\n         *\n         * window.posthog is an array which the queue of calls made before the lib is loaded\n         * It has methods attached to it to simulate the posthog object so for instance\n         *\n         * window.posthog.init(\"TOKEN\", {api_host: \"foo\" })\n         * window.posthog.capture(\"my-event\", {foo: \"bar\" })\n         *\n         * ... will mean that window.posthog will look like this:\n         * window.posthog == [\n         *  [\"my-event\", {foo: \"bar\"}]\n         * ]\n         *\n         * window.posthog[_i] == [\n         *   [\"TOKEN\", {api_host: \"foo\" }, \"posthog\"]\n         * ]\n         *\n         * If a name is given to the init function then the same as above is true but as a sub-property on the object:\n         *\n         * window.posthog.init(\"TOKEN\", {}, \"ph2\")\n         * window.posthog.ph2.people.set({foo: \"bar\"})\n         *\n         * window.posthog.ph2 == []\n         * window.posthog.people == [\n         *  [\"set\", {foo: \"bar\"}]\n         * ]\n         *\n         */\n\n        // Call all pre-loaded init calls properly\n\n        _each(snippetPostHog['_i'], function (item: [token: string, config: Partial<PostHogConfig>, name: string]) {\n            if (item && _isArray(item)) {\n                const instance = posthogMain.init(item[0], item[1], item[2])\n\n                const instanceSnippet = snippetPostHog[item[2]] || snippetPostHog\n\n                if (instance) {\n                    // Crunch through the people queue first - we queue this data up &\n                    // flush on identify, so it's better to do all these operations first\n                    instance._execute_array.call(instance.people, instanceSnippet.people)\n                    instance._execute_array(instanceSnippet)\n                }\n            }\n        })\n    }\n\n    assignableWindow['posthog'] = posthogMain\n\n    add_dom_loaded_handler()\n}\n\nexport function init_as_module(): PostHog {\n    const posthogMain = (instances[PRIMARY_INSTANCE_NAME] = new PostHog())\n\n    add_dom_loaded_handler()\n\n    return posthogMain\n}\n"]}