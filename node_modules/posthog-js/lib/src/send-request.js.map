{"version":3,"file":"send-request.js","sourceRoot":"","sources":["../../src/send-request.ts"],"names":[],"mappings":"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","sourcesContent":["import { _each } from './utils'\nimport Config from './config'\nimport { PostData, XHROptions, RequestData, MinimalHTTPResponse } from './types'\nimport { _formDataToQuery } from './utils/request-utils'\n\nimport { _isArray, _isFunction, _isNumber, _isUint8Array, _isUndefined } from './utils/type-utils'\nimport { logger } from './utils/logger'\nimport { fetch } from './utils/globals'\n\nexport const addParamsToURL = (\n    url: string,\n    urlQueryArgs: Record<string, any> | undefined,\n    parameterOptions: { ip?: boolean }\n): string => {\n    const args = urlQueryArgs || {}\n    args['ip'] = parameterOptions['ip'] ? 1 : 0\n    args['_'] = new Date().getTime().toString()\n    args['ver'] = Config.LIB_VERSION\n\n    const halves = url.split('?')\n    if (halves.length > 1) {\n        const params = halves[1].split('&')\n        for (const p of params) {\n            const key = p.split('=')[0]\n            if (!_isUndefined(args[key])) {\n                delete args[key]\n            }\n        }\n    }\n\n    const argSeparator = url.indexOf('?') > -1 ? '&' : '?'\n    return url + argSeparator + _formDataToQuery(args)\n}\n\nexport const encodePostData = (data: PostData | Uint8Array, options: Partial<XHROptions>): string | BlobPart | null => {\n    if (options.blob && data.buffer) {\n        return new Blob([_isUint8Array(data) ? data : data.buffer], { type: 'text/plain' })\n    }\n\n    if (options.sendBeacon || options.blob) {\n        const body = encodePostData(data, { method: 'POST' }) as BlobPart\n        return new Blob([body], { type: 'application/x-www-form-urlencoded' })\n    }\n\n    if (options.method !== 'POST') {\n        return null\n    }\n\n    let body_data\n\n    if (_isArray(data) || _isUint8Array(data)) {\n        // TODO: eh? passing an Array here?\n        body_data = 'data=' + encodeURIComponent(data as any)\n    } else {\n        body_data = 'data=' + encodeURIComponent(data.data as string)\n    }\n\n    if ('compression' in data && data.compression) {\n        body_data += '&compression=' + data.compression\n    }\n\n    return body_data\n}\n\nexport const request = (params: RequestData) => {\n    // NOTE: Until we are confident with it, we only use fetch if explicitly told so\n    if (fetch && params.options.transport === 'fetch') {\n        const body = encodePostData(params.data, params.options)\n\n        const headers = new Headers()\n        _each(headers, function (headerValue, headerName) {\n            headers.append(headerName, headerValue)\n        })\n\n        if (params.options.method === 'POST' && !params.options.blob) {\n            headers.append('Content-Type', 'application/x-www-form-urlencoded')\n        }\n\n        let url = params.url\n\n        if (_isNumber(params.retriesPerformedSoFar) && params.retriesPerformedSoFar > 0) {\n            url = addParamsToURL(url, { retry_count: params.retriesPerformedSoFar }, {})\n        }\n\n        fetch(url, {\n            method: params.options?.method || 'GET',\n            headers,\n            keepalive: params.options.method === 'POST',\n            body,\n        })\n            .then((response) => {\n                const statusCode = response.status\n                // Report to the callback handlers\n                return response.text().then((responseText) => {\n                    params.onResponse?.({\n                        statusCode,\n                        responseText,\n                    })\n\n                    if (statusCode === 200) {\n                        try {\n                            params.callback?.(JSON.parse(responseText))\n                        } catch (e) {\n                            logger.error(e)\n                        }\n                        return\n                    }\n\n                    if (_isFunction(params.onError)) {\n                        params.onError({\n                            statusCode,\n                            responseText,\n                        })\n                    }\n\n                    // don't retry errors between 400 and 500 inclusive\n                    if (statusCode < 400 || statusCode > 500) {\n                        params.retryQueue.enqueue({\n                            ...params,\n                            headers,\n                            retriesPerformedSoFar: (params.retriesPerformedSoFar || 0) + 1,\n                        })\n                    }\n                    params.callback?.({ status: 0 })\n                })\n            })\n            .catch((error) => {\n                logger.error(error)\n                params.callback?.({ status: 0 })\n            })\n\n        return\n    }\n\n    return xhr(params)\n}\n\nconst xhr = ({\n    url,\n    data,\n    headers,\n    options,\n    callback,\n    retriesPerformedSoFar,\n    retryQueue,\n    onError,\n    timeout = 60000,\n    onResponse,\n}: RequestData) => {\n    if (_isNumber(retriesPerformedSoFar) && retriesPerformedSoFar > 0) {\n        url = addParamsToURL(url, { retry_count: retriesPerformedSoFar }, {})\n    }\n\n    const req = new XMLHttpRequest()\n    req.open(options.method || 'GET', url, true)\n\n    const body = encodePostData(data, options)\n\n    _each(headers, function (headerValue, headerName) {\n        req.setRequestHeader(headerName, headerValue)\n    })\n\n    if (options.method === 'POST' && !options.blob) {\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    }\n\n    req.timeout = timeout\n    // send the ph_optout cookie\n    // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n    req.withCredentials = true\n    req.onreadystatechange = () => {\n        // XMLHttpRequest.DONE == 4, except in safari 4\n        if (req.readyState === 4) {\n            const minimalResponseSummary: MinimalHTTPResponse = {\n                statusCode: req.status,\n                responseText: req.responseText,\n            }\n            onResponse?.(minimalResponseSummary)\n            if (req.status === 200) {\n                if (callback) {\n                    let response\n                    try {\n                        response = JSON.parse(req.responseText)\n                    } catch (e) {\n                        logger.error(e)\n                        return\n                    }\n                    callback(response)\n                }\n            } else {\n                if (_isFunction(onError)) {\n                    onError(minimalResponseSummary)\n                }\n\n                // don't retry errors between 400 and 500 inclusive\n                if (req.status < 400 || req.status > 500) {\n                    retryQueue.enqueue({\n                        url,\n                        data,\n                        options,\n                        headers,\n                        retriesPerformedSoFar: (retriesPerformedSoFar || 0) + 1,\n                        callback,\n                    })\n                }\n\n                callback?.({ status: 0 })\n            }\n        }\n    }\n    req.send(body)\n}\n"]}