{"version":3,"file":"retry-queue.js","sourceRoot":"","sources":["../../src/retry-queue.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAA;AAC3D,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAA;AAIxD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAA;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACvC,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AAExC,IAAM,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAA;AAEpC;;;;;;;;;GASG;AACH,MAAM,UAAU,kBAAkB,CAAC,qBAA6B;IAC5D,IAAM,cAAc,GAAG,IAAI,GAAG,SAAA,CAAC,EAAI,qBAAqB,CAAA,CAAA;IACxD,IAAM,UAAU,GAAG,cAAc,GAAG,CAAC,CAAA;IACrC,IAAM,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,cAAc,CAAC,CAAA;IACjE,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAA,CAAC,uCAAuC;IAClF,IAAM,MAAM,GAAG,cAAc,GAAG,CAAC,iBAAiB,GAAG,UAAU,CAAC,CAAA;IAChE,OAAO,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,CAAA;AAChD,CAAC;AAED;IAAgC,8BAAoB;IAOhD,oBAAY,cAAiD,EAAE,WAAwB;QAAvF,YACI,iBAAO,SAgBV;QAfG,KAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACtB,KAAI,CAAC,KAAK,GAAG,EAAE,CAAA;QACf,KAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACvB,KAAI,CAAC,cAAc,GAAG,cAAc,CAAA;QACpC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAE9B,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,QAAQ,IAAI,MAAM,CAAC,SAAS,EAAE;YACvD,KAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,CAAA;YAC1C,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBAC9B,KAAI,CAAC,qBAAqB,EAAE,CAAA;YAChC,CAAC,CAAC,CAAA;YACF,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE;gBAC/B,KAAI,CAAC,WAAW,GAAG,KAAK,CAAA;YAC5B,CAAC,CAAC,CAAA;SACL;;IACL,CAAC;IAED,4BAAO,GAAP,UAAQ,WAA8B;QAClC,IAAM,qBAAqB,GAAG,WAAW,CAAC,qBAAqB,IAAI,CAAC,CAAA;QACpE,IAAI,qBAAqB,IAAI,EAAE,EAAE;YAC7B,OAAM;SACT;QACD,IAAM,aAAa,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,CAAA;QAC/D,IAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,aAAa,CAAC,CAAA;QAEpD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,WAAW,aAAA,EAAE,CAAC,CAAA;QAEzC,IAAI,UAAU,GAAG,+CAAwC,aAAa,CAAE,CAAA;QACxE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACnB,UAAU,IAAI,uBAAuB,CAAA;SACxC;QACD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAEvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;YACrB,IAAI,CAAC,IAAI,EAAE,CAAA;SACd;IACL,CAAC;IAED,yBAAI,GAAJ;QAAA,iBAQC;QAPG,IAAI,CAAC,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;YACtB,IAAI,KAAI,CAAC,WAAW,IAAI,KAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3C,KAAI,CAAC,KAAK,EAAE,CAAA;aACf;YACD,KAAI,CAAC,IAAI,EAAE,CAAA;QACf,CAAC,EAAE,IAAI,CAAC,aAAa,CAAkB,CAAA;IAC3C,CAAC;IAED,0BAAK,GAAL;;QACI,4HAA4H;QAC5H,IAAM,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;QAChC,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,EAAW;gBAAT,OAAO,aAAA;YAAO,OAAA,OAAO,GAAG,GAAG;QAAb,CAAa,CAAC,CAAA;QACjE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,EAAW;oBAAT,OAAO,aAAA;gBAAO,OAAA,OAAO,IAAI,GAAG;YAAd,CAAc,CAAC,CAAA;;gBAC/D,KAA8B,IAAA,YAAA,SAAA,OAAO,CAAA,gCAAA,qDAAE;oBAA1B,IAAA,WAAW,gCAAA;oBACpB,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAA;iBACvC;;;;;;;;;SACJ;IACL,CAAC;IAED,2BAAM,GAAN;;QACI,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YAC1B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAA;SAC3B;;YAED,KAA8B,IAAA,KAAA,SAAA,IAAI,CAAC,KAAK,CAAA,gBAAA,4BAAE;gBAA7B,IAAA,WAAW,uBAAA;gBACZ,IAAA,GAAG,GAAoB,WAAW,IAA/B,EAAE,IAAI,GAAc,WAAW,KAAzB,EAAE,OAAO,GAAK,WAAW,QAAhB,CAAgB;gBAE1C,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;oBACnD,MAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAA;oBAC/D,SAAQ;iBACX;gBAED,IAAI;oBACA,sDAAsD;oBACtD,yCAAyC;oBACzC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,cAAc,CAAC,IAAI,wBAAO,OAAO,KAAE,UAAU,EAAE,IAAI,IAAG,CAAC,CAAA;iBAC5F;gBAAC,OAAO,CAAC,EAAE;oBACR,gHAAgH;oBAChH,+DAA+D;oBAC/D,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBAClB;aACJ;;;;;;;;;QACD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;IACnB,CAAC;IAED,uCAAkB,GAAlB,UAAmB,EAAmF;YAAjF,GAAG,SAAA,EAAE,IAAI,UAAA,EAAE,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,qBAAqB,2BAAA;QAC7E,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACnD,OAAM;SACT;QAED,OAAO,CAAC;YACJ,GAAG,KAAA;YACH,IAAI,EAAE,IAAI,IAAI,EAAE;YAChB,OAAO,EAAE,OAAO,IAAI,EAAE;YACtB,OAAO,EAAE,OAAO,IAAI,EAAE;YACtB,qBAAqB,EAAE,qBAAqB,IAAI,CAAC;YACjD,QAAQ,UAAA;YACR,UAAU,EAAE,IAAI;YAChB,OAAO,EAAE,IAAI,CAAC,cAAc;YAC5B,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,gBAAgB;SAChD,CAAC,CAAA;IACN,CAAC;IAED,0CAAqB,GAArB;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;QACvB,IAAI,CAAC,KAAK,EAAE,CAAA;IAChB,CAAC;IACL,iBAAC;AAAD,CAAC,AAvHD,CAAgC,oBAAoB,GAuHnD","sourcesContent":["import { RequestQueueScaffold } from './base-request-queue'\nimport { encodePostData, request } from './send-request'\nimport { PostHogConfig, QueuedRequestData, RetryQueueElement } from './types'\nimport { RateLimiter } from './rate-limiter'\n\nimport { _isUndefined } from './utils/type-utils'\nimport { logger } from './utils/logger'\nimport { window } from './utils/globals'\n\nconst thirtyMinutes = 30 * 60 * 1000\n\n/**\n * Generates a jitter-ed exponential backoff delay in milliseconds\n *\n * The base value is 6 seconds, which is doubled with each retry\n * up to the maximum of 30 minutes\n *\n * Each value then has +/- 50% jitter\n *\n * Giving a range of 6 seconds up to 45 minutes\n */\nexport function pickNextRetryDelay(retriesPerformedSoFar: number): number {\n    const rawBackoffTime = 3000 * 2 ** retriesPerformedSoFar\n    const minBackoff = rawBackoffTime / 2\n    const cappedBackoffTime = Math.min(thirtyMinutes, rawBackoffTime)\n    const jitterFraction = Math.random() - 0.5 // A random number between -0.5 and 0.5\n    const jitter = jitterFraction * (cappedBackoffTime - minBackoff)\n    return Math.ceil(cappedBackoffTime + jitter)\n}\n\nexport class RetryQueue extends RequestQueueScaffold {\n    queue: RetryQueueElement[]\n    isPolling: boolean\n    areWeOnline: boolean\n    onRequestError: PostHogConfig['on_request_error']\n    rateLimiter: RateLimiter\n\n    constructor(onRequestError: PostHogConfig['on_request_error'], rateLimiter: RateLimiter) {\n        super()\n        this.isPolling = false\n        this.queue = []\n        this.areWeOnline = true\n        this.onRequestError = onRequestError\n        this.rateLimiter = rateLimiter\n\n        if (!_isUndefined(window) && 'onLine' in window.navigator) {\n            this.areWeOnline = window.navigator.onLine\n            window.addEventListener('online', () => {\n                this._handleWeAreNowOnline()\n            })\n            window.addEventListener('offline', () => {\n                this.areWeOnline = false\n            })\n        }\n    }\n\n    enqueue(requestData: QueuedRequestData): void {\n        const retriesPerformedSoFar = requestData.retriesPerformedSoFar || 0\n        if (retriesPerformedSoFar >= 10) {\n            return\n        }\n        const msToNextRetry = pickNextRetryDelay(retriesPerformedSoFar)\n        const retryAt = new Date(Date.now() + msToNextRetry)\n\n        this.queue.push({ retryAt, requestData })\n\n        let logMessage = `Enqueued failed request for retry in ${msToNextRetry}`\n        if (!navigator.onLine) {\n            logMessage += ' (Browser is offline)'\n        }\n        logger.warn(logMessage)\n\n        if (!this.isPolling) {\n            this.isPolling = true\n            this.poll()\n        }\n    }\n\n    poll(): void {\n        this._poller && clearTimeout(this._poller)\n        this._poller = setTimeout(() => {\n            if (this.areWeOnline && this.queue.length > 0) {\n                this.flush()\n            }\n            this.poll()\n        }, this._pollInterval) as any as number\n    }\n\n    flush(): void {\n        // using Date.now to make tests easier, as recommended here https://codewithhugo.com/mocking-the-current-date-in-jest-tests/\n        const now = new Date(Date.now())\n        const toFlush = this.queue.filter(({ retryAt }) => retryAt < now)\n        if (toFlush.length > 0) {\n            this.queue = this.queue.filter(({ retryAt }) => retryAt >= now)\n            for (const { requestData } of toFlush) {\n                this._executeXhrRequest(requestData)\n            }\n        }\n    }\n\n    unload(): void {\n        if (this._poller) {\n            clearTimeout(this._poller)\n            this._poller = undefined\n        }\n\n        for (const { requestData } of this.queue) {\n            const { url, data, options } = requestData\n\n            if (this.rateLimiter.isRateLimited(options._batchKey)) {\n                logger.warn('[RetryQueue] is quota limited. Dropping request.')\n                continue\n            }\n\n            try {\n                // we've had send beacon in place for at least 2 years\n                // eslint-disable-next-line compat/compat\n                window?.navigator.sendBeacon(url, encodePostData(data, { ...options, sendBeacon: true }))\n            } catch (e) {\n                // Note sendBeacon automatically retries, and after the first retry it will lose reference to contextual `this`.\n                // This means in some cases `this.getConfig` will be undefined.\n                logger.error(e)\n            }\n        }\n        this.queue = []\n    }\n\n    _executeXhrRequest({ url, data, options, headers, callback, retriesPerformedSoFar }: QueuedRequestData): void {\n        if (this.rateLimiter.isRateLimited(options._batchKey)) {\n            return\n        }\n\n        request({\n            url,\n            data: data || {},\n            options: options || {},\n            headers: headers || {},\n            retriesPerformedSoFar: retriesPerformedSoFar || 0,\n            callback,\n            retryQueue: this,\n            onError: this.onRequestError,\n            onResponse: this.rateLimiter.checkForLimiting,\n        })\n    }\n\n    _handleWeAreNowOnline(): void {\n        this.areWeOnline = true\n        this.flush()\n    }\n}\n"]}