{"version":3,"file":"rate-limiter.js","sourceRoot":"","sources":["../../src/rate-limiter.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AAEvC,IAAM,uBAAuB,GAAG,EAAE,GAAG,IAAI,CAAA;AAMzC;IAAA;QAAA,iBA+BC;QA9BG,WAAM,GAA2B,EAAE,CAAA;QAW5B,qBAAgB,GAAG,UAAC,YAA6B;YACpD,IAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAA;YAE9B,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACvB,OAAM;aACT;YAED,IAAI;gBACA,IAAM,QAAQ,GAAoB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;gBAClD,IAAM,oBAAoB,GAAG,QAAQ,CAAC,aAAa,IAAI,EAAE,CAAA;gBACzD,oBAAoB,CAAC,OAAO,CAAC,UAAC,QAAQ;oBAClC,MAAM,CAAC,IAAI,CAAC,wBAAiB,QAAQ,IAAI,QAAQ,uBAAoB,CAAC,CAAA;oBACtE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,uBAAuB,CAAA;gBAC1E,CAAC,CAAC,CAAA;aACL;YAAC,OAAO,CAAM,EAAE;gBACb,MAAM,CAAC,IAAI,CAAC,oEAA4D,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,OAAO,OAAG,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC,CAAA;gBAChG,OAAM;aACT;QACL,CAAC,CAAA;IACL,CAAC;IA5BU,mCAAa,GAApB,UAAqB,QAA4B;QAC7C,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAA;QAE7D,IAAI,UAAU,KAAK,KAAK,EAAE;YACtB,OAAO,KAAK,CAAA;SACf;QACD,OAAO,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,UAAU,CAAA;IAC5C,CAAC;IAqBL,kBAAC;AAAD,CAAC,AA/BD,IA+BC","sourcesContent":["import { RequestResponse } from './types'\nimport { logger } from './utils/logger'\n\nconst oneMinuteInMilliseconds = 60 * 1000\n\ninterface CaptureResponse {\n    quota_limited?: string[]\n}\n\nexport class RateLimiter {\n    limits: Record<string, number> = {}\n\n    public isRateLimited(batchKey: string | undefined): boolean {\n        const retryAfter = this.limits[batchKey || 'events'] || false\n\n        if (retryAfter === false) {\n            return false\n        }\n        return new Date().getTime() < retryAfter\n    }\n\n    public checkForLimiting = (httpResponse: RequestResponse): void => {\n        const text = httpResponse.text\n\n        if (!text || !text.length) {\n            return\n        }\n\n        try {\n            const response: CaptureResponse = JSON.parse(text)\n            const quotaLimitedProducts = response.quota_limited || []\n            quotaLimitedProducts.forEach((batchKey) => {\n                logger.info(`[RateLimiter] ${batchKey || 'events'} is quota limited.`)\n                this.limits[batchKey] = new Date().getTime() + oneMinuteInMilliseconds\n            })\n        } catch (e: any) {\n            logger.warn(`[RateLimiter] could not rate limit - continuing. Error: \"${e?.message}\"`, { text })\n            return\n        }\n    }\n}\n"]}