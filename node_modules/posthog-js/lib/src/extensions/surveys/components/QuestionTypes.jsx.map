{"version":3,"file":"QuestionTypes.jsx","sourceRoot":"","sources":["../../../../../src/extensions/surveys/components/QuestionTypes.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    BasicSurveyQuestion,\n    SurveyAppearance,\n    LinkSurveyQuestion,\n    RatingSurveyQuestion,\n    MultipleSurveyQuestion,\n    SurveyQuestionType,\n} from '../../../posthog-surveys-types'\nimport { RefObject } from 'preact'\nimport { useRef, useState } from 'preact/hooks'\nimport { _isNull, _isArray } from '../../../utils/type-utils'\nimport { useContrastingTextColor } from '../hooks/useContrastingTextColor'\nimport {\n    checkSVG,\n    dissatisfiedEmoji,\n    neutralEmoji,\n    satisfiedEmoji,\n    veryDissatisfiedEmoji,\n    verySatisfiedEmoji,\n} from '../icons'\nimport { defaultSurveyAppearance } from '../surveys-utils'\nimport { BottomSection } from './BottomSection'\nimport { Cancel, QuestionHeader } from './QuestionHeader'\n\nexport function OpenTextQuestion({\n    question,\n    appearance,\n    onSubmit,\n    closeSurveyPopup,\n}: {\n    question: BasicSurveyQuestion\n    appearance: SurveyAppearance\n    onSubmit: (text: string) => void\n    closeSurveyPopup: () => void\n}) {\n    const textRef = useRef(null)\n    const [text, setText] = useState('')\n\n    return (\n        <div\n            className=\"survey-box\"\n            style={{ backgroundColor: appearance.backgroundColor || defaultSurveyAppearance.backgroundColor }}\n            ref={textRef}\n        >\n            <Cancel onClick={() => closeSurveyPopup()} />\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                backgroundColor={appearance.backgroundColor}\n            />\n            <textarea rows={4} placeholder={appearance?.placeholder} onInput={(e) => setText(e.currentTarget.value)} />\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={!text && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(text)}\n            />\n        </div>\n    )\n}\n\nexport function LinkQuestion({\n    question,\n    appearance,\n    onSubmit,\n    closeSurveyPopup,\n}: {\n    question: LinkSurveyQuestion\n    appearance: SurveyAppearance\n    onSubmit: (clicked: string) => void\n    closeSurveyPopup: () => void\n}) {\n    return (\n        <div className=\"survey-box\">\n            <Cancel onClick={() => closeSurveyPopup()} />\n            <QuestionHeader question={question.question} description={question.description} />\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={false}\n                link={question.link}\n                appearance={appearance}\n                onSubmit={() => onSubmit('link clicked')}\n            />\n        </div>\n    )\n}\n\nexport function RatingQuestion({\n    question,\n    questionIndex,\n    appearance,\n    onSubmit,\n    closeSurveyPopup,\n}: {\n    question: RatingSurveyQuestion\n    questionIndex: number\n    appearance: SurveyAppearance\n    onSubmit: (rating: number | null) => void\n    closeSurveyPopup: () => void\n}) {\n    const scale = question.scale\n    const starting = question.scale === 10 ? 0 : 1\n    const [rating, setRating] = useState<number | null>(null)\n\n    return (\n        <div className=\"survey-box\">\n            <Cancel onClick={() => closeSurveyPopup()} />\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                backgroundColor={appearance.backgroundColor}\n            />\n            <div className=\"rating-section\">\n                <div className=\"rating-options\">\n                    {question.display === 'emoji' && (\n                        <div className=\"rating-options-emoji\">\n                            {(question.scale === 3 ? threeScaleEmojis : fiveScaleEmojis).map((emoji, idx) => {\n                                const active = idx + 1 === rating\n                                return (\n                                    <button\n                                        className={`ratings-emoji question-${questionIndex}-rating-${idx} ${\n                                            active ? 'rating-active' : null\n                                        }`}\n                                        value={idx + 1}\n                                        key={idx}\n                                        type=\"button\"\n                                        onClick={() => {\n                                            setRating(idx + 1)\n                                        }}\n                                    >\n                                        {emoji}\n                                    </button>\n                                )\n                            })}\n                        </div>\n                    )}\n                    {question.display === 'number' && (\n                        <div\n                            className=\"rating-options-number\"\n                            style={{ gridTemplateColumns: `repeat(${scale - starting + 1}, minmax(0, 1fr))` }}\n                        >\n                            {(question.scale === 5 ? fiveScaleNumbers : tenScaleNumbers).map((number, idx) => {\n                                const active = rating === number\n                                return (\n                                    <RatingButton\n                                        key={idx}\n                                        questionIndex={questionIndex}\n                                        active={active}\n                                        appearance={appearance}\n                                        num={number}\n                                        setActiveNumber={(num) => {\n                                            setRating(num)\n                                        }}\n                                    />\n                                )\n                            })}\n                        </div>\n                    )}\n                </div>\n                <div className=\"rating-text\">\n                    <div>{question.lowerBoundLabel}</div>\n                    <div>{question.upperBoundLabel}</div>\n                </div>\n            </div>\n            <BottomSection\n                text={question.buttonText || appearance?.submitButtonText || 'Submit'}\n                submitDisabled={_isNull(rating) && !question.optional}\n                appearance={appearance}\n                onSubmit={() => onSubmit(rating)}\n            />\n        </div>\n    )\n}\n\nexport function RatingButton({\n    num,\n    active,\n    questionIndex,\n    appearance,\n    setActiveNumber,\n}: {\n    num: number\n    active: boolean\n    questionIndex: number\n    appearance: any\n    setActiveNumber: (num: number) => void\n}) {\n    const { textColor, ref } = useContrastingTextColor({ appearance, defaultTextColor: 'black', forceUpdate: active })\n    return (\n        <button\n            ref={ref as RefObject<HTMLButtonElement>}\n            className={`ratings-number question-${questionIndex}-rating-${num} ${active ? 'rating-active' : null}`}\n            type=\"button\"\n            onClick={() => {\n                setActiveNumber(num)\n            }}\n            style={{\n                color: textColor,\n                backgroundColor: active ? appearance.ratingButtonActiveColor : appearance.ratingButtonColor,\n                borderColor: appearance.borderColor,\n            }}\n        >\n            {num}\n        </button>\n    )\n}\n\nexport function MultipleChoiceQuestion({\n    question,\n    questionIndex,\n    appearance,\n    onSubmit,\n    closeSurveyPopup,\n}: {\n    question: MultipleSurveyQuestion\n    questionIndex: number\n    appearance: SurveyAppearance\n    onSubmit: (choices: string | string[] | null) => void\n    closeSurveyPopup: () => void\n}) {\n    const textRef = useRef(null)\n    const [selectedChoices, setSelectedChoices] = useState<string | string[] | null>(\n        question.type === SurveyQuestionType.MultipleChoice ? [] : null\n    )\n    const [openChoiceSelected, setOpenChoiceSelected] = useState(false)\n    const [openEndedInput, setOpenEndedInput] = useState('')\n\n    const inputType = question.type === SurveyQuestionType.SingleChoice ? 'radio' : 'checkbox'\n    return (\n        <div\n            className=\"survey-box\"\n            style={{ backgroundColor: appearance.backgroundColor || defaultSurveyAppearance.backgroundColor }}\n            ref={textRef}\n        >\n            <Cancel onClick={() => closeSurveyPopup()} />\n            <QuestionHeader\n                question={question.question}\n                description={question.description}\n                backgroundColor={appearance.backgroundColor}\n            />\n            <div className=\"multiple-choice-options\">\n                {question.choices.map((choice: string, idx: number) => {\n                    let choiceClass = 'choice-option'\n                    const val = choice\n                    const option = choice\n                    if (!!question.hasOpenChoice && idx === question.choices.length - 1) {\n                        choiceClass += ' choice-option-open'\n                    }\n                    return (\n                        <div className={choiceClass}>\n                            <input\n                                type={inputType}\n                                id={`surveyQuestion${questionIndex}Choice${idx}`}\n                                name={`question${questionIndex}`}\n                                value={val}\n                                disabled={!val}\n                                onInput={() => {\n                                    if (question.hasOpenChoice && idx === question.choices.length - 1) {\n                                        return setOpenChoiceSelected(!openChoiceSelected)\n                                    }\n                                    if (question.type === SurveyQuestionType.SingleChoice) {\n                                        return setSelectedChoices(val)\n                                    }\n                                    if (\n                                        question.type === SurveyQuestionType.MultipleChoice &&\n                                        _isArray(selectedChoices)\n                                    ) {\n                                        if (selectedChoices.includes(val)) {\n                                            // filter out values because clicking on a selected choice should deselect it\n                                            return setSelectedChoices(\n                                                selectedChoices.filter((choice) => choice !== val)\n                                            )\n                                        }\n                                        return setSelectedChoices([...selectedChoices, val])\n                                    }\n                                }}\n                            />\n                            <label htmlFor={`surveyQuestion${questionIndex}Choice${idx}`} style={{ color: 'black' }}>\n                                {question.hasOpenChoice && idx === question.choices.length - 1 ? (\n                                    <>\n                                        <span>{option}:</span>\n                                        <input\n                                            type=\"text\"\n                                            id={`surveyQuestion${questionIndex}Choice${idx}Open`}\n                                            name={`question${questionIndex}`}\n                                            onInput={(e) => {\n                                                const userValue = e.currentTarget.value\n                                                if (question.type === SurveyQuestionType.SingleChoice) {\n                                                    return setSelectedChoices(userValue)\n                                                }\n                                                if (\n                                                    question.type === SurveyQuestionType.MultipleChoice &&\n                                                    _isArray(selectedChoices)\n                                                ) {\n                                                    return setOpenEndedInput(userValue)\n                                                }\n                                            }}\n                                        />\n                                    </>\n                                ) : (\n                                    option\n                                )}\n                            </label>\n                            <span className=\"choice-check\" style={{ color: 'black' }}>\n                                {checkSVG}\n                            </span>\n                        </div>\n                    )\n                })}\n            </div>\n            <BottomSection\n                text={question.buttonText || 'Submit'}\n                submitDisabled={\n                    (_isNull(selectedChoices) ||\n                        (_isArray(selectedChoices) && !openChoiceSelected && selectedChoices.length === 0) ||\n                        (_isArray(selectedChoices) &&\n                            openChoiceSelected &&\n                            !openEndedInput &&\n                            selectedChoices.length === 0 &&\n                            !question.optional)) &&\n                    !question.optional\n                }\n                appearance={appearance}\n                onSubmit={() => {\n                    if (openChoiceSelected && question.type === SurveyQuestionType.MultipleChoice) {\n                        if (_isArray(selectedChoices)) {\n                            onSubmit([...selectedChoices, openEndedInput])\n                        }\n                    } else {\n                        onSubmit(selectedChoices)\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nconst threeScaleEmojis = [dissatisfiedEmoji, neutralEmoji, satisfiedEmoji]\nconst fiveScaleEmojis = [veryDissatisfiedEmoji, dissatisfiedEmoji, neutralEmoji, satisfiedEmoji, verySatisfiedEmoji]\nconst fiveScaleNumbers = [1, 2, 3, 4, 5]\nconst tenScaleNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"]}