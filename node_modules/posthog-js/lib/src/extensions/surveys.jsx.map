{"version":3,"file":"surveys.jsx","sourceRoot":"","sources":["../../../src/extensions/surveys.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,EAQH,kBAAkB,EAClB,UAAU,GACb,MAAM,0BAA0B,CAAA;AAEjC,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,QAAQ,IAAI,SAAS,EAAE,MAAM,kBAAkB,CAAA;AAC3E,OAAO,EACH,KAAK,EACL,uBAAuB,EACvB,eAAe,EACf,YAAY,EACZ,uBAAuB,EACvB,aAAa,GAChB,MAAM,yBAAyB,CAAA;AAChC,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAA;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAA;AAChD,OAAO,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAA;AACxE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,cAAc,CAAA;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAA;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,0CAA0C,CAAA;AAC9E,OAAO,EACH,gBAAgB,EAChB,YAAY,EACZ,cAAc,EACd,sBAAsB,GACzB,MAAM,oCAAoC,CAAA;AAE3C,gGAAgG;AAChG,IAAM,MAAM,GAAG,OAAqC,CAAA;AACpD,IAAM,QAAQ,GAAG,SAAqB,CAAA;AAEtC,IAAM,YAAY,GAAG,UAAC,OAAgB,EAAE,MAAc;IAClD,IAAM,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAA;IACzC,IAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;IACjD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAC,CAAA;IACnG,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,EAAE,MAAM,CAAC,CAAA;AACvG,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,OAAgB,EAAE,WAA4B;IAA5B,4BAAA,EAAA,mBAA4B;IACtE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,wBAAwB,CAAC,UAAC,OAAO;QACtC,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,KAAK,EAArB,CAAqB,CAAC,CAAA;QACvE,aAAa,CAAC,OAAO,CAAC,UAAC,MAAM;;YACzB,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,MAAM,EAAE;gBACnC,IACI,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,UAAU,MAAK,KAAK;oBACvC,QAAQ,CAAC,gBAAgB,CAAC,wBAAiB,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EACtE;oBACE,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;iBAChC;gBACD,IAAI,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,UAAU,MAAK,UAAU,KAAI,MAAA,MAAM,CAAC,UAAU,0CAAE,cAAc,CAAA,EAAE;oBACnF,IAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAA;oBAC/E,IAAI,cAAc,EAAE;wBAChB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,wBAAiB,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;4BACtE,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;yBAChC;6BAAM,IAAI,QAAQ,CAAC,gBAAgB,CAAC,wBAAiB,MAAM,CAAC,EAAE,CAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;4BAC7E,4IAA4I;4BAC5I,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,6BAA6B,CAAC,EAAE;gCAC7D,IAAM,aAAW,GAAG,MAAA,MAAA,QAAQ;qCACvB,aAAa,CAAC,wBAAiB,MAAM,CAAC,EAAE,CAAE,CAAC,0CAC1C,UAAU,0CAAE,aAAa,CAAC,cAAc,CAAoB,CAAA;gCAClE,cAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE;oCACrC,IAAI,aAAW,EAAE;wCACb,aAAW,CAAC,KAAK,CAAC,OAAO;4CACrB,aAAW,CAAC,KAAK,CAAC,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAA;wCAC3D,aAAW,CAAC,gBAAgB,CACxB,gBAAgB,EAChB,cAAM,OAAA,CAAC,aAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,EAApC,CAAoC,CAC7C,CAAA;qCACJ;gCACL,CAAC,CAAC,CAAA;gCACF,cAAc,CAAC,YAAY,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAA;6BACrE;yBACJ;qBACJ;iBACJ;aACJ;YACD,IACI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,OAAO;gBAClC,QAAQ,CAAC,gBAAgB,CAAC,6BAA6B,CAAC,CAAC,MAAM,KAAK,CAAC,EACvE;gBACE,IAAM,sBAAsB,GAAG,MAAA,MAAM,CAAC,UAAU,0CAAE,0BAA0B,CAAA;gBAC5E,IAAM,kBAAkB,GAAG,YAAY,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAA;gBACrE,IAAI,sBAAsB,IAAI,kBAAkB,EAAE;oBAC9C,IAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAA;oBACxB,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;oBAC/E,IAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAA;oBAC9D,IAAI,iBAAiB,GAAG,sBAAsB,EAAE;wBAC5C,OAAM;qBACT;iBACJ;gBAED,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,qBAAc,MAAM,CAAC,EAAE,CAAE,CAAC,EAAE;oBAClD,IAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAA;oBACjE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAG,EAAE,MAAM,CAAC,CAAA;iBAC9F;aACJ;QACL,CAAC,CAAC,CAAA;IACN,CAAC,EAAE,WAAW,CAAC,CAAA;AACnB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAChC,MAAc,EACd,IAAiB,EACjB,YAAuC,EACvC,oBAA4B;;IAE5B,IAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;IACjD,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAA;IACpG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;IAC9B,IAAM,SAAS,GAAG,uBAAuB,CACrC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,eAAe,KAAI,uBAAuB,CAAC,eAAe,IAAI,OAAO,CAC3F,CAAA;IACD,IAAM,UAAU,GAAG,MAAM,CACrB,CAAC,OAAO,CACJ,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAC9B,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,QAAQ,CAAC,CAAC,IAAI,CAAC,CACf,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAClC,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,CAC3C,KAAK,CAAC,CAAC;YACH,QAAQ,EAAE,UAAU;YACpB,KAAK,EAAE,CAAC;YACR,YAAY,EAAE,oBAAa,MAAA,MAAM,CAAC,UAAU,0CAAE,WAAW,CAAE;YAC3D,YAAY,EAAE,EAAE;YAChB,KAAK,EAAE,SAAS;SACnB,CAAC,EACJ,CACL,CAAA;IACD,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC/C,SAAS,CAAC,SAAS,GAAG,UAAU,CAAA;IAChC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;AAC/B,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,2BAA2B,GAAG,UAAC,MAAc,EAAE,IAAiB;;IACzE,IAAM,gBAAgB,GAAG,iBAAiB,CAAC,MAAA,MAAM,CAAC,UAAU,0CAAE,WAAW,CAAC,CAAA;IAC1E,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAA;IACpG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;IAC9B,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,yBAAyB,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAG,CAAC,CAAA;IAC7G,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;IAC/C,SAAS,CAAC,SAAS,GAAG,UAAU,CAAA;IAChC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;AAC/B,CAAC,CAAA;AAED,qCAAqC;AACrC,MAAM,UAAU,eAAe,CAAC,OAAgB;IAC5C,sFAAsF;IACtF,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE;QACtB,OAAM;KACT;IACD,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAE1B,gFAAgF;IAChF,WAAW,CAAC;QACR,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;IAC/B,CAAC,EAAE,IAAI,CAAC,CAAA;AACZ,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,EAcvB;;QAbG,MAAM,YAAA,EACN,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,KAAK,WAAA,EACL,mBAAmB,yBAAA,EACnB,oBAAoB,0BAAA;IASd,IAAA,KAAA,OAAkC,QAAQ,CAC5C,mBAAmB,IAAI,QAAQ,CAClC,IAAA,EAFM,YAAY,QAAA,EAAE,eAAe,QAEnC,CAAA;IAED,SAAS,CAAC;;QACN,IAAI,QAAQ,IAAI,CAAC,OAAO,EAAE;YACtB,OAAM;SACT;QAED,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;QAEhD,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE;YAC5B,YAAY,EAAE,MAAM,CAAC,IAAI;YACzB,UAAU,EAAE,MAAM,CAAC,EAAE;YACrB,mBAAmB,EAAE,MAAA,OAAO,CAAC,sBAAsB,uDAAI;SAC1D,CAAC,CAAA;QACF,YAAY,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAA;QAEpE,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;YACtC,eAAe,CAAC,QAAQ,CAAC,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,gBAAgB,CAAC,cAAc,EAAE;;YACpC,IAAI,CAAC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,sBAAsB,CAAA,EAAE;gBAC5C,OAAO,eAAe,CAAC,QAAQ,CAAC,CAAA;aACnC;YACD,eAAe,CAAC,cAAc,CAAC,CAAA;YAC/B,IAAI,MAAA,MAAM,CAAC,UAAU,0CAAE,aAAa,EAAE;gBAClC,UAAU,CAAC;oBACP,eAAe,CAAC,QAAQ,CAAC,CAAA;gBAC7B,CAAC,EAAE,IAAI,CAAC,CAAA;aACX;QACL,CAAC,CAAC,CAAA;IACN,CAAC,EAAE,EAAE,CAAC,CAAA;IACN,IAAM,wBAAwB,GAAG,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,KAAI,SAAS,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAA;IAEvG,OAAO,CACH,EACI;YAAA,CAAC,aAAa,CAAC,QAAQ,CACnB,KAAK,CAAC,CAAC;YACH,QAAQ,EAAE,CAAC,CAAC,QAAQ;YACpB,oBAAoB,EAAE,oBAAoB,aAApB,oBAAoB,cAApB,oBAAoB,GAAI,CAAC;YAC/C,SAAS,EAAE,uBAAuB,CAC9B,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,eAAe,KAAI,uBAAuB,CAAC,eAAe,CAChF;SACJ,CAAC,CAEF;gBAAA,CAAC,YAAY,KAAK,QAAQ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,EAAG,CACpG;gBAAA,CAAC,YAAY,KAAK,cAAc,IAAI,CAChC,CAAC,mBAAmB,CAChB,kBAAkB,CAAC,CAAC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,qBAAqB,KAAI,YAAY,CAAC,CAC7E,uBAAuB,CAAC,CAAC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,0BAA0B,KAAI,EAAE,CAAC,CAC7E,UAAU,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,uBAAuB,CAAC,CACzD,cAAc,CAAC,uBAAM,KAAK,GAAK,wBAAwB,EAAG,CAC1D,OAAO,CAAC,CAAC,cAAM,OAAA,eAAe,CAAC,QAAQ,CAAC,EAAzB,CAAyB,CAAC,EAC3C,CACL,CACL;YAAA,EAAE,aAAa,CAAC,QAAQ,CAC5B;QAAA,GAAG,CACN,CAAA;AACL,CAAC;AAED,IAAM,eAAe,GAAG,UACpB,QAAwB,EACxB,aAAqB,EACrB,UAA4B,EAC5B,QAA0D,EAC1D,gBAA4B;;IAE5B,IAAM,OAAO;QACT,GAAC,kBAAkB,CAAC,IAAI,IAAG,CACvB,CAAC,gBAAgB,CACb,QAAQ,CAAC,CAAC,QAA+B,CAAC,CAC1C,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,EACrC,CACL;QACD,GAAC,kBAAkB,CAAC,IAAI,IAAG,CACvB,CAAC,YAAY,CACT,QAAQ,CAAC,CAAC,QAA8B,CAAC,CACzC,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,EACrC,CACL;QACD,GAAC,kBAAkB,CAAC,MAAM,IAAG,CACzB,CAAC,cAAc,CACX,QAAQ,CAAC,CAAC,QAAgC,CAAC,CAC3C,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,EACrC,CACL;QACD,GAAC,kBAAkB,CAAC,YAAY,IAAG,CAC/B,CAAC,sBAAsB,CACnB,QAAQ,CAAC,CAAC,QAAkC,CAAC,CAC7C,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,EACrC,CACL;QACD,GAAC,kBAAkB,CAAC,cAAc,IAAG,CACjC,CAAC,sBAAsB,CACnB,QAAQ,CAAC,CAAC,QAAkC,CAAC,CAC7C,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,EACrC,CACL;WACJ,CAAA;IACD,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;AACjC,CAAC,CAAA;AAED,MAAM,UAAU,SAAS,CAAC,EAQzB;;QAPG,MAAM,YAAA,EACN,OAAO,aAAA,EACP,cAAc,oBAAA;IAMd,IAAM,SAAS,GAAG,uBAAuB,CACrC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,eAAe,KAAI,uBAAuB,CAAC,eAAe,CAChF,CAAA;IACK,IAAA,KAAA,OAA8C,QAAQ,CAAC,EAAE,CAAC,IAAA,EAAzD,kBAAkB,QAAA,EAAE,qBAAqB,QAAgB,CAAA;IAC1D,IAAA,KAAqC,UAAU,CAAC,aAAa,CAAC,EAA5D,QAAQ,cAAA,EAAE,oBAAoB,0BAA8B,CAAA;IAC9D,IAAA,KAAA,OAAwC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,EAApF,eAAe,QAAA,EAAE,kBAAkB,QAAiD,CAAA;IAE3F,IAAM,WAAW,GAAG,UAAC,GAAsC,EAAE,GAAW;;QACpE,IAAM,WAAW,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,2BAAoB,GAAG,CAAE,CAAA;QAC9E,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,OAAO,eAAe,uBAAM,kBAAkB,gBAAG,WAAW,IAAG,GAAG,QAAI,MAAM,EAAE,OAAO,CAAC,CAAA;SACzF;aAAM;YACH,qBAAqB,uBAAM,kBAAkB,gBAAG,WAAW,IAAG,GAAG,OAAG,CAAA;YACpE,kBAAkB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAA;SAC9B;IACL,CAAC,CAAA;IACD,IAAM,kBAAkB,GAAG,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAA;IAEtD,OAAO,CACH,CAAC,IAAI;IACD,uBAAuB;IACvB,SAAS,CAAC,aAAa,CACvB,KAAK,CAAC,YAAG,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,MAAA,MAAM,CAAC,UAAU,0CAAE,WAAW,IAAK,cAAc,EAAG,CAE5F;YAAA,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,GAAG;YAChC,IAAI,kBAAkB,EAAE;gBACpB,OAAO,CACH,EACI;4BAAA,CAAC,eAAe,KAAK,GAAG,IAAI,CACxB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,uBAAgB,GAAG,cAAI,QAAQ,CAAC,IAAI,CAAE,CAAC,CACnD;oCAAA,CAAC,eAAe,CACZ,QAAQ,EACR,GAAG,EACH,MAAM,CAAC,UAAU,IAAI,uBAAuB,EAC5C,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,EAArB,CAAqB,EAC9B,cAAM,OAAA,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,EAA3C,CAA2C,CACpD,CACL;gCAAA,EAAE,GAAG,CAAC,CACT,CACL;wBAAA,GAAG,CACN,CAAA;aACJ;YACD,OAAO,eAAe,CAClB,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,EACrB,GAAG,EACH,MAAM,CAAC,UAAU,IAAI,uBAAuB,EAC5C,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,EAArB,CAAqB,EAC9B,cAAM,OAAA,gBAAgB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,EAA3C,CAA2C,CACpD,CAAA;QACL,CAAC,CAAC,CACN;QAAA,EAAE,IAAI,CAAC,CACV,CAAA;AACL,CAAC;AAED,IAAM,gBAAgB,GAAG,UAAC,MAAc,EAAE,OAAiB,EAAE,QAAkB;;;IAC3E,+DAA+D;IAC/D,IAAI,QAAQ,IAAI,CAAC,OAAO,EAAE;QACtB,OAAM;KACT;IACD,OAAO,CAAC,OAAO,CAAC,kBAAkB,EAAE;QAChC,YAAY,EAAE,MAAM,CAAC,IAAI;QACzB,UAAU,EAAE,MAAM,CAAC,EAAE;QACrB,mBAAmB,EAAE,MAAA,OAAO,CAAC,sBAAsB,uDAAI;QACvD,IAAI;YACA,GAAC,4BAAqB,MAAM,CAAC,EAAE,CAAE,IAAG,IAAI;eAC3C;KACJ,CAAC,CAAA;IACF,YAAY,CAAC,OAAO,CAAC,qBAAc,MAAM,CAAC,EAAE,CAAE,EAAE,MAAM,CAAC,CAAA;IACvD,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;AACrD,CAAC,CAAA;AAED,MAAM,UAAU,cAAc,CAAC,EAQ9B;;QAPG,MAAM,YAAA,EACN,OAAO,aAAA,EACP,QAAQ,cAAA;IAMF,IAAA,KAAA,OAA8B,QAAQ,CAAC,KAAK,CAAC,IAAA,EAA5C,UAAU,QAAA,EAAE,aAAa,QAAmB,CAAA;IAC7C,IAAA,KAAA,OAA6B,QAAQ,CAAC,EAAE,CAAC,IAAA,EAAxC,cAAc,QAAA,EAAE,QAAQ,QAAgB,CAAA;IAC/C,IAAM,SAAS,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAA;IAE9C,SAAS,CAAC;;QACN,IAAI,QAAQ,IAAI,CAAC,OAAO,EAAE;YACtB,OAAM;SACT;QAED,IAAI,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,UAAU,MAAK,KAAK,EAAE;YACzC,IAAI,SAAS,CAAC,OAAO,EAAE;gBACnB,IAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAA;gBAC3D,IAAM,OAAK,GAAG;oBACV,GAAG,EAAE,KAAK;oBACV,IAAI,EAAE,QAAQ,CAAC,UAAG,SAAS,CAAC,KAAK,GAAG,GAAG,CAAE,CAAC;oBAC1C,MAAM,EAAE,MAAM;oBACd,YAAY,EAAE,EAAE;oBAChB,YAAY,EAAE,sBAAe,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,WAAW,KAAI,SAAS,CAAE;iBAC7E,CAAA;gBACD,QAAQ,CAAC,OAAK,CAAC,CAAA;aAClB;SACJ;QACD,IAAI,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,UAAU,MAAK,UAAU,EAAE;YAC9C,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,IAAI,EAAE,CAAC,CAAA;YAC7E,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,gBAAgB,CAAC,OAAO,EAAE;gBAC9B,aAAa,CAAC,CAAC,UAAU,CAAC,CAAA;YAC9B,CAAC,CAAC,CAAA;YACF,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,YAAY,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAA;SAC9D;IACL,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,CACH,EACI;YAAA,CAAC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,UAAU,MAAK,KAAK,IAAI,CACxC,CAAC,GAAG,CACA,SAAS,CAAC,sBAAsB,CAChC,GAAG,CAAC,CAAC,SAAS,CAAC,CACf,OAAO,CAAC,CAAC,cAAM,OAAA,CAAC,QAAQ,IAAI,aAAa,CAAC,CAAC,UAAU,CAAC,EAAvC,CAAuC,CAAC,CACvD,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,uBAAuB,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAEzE;oBAAA,CAAC,GAAG,CAAC,SAAS,CAAC,2BAA2B,CAAC,EAAE,GAAG,CAChD;oBAAA,CAAC,CAAA,MAAA,MAAM,CAAC,UAAU,0CAAE,WAAW,KAAI,EAAE,CACzC;gBAAA,EAAE,GAAG,CAAC,CACT,CACD;YAAA,CAAC,UAAU,IAAI,CACX,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,EAAG,CACtG,CACL;QAAA,GAAG,CACN,CAAA;AACL,CAAC","sourcesContent":["import { PostHog } from '../posthog-core'\nimport {\n    BasicSurveyQuestion,\n    LinkSurveyQuestion,\n    MultipleSurveyQuestion,\n    RatingSurveyQuestion,\n    Survey,\n    SurveyAppearance,\n    SurveyQuestion,\n    SurveyQuestionType,\n    SurveyType,\n} from '../posthog-surveys-types'\n\nimport { window as _window, document as _document } from '../utils/globals'\nimport {\n    style,\n    defaultSurveyAppearance,\n    sendSurveyEvent,\n    createShadow,\n    getContrastingTextColor,\n    SurveyContext,\n} from './surveys/surveys-utils'\nimport * as Preact from 'preact'\nimport { render } from 'preact-render-to-string'\nimport { createWidgetShadow, createWidgetStyle } from './surveys-widget'\nimport { useState, useEffect, useRef, useContext } from 'preact/hooks'\nimport { _isNumber } from '../utils/type-utils'\nimport { ConfirmationMessage } from './surveys/components/ConfirmationMessage'\nimport {\n    OpenTextQuestion,\n    LinkQuestion,\n    RatingQuestion,\n    MultipleChoiceQuestion,\n} from './surveys/components/QuestionTypes'\n\n// We cast the types here which is dangerous but protected by the top level generateSurveys call\nconst window = _window as Window & typeof globalThis\nconst document = _document as Document\n\nconst handleWidget = (posthog: PostHog, survey: Survey) => {\n    const shadow = createWidgetShadow(survey)\n    const surveyStyleSheet = style(survey.appearance)\n    shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }))\n    Preact.render(<FeedbackWidget key={'feedback-survey'} posthog={posthog} survey={survey} />, shadow)\n}\n\nexport const callSurveys = (posthog: PostHog, forceReload: boolean = false) => {\n    posthog?.getActiveMatchingSurveys((surveys) => {\n        const nonAPISurveys = surveys.filter((survey) => survey.type !== 'api')\n        nonAPISurveys.forEach((survey) => {\n            if (survey.type === SurveyType.Widget) {\n                if (\n                    survey.appearance?.widgetType === 'tab' &&\n                    document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0\n                ) {\n                    handleWidget(posthog, survey)\n                }\n                if (survey.appearance?.widgetType === 'selector' && survey.appearance?.widgetSelector) {\n                    const selectorOnPage = document.querySelector(survey.appearance.widgetSelector)\n                    if (selectorOnPage) {\n                        if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 0) {\n                            handleWidget(posthog, survey)\n                        } else if (document.querySelectorAll(`.PostHogWidget${survey.id}`).length === 1) {\n                            // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not\n                            if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {\n                                const surveyPopup = document\n                                    .querySelector(`.PostHogWidget${survey.id}`)\n                                    ?.shadowRoot?.querySelector(`.survey-form`) as HTMLFormElement\n                                selectorOnPage.addEventListener('click', () => {\n                                    if (surveyPopup) {\n                                        surveyPopup.style.display =\n                                            surveyPopup.style.display === 'none' ? 'block' : 'none'\n                                        surveyPopup.addEventListener(\n                                            'PHSurveyClosed',\n                                            () => (surveyPopup.style.display = 'none')\n                                        )\n                                    }\n                                })\n                                selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true')\n                            }\n                        }\n                    }\n                }\n            }\n            if (\n                survey.type === SurveyType.Popover &&\n                document.querySelectorAll(\"div[class^='PostHogSurvey']\").length === 0\n            ) {\n                const surveyWaitPeriodInDays = survey.conditions?.seenSurveyWaitPeriodInDays\n                const lastSeenSurveyDate = localStorage.getItem(`lastSeenSurveyDate`)\n                if (surveyWaitPeriodInDays && lastSeenSurveyDate) {\n                    const today = new Date()\n                    const diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime())\n                    const diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24))\n                    if (diffDaysFromToday < surveyWaitPeriodInDays) {\n                        return\n                    }\n                }\n\n                if (!localStorage.getItem(`seenSurvey_${survey.id}`)) {\n                    const shadow = createShadow(style(survey?.appearance), survey.id)\n                    Preact.render(<Surveys key={'popover-survey'} posthog={posthog} survey={survey} />, shadow)\n                }\n            }\n        })\n    }, forceReload)\n}\n\nexport const renderSurveysPreview = (\n    survey: Survey,\n    root: HTMLElement,\n    displayState: 'survey' | 'confirmation',\n    previewQuestionIndex: number\n) => {\n    const surveyStyleSheet = style(survey.appearance)\n    const styleElement = Object.assign(document.createElement('style'), { innerText: surveyStyleSheet })\n    root.appendChild(styleElement)\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor || 'white'\n    )\n    const surveyHtml = render(\n        <Surveys\n            key={'surveys-render-preview'}\n            survey={survey}\n            readOnly={true}\n            initialDisplayState={displayState}\n            previewQuestionIndex={previewQuestionIndex}\n            style={{\n                position: 'relative',\n                right: 0,\n                borderBottom: `1px solid ${survey.appearance?.borderColor}`,\n                borderRadius: 10,\n                color: textColor,\n            }}\n        />\n    )\n    const surveyDiv = document.createElement('div')\n    surveyDiv.innerHTML = surveyHtml\n    root.appendChild(surveyDiv)\n}\n\nexport const renderFeedbackWidgetPreview = (survey: Survey, root: HTMLElement) => {\n    const widgetStyleSheet = createWidgetStyle(survey.appearance?.widgetColor)\n    const styleElement = Object.assign(document.createElement('style'), { innerText: widgetStyleSheet })\n    root.appendChild(styleElement)\n    const widgetHtml = render(<FeedbackWidget key={'feedback-render-preview'} survey={survey} readOnly={true} />)\n    const widgetDiv = document.createElement('div')\n    widgetDiv.innerHTML = widgetHtml\n    root.appendChild(widgetDiv)\n}\n\n// This is the main exported function\nexport function generateSurveys(posthog: PostHog) {\n    // NOTE: Important to ensure we never try and run surveys without a window environment\n    if (!document || !window) {\n        return\n    }\n    callSurveys(posthog, true)\n\n    // recalculate surveys every 3 seconds to check if URL or selectors have changed\n    setInterval(() => {\n        callSurveys(posthog, false)\n    }, 3000)\n}\n\nexport function Surveys({\n    survey,\n    posthog,\n    readOnly,\n    style,\n    initialDisplayState,\n    previewQuestionIndex,\n}: {\n    survey: Survey\n    posthog?: PostHog\n    readOnly?: boolean\n    style?: React.CSSProperties\n    initialDisplayState?: 'survey' | 'confirmation' | 'closed'\n    previewQuestionIndex?: number\n}) {\n    const [displayState, setDisplayState] = useState<'survey' | 'confirmation' | 'closed'>(\n        initialDisplayState || 'survey'\n    )\n\n    useEffect(() => {\n        if (readOnly || !posthog) {\n            return\n        }\n\n        window.dispatchEvent(new Event('PHSurveyShown'))\n\n        posthog.capture('survey shown', {\n            $survey_name: survey.name,\n            $survey_id: survey.id,\n            sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        })\n        localStorage.setItem(`lastSeenSurveyDate`, new Date().toISOString())\n\n        window.addEventListener('PHSurveyClosed', () => {\n            setDisplayState('closed')\n        })\n\n        window.addEventListener('PHSurveySent', () => {\n            if (!survey.appearance?.displayThankYouMessage) {\n                return setDisplayState('closed')\n            }\n            setDisplayState('confirmation')\n            if (survey.appearance?.autoDisappear) {\n                setTimeout(() => {\n                    setDisplayState('closed')\n                }, 5000)\n            }\n        })\n    }, [])\n    const confirmationBoxLeftStyle = style?.left && _isNumber(style?.left) ? { left: style.left - 40 } : {}\n\n    return (\n        <>\n            <SurveyContext.Provider\n                value={{\n                    readOnly: !!readOnly,\n                    previewQuestionIndex: previewQuestionIndex ?? 0,\n                    textColor: getContrastingTextColor(\n                        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor\n                    ),\n                }}\n            >\n                {displayState === 'survey' && <Questions survey={survey} posthog={posthog} styleOverrides={style} />}\n                {displayState === 'confirmation' && (\n                    <ConfirmationMessage\n                        confirmationHeader={survey.appearance?.thankYouMessageHeader || 'Thank you!'}\n                        confirmationDescription={survey.appearance?.thankYouMessageDescription || ''}\n                        appearance={survey.appearance || defaultSurveyAppearance}\n                        styleOverrides={{ ...style, ...confirmationBoxLeftStyle }}\n                        onClose={() => setDisplayState('closed')}\n                    />\n                )}\n            </SurveyContext.Provider>\n        </>\n    )\n}\n\nconst questionTypeMap = (\n    question: SurveyQuestion,\n    questionIndex: number,\n    appearance: SurveyAppearance,\n    onSubmit: (res: string | string[] | number | null) => void,\n    closeSurveyPopup: () => void\n): JSX.Element => {\n    const mapping = {\n        [SurveyQuestionType.Open]: (\n            <OpenTextQuestion\n                question={question as BasicSurveyQuestion}\n                appearance={appearance}\n                onSubmit={onSubmit}\n                closeSurveyPopup={closeSurveyPopup}\n            />\n        ),\n        [SurveyQuestionType.Link]: (\n            <LinkQuestion\n                question={question as LinkSurveyQuestion}\n                appearance={appearance}\n                onSubmit={onSubmit}\n                closeSurveyPopup={closeSurveyPopup}\n            />\n        ),\n        [SurveyQuestionType.Rating]: (\n            <RatingQuestion\n                question={question as RatingSurveyQuestion}\n                appearance={appearance}\n                questionIndex={questionIndex}\n                onSubmit={onSubmit}\n                closeSurveyPopup={closeSurveyPopup}\n            />\n        ),\n        [SurveyQuestionType.SingleChoice]: (\n            <MultipleChoiceQuestion\n                question={question as MultipleSurveyQuestion}\n                appearance={appearance}\n                questionIndex={questionIndex}\n                onSubmit={onSubmit}\n                closeSurveyPopup={closeSurveyPopup}\n            />\n        ),\n        [SurveyQuestionType.MultipleChoice]: (\n            <MultipleChoiceQuestion\n                question={question as MultipleSurveyQuestion}\n                appearance={appearance}\n                questionIndex={questionIndex}\n                onSubmit={onSubmit}\n                closeSurveyPopup={closeSurveyPopup}\n            />\n        ),\n    }\n    return mapping[question.type]\n}\n\nexport function Questions({\n    survey,\n    posthog,\n    styleOverrides,\n}: {\n    survey: Survey\n    posthog?: PostHog\n    styleOverrides?: React.CSSProperties\n}) {\n    const textColor = getContrastingTextColor(\n        survey.appearance?.backgroundColor || defaultSurveyAppearance.backgroundColor\n    )\n    const [questionsResponses, setQuestionsResponses] = useState({})\n    const { readOnly, previewQuestionIndex } = useContext(SurveyContext)\n    const [currentQuestion, setCurrentQuestion] = useState(readOnly ? previewQuestionIndex : 0)\n\n    const onNextClick = (res: string | string[] | number | null, idx: number) => {\n        const responseKey = idx === 0 ? `$survey_response` : `$survey_response_${idx}`\n        if (idx === survey.questions.length - 1) {\n            return sendSurveyEvent({ ...questionsResponses, [responseKey]: res }, survey, posthog)\n        } else {\n            setQuestionsResponses({ ...questionsResponses, [responseKey]: res })\n            setCurrentQuestion(idx + 1)\n        }\n    }\n    const isMultipleQuestion = survey.questions.length > 1\n\n    return (\n        <form\n            // TODO: BEMify classes\n            className=\"survey-form\"\n            style={{ color: textColor, borderColor: survey.appearance?.borderColor, ...styleOverrides }}\n        >\n            {survey.questions.map((question, idx) => {\n                if (isMultipleQuestion) {\n                    return (\n                        <>\n                            {currentQuestion === idx && (\n                                <div className={`tab question-${idx} ${question.type}`}>\n                                    {questionTypeMap(\n                                        question,\n                                        idx,\n                                        survey.appearance || defaultSurveyAppearance,\n                                        (res) => onNextClick(res, idx),\n                                        () => closeSurveyPopup(survey, posthog, readOnly)\n                                    )}\n                                </div>\n                            )}\n                        </>\n                    )\n                }\n                return questionTypeMap(\n                    survey.questions[idx],\n                    idx,\n                    survey.appearance || defaultSurveyAppearance,\n                    (res) => onNextClick(res, idx),\n                    () => closeSurveyPopup(survey, posthog, readOnly)\n                )\n            })}\n        </form>\n    )\n}\n\nconst closeSurveyPopup = (survey: Survey, posthog?: PostHog, readOnly?: boolean) => {\n    // TODO: state management and unit tests for this would be nice\n    if (readOnly || !posthog) {\n        return\n    }\n    posthog.capture('survey dismissed', {\n        $survey_name: survey.name,\n        $survey_id: survey.id,\n        sessionRecordingUrl: posthog.get_session_replay_url?.(),\n        $set: {\n            [`$survey_dismissed/${survey.id}`]: true,\n        },\n    })\n    localStorage.setItem(`seenSurvey_${survey.id}`, 'true')\n    window.dispatchEvent(new Event('PHSurveyClosed'))\n}\n\nexport function FeedbackWidget({\n    survey,\n    posthog,\n    readOnly,\n}: {\n    survey: Survey\n    posthog?: PostHog\n    readOnly?: boolean\n}): JSX.Element {\n    const [showSurvey, setShowSurvey] = useState(false)\n    const [styleOverrides, setStyle] = useState({})\n    const widgetRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        if (readOnly || !posthog) {\n            return\n        }\n\n        if (survey.appearance?.widgetType === 'tab') {\n            if (widgetRef.current) {\n                const widgetPos = widgetRef.current.getBoundingClientRect()\n                const style = {\n                    top: '50%',\n                    left: parseInt(`${widgetPos.right - 360}`),\n                    bottom: 'auto',\n                    borderRadius: 10,\n                    borderBottom: `1.5px solid ${survey.appearance?.borderColor || '#c9c6c6'}`,\n                }\n                setStyle(style)\n            }\n        }\n        if (survey.appearance?.widgetType === 'selector') {\n            const widget = document.querySelector(survey.appearance.widgetSelector || '')\n            widget?.addEventListener('click', () => {\n                setShowSurvey(!showSurvey)\n            })\n            widget?.setAttribute('PHWidgetSurveyClickListener', 'true')\n        }\n    }, [])\n\n    return (\n        <>\n            {survey.appearance?.widgetType === 'tab' && (\n                <div\n                    className=\"ph-survey-widget-tab\"\n                    ref={widgetRef}\n                    onClick={() => !readOnly && setShowSurvey(!showSurvey)}\n                    style={{ color: getContrastingTextColor(survey.appearance.widgetColor) }}\n                >\n                    <div className=\"ph-survey-widget-tab-icon\"></div>\n                    {survey.appearance?.widgetLabel || ''}\n                </div>\n            )}\n            {showSurvey && (\n                <Surveys key={'feedback-widget-survey'} posthog={posthog} survey={survey} style={styleOverrides} />\n            )}\n        </>\n    )\n}\n"]}