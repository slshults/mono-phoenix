var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { SurveyQuestionType, SurveyType, } from '../posthog-surveys-types';
import { window as _window, document as _document } from '../utils/globals';
import { style, defaultSurveyAppearance, sendSurveyEvent, createShadow, getContrastingTextColor, SurveyContext, } from './surveys/surveys-utils';
import * as Preact from 'preact';
import { render } from 'preact-render-to-string';
import { createWidgetShadow, createWidgetStyle } from './surveys-widget';
import { useState, useEffect, useRef, useContext } from 'preact/hooks';
import { _isNumber } from '../utils/type-utils';
import { ConfirmationMessage } from './surveys/components/ConfirmationMessage';
import { OpenTextQuestion, LinkQuestion, RatingQuestion, MultipleChoiceQuestion, } from './surveys/components/QuestionTypes';
// We cast the types here which is dangerous but protected by the top level generateSurveys call
var window = _window;
var document = _document;
var handleWidget = function (posthog, survey) {
    var shadow = createWidgetShadow(survey);
    var surveyStyleSheet = style(survey.appearance);
    shadow.appendChild(Object.assign(document.createElement('style'), { innerText: surveyStyleSheet }));
    Preact.render(<FeedbackWidget key={'feedback-survey'} posthog={posthog} survey={survey}/>, shadow);
};
export var callSurveys = function (posthog, forceReload) {
    if (forceReload === void 0) { forceReload = false; }
    posthog === null || posthog === void 0 ? void 0 : posthog.getActiveMatchingSurveys(function (surveys) {
        var nonAPISurveys = surveys.filter(function (survey) { return survey.type !== 'api'; });
        nonAPISurveys.forEach(function (survey) {
            var _a, _b, _c, _d, _e, _f;
            if (survey.type === SurveyType.Widget) {
                if (((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetType) === 'tab' &&
                    document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 0) {
                    handleWidget(posthog, survey);
                }
                if (((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.widgetType) === 'selector' && ((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.widgetSelector)) {
                    var selectorOnPage = document.querySelector(survey.appearance.widgetSelector);
                    if (selectorOnPage) {
                        if (document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 0) {
                            handleWidget(posthog, survey);
                        }
                        else if (document.querySelectorAll(".PostHogWidget".concat(survey.id)).length === 1) {
                            // we have to check if user selector already has a survey listener attached to it because we always have to check if it's on the page or not
                            if (!selectorOnPage.getAttribute('PHWidgetSurveyClickListener')) {
                                var surveyPopup_1 = (_e = (_d = document
                                    .querySelector(".PostHogWidget".concat(survey.id))) === null || _d === void 0 ? void 0 : _d.shadowRoot) === null || _e === void 0 ? void 0 : _e.querySelector(".survey-form");
                                selectorOnPage.addEventListener('click', function () {
                                    if (surveyPopup_1) {
                                        surveyPopup_1.style.display =
                                            surveyPopup_1.style.display === 'none' ? 'block' : 'none';
                                        surveyPopup_1.addEventListener('PHSurveyClosed', function () { return (surveyPopup_1.style.display = 'none'); });
                                    }
                                });
                                selectorOnPage.setAttribute('PHWidgetSurveyClickListener', 'true');
                            }
                        }
                    }
                }
            }
            if (survey.type === SurveyType.Popover &&
                document.querySelectorAll("div[class^='PostHogSurvey']").length === 0) {
                var surveyWaitPeriodInDays = (_f = survey.conditions) === null || _f === void 0 ? void 0 : _f.seenSurveyWaitPeriodInDays;
                var lastSeenSurveyDate = localStorage.getItem("lastSeenSurveyDate");
                if (surveyWaitPeriodInDays && lastSeenSurveyDate) {
                    var today = new Date();
                    var diff = Math.abs(today.getTime() - new Date(lastSeenSurveyDate).getTime());
                    var diffDaysFromToday = Math.ceil(diff / (1000 * 3600 * 24));
                    if (diffDaysFromToday < surveyWaitPeriodInDays) {
                        return;
                    }
                }
                if (!localStorage.getItem("seenSurvey_".concat(survey.id))) {
                    var shadow = createShadow(style(survey === null || survey === void 0 ? void 0 : survey.appearance), survey.id);
                    Preact.render(<Surveys key={'popover-survey'} posthog={posthog} survey={survey}/>, shadow);
                }
            }
        });
    }, forceReload);
};
export var renderSurveysPreview = function (survey, root, displayState, previewQuestionIndex) {
    var _a, _b;
    var surveyStyleSheet = style(survey.appearance);
    var styleElement = Object.assign(document.createElement('style'), { innerText: surveyStyleSheet });
    root.appendChild(styleElement);
    var textColor = getContrastingTextColor(((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.backgroundColor) || defaultSurveyAppearance.backgroundColor || 'white');
    var surveyHtml = render(<Surveys key={'surveys-render-preview'} survey={survey} readOnly={true} initialDisplayState={displayState} previewQuestionIndex={previewQuestionIndex} style={{
            position: 'relative',
            right: 0,
            borderBottom: "1px solid ".concat((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.borderColor),
            borderRadius: 10,
            color: textColor,
        }}/>);
    var surveyDiv = document.createElement('div');
    surveyDiv.innerHTML = surveyHtml;
    root.appendChild(surveyDiv);
};
export var renderFeedbackWidgetPreview = function (survey, root) {
    var _a;
    var widgetStyleSheet = createWidgetStyle((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetColor);
    var styleElement = Object.assign(document.createElement('style'), { innerText: widgetStyleSheet });
    root.appendChild(styleElement);
    var widgetHtml = render(<FeedbackWidget key={'feedback-render-preview'} survey={survey} readOnly={true}/>);
    var widgetDiv = document.createElement('div');
    widgetDiv.innerHTML = widgetHtml;
    root.appendChild(widgetDiv);
};
// This is the main exported function
export function generateSurveys(posthog) {
    // NOTE: Important to ensure we never try and run surveys without a window environment
    if (!document || !window) {
        return;
    }
    callSurveys(posthog, true);
    // recalculate surveys every 3 seconds to check if URL or selectors have changed
    setInterval(function () {
        callSurveys(posthog, false);
    }, 3000);
}
export function Surveys(_a) {
    var _b, _c, _d;
    var survey = _a.survey, posthog = _a.posthog, readOnly = _a.readOnly, style = _a.style, initialDisplayState = _a.initialDisplayState, previewQuestionIndex = _a.previewQuestionIndex;
    var _e = __read(useState(initialDisplayState || 'survey'), 2), displayState = _e[0], setDisplayState = _e[1];
    useEffect(function () {
        var _a;
        if (readOnly || !posthog) {
            return;
        }
        window.dispatchEvent(new Event('PHSurveyShown'));
        posthog.capture('survey shown', {
            $survey_name: survey.name,
            $survey_id: survey.id,
            sessionRecordingUrl: (_a = posthog.get_session_replay_url) === null || _a === void 0 ? void 0 : _a.call(posthog),
        });
        localStorage.setItem("lastSeenSurveyDate", new Date().toISOString());
        window.addEventListener('PHSurveyClosed', function () {
            setDisplayState('closed');
        });
        window.addEventListener('PHSurveySent', function () {
            var _a, _b;
            if (!((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.displayThankYouMessage)) {
                return setDisplayState('closed');
            }
            setDisplayState('confirmation');
            if ((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.autoDisappear) {
                setTimeout(function () {
                    setDisplayState('closed');
                }, 5000);
            }
        });
    }, []);
    var confirmationBoxLeftStyle = (style === null || style === void 0 ? void 0 : style.left) && _isNumber(style === null || style === void 0 ? void 0 : style.left) ? { left: style.left - 40 } : {};
    return (<>
            <SurveyContext.Provider value={{
            readOnly: !!readOnly,
            previewQuestionIndex: previewQuestionIndex !== null && previewQuestionIndex !== void 0 ? previewQuestionIndex : 0,
            textColor: getContrastingTextColor(((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.backgroundColor) || defaultSurveyAppearance.backgroundColor),
        }}>
                {displayState === 'survey' && <Questions survey={survey} posthog={posthog} styleOverrides={style}/>}
                {displayState === 'confirmation' && (<ConfirmationMessage confirmationHeader={((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.thankYouMessageHeader) || 'Thank you!'} confirmationDescription={((_d = survey.appearance) === null || _d === void 0 ? void 0 : _d.thankYouMessageDescription) || ''} appearance={survey.appearance || defaultSurveyAppearance} styleOverrides={__assign(__assign({}, style), confirmationBoxLeftStyle)} onClose={function () { return setDisplayState('closed'); }}/>)}
            </SurveyContext.Provider>
        </>);
}
var questionTypeMap = function (question, questionIndex, appearance, onSubmit, closeSurveyPopup) {
    var _a;
    var mapping = (_a = {},
        _a[SurveyQuestionType.Open] = (<OpenTextQuestion question={question} appearance={appearance} onSubmit={onSubmit} closeSurveyPopup={closeSurveyPopup}/>),
        _a[SurveyQuestionType.Link] = (<LinkQuestion question={question} appearance={appearance} onSubmit={onSubmit} closeSurveyPopup={closeSurveyPopup}/>),
        _a[SurveyQuestionType.Rating] = (<RatingQuestion question={question} appearance={appearance} questionIndex={questionIndex} onSubmit={onSubmit} closeSurveyPopup={closeSurveyPopup}/>),
        _a[SurveyQuestionType.SingleChoice] = (<MultipleChoiceQuestion question={question} appearance={appearance} questionIndex={questionIndex} onSubmit={onSubmit} closeSurveyPopup={closeSurveyPopup}/>),
        _a[SurveyQuestionType.MultipleChoice] = (<MultipleChoiceQuestion question={question} appearance={appearance} questionIndex={questionIndex} onSubmit={onSubmit} closeSurveyPopup={closeSurveyPopup}/>),
        _a);
    return mapping[question.type];
};
export function Questions(_a) {
    var _b, _c;
    var survey = _a.survey, posthog = _a.posthog, styleOverrides = _a.styleOverrides;
    var textColor = getContrastingTextColor(((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.backgroundColor) || defaultSurveyAppearance.backgroundColor);
    var _d = __read(useState({}), 2), questionsResponses = _d[0], setQuestionsResponses = _d[1];
    var _e = useContext(SurveyContext), readOnly = _e.readOnly, previewQuestionIndex = _e.previewQuestionIndex;
    var _f = __read(useState(readOnly ? previewQuestionIndex : 0), 2), currentQuestion = _f[0], setCurrentQuestion = _f[1];
    var onNextClick = function (res, idx) {
        var _a, _b;
        var responseKey = idx === 0 ? "$survey_response" : "$survey_response_".concat(idx);
        if (idx === survey.questions.length - 1) {
            return sendSurveyEvent(__assign(__assign({}, questionsResponses), (_a = {}, _a[responseKey] = res, _a)), survey, posthog);
        }
        else {
            setQuestionsResponses(__assign(__assign({}, questionsResponses), (_b = {}, _b[responseKey] = res, _b)));
            setCurrentQuestion(idx + 1);
        }
    };
    var isMultipleQuestion = survey.questions.length > 1;
    return (<form 
    // TODO: BEMify classes
    className="survey-form" style={__assign({ color: textColor, borderColor: (_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.borderColor }, styleOverrides)}>
            {survey.questions.map(function (question, idx) {
            if (isMultipleQuestion) {
                return (<>
                            {currentQuestion === idx && (<div className={"tab question-".concat(idx, " ").concat(question.type)}>
                                    {questionTypeMap(question, idx, survey.appearance || defaultSurveyAppearance, function (res) { return onNextClick(res, idx); }, function () { return closeSurveyPopup(survey, posthog, readOnly); })}
                                </div>)}
                        </>);
            }
            return questionTypeMap(survey.questions[idx], idx, survey.appearance || defaultSurveyAppearance, function (res) { return onNextClick(res, idx); }, function () { return closeSurveyPopup(survey, posthog, readOnly); });
        })}
        </form>);
}
var closeSurveyPopup = function (survey, posthog, readOnly) {
    var _a;
    var _b;
    // TODO: state management and unit tests for this would be nice
    if (readOnly || !posthog) {
        return;
    }
    posthog.capture('survey dismissed', {
        $survey_name: survey.name,
        $survey_id: survey.id,
        sessionRecordingUrl: (_b = posthog.get_session_replay_url) === null || _b === void 0 ? void 0 : _b.call(posthog),
        $set: (_a = {},
            _a["$survey_dismissed/".concat(survey.id)] = true,
            _a),
    });
    localStorage.setItem("seenSurvey_".concat(survey.id), 'true');
    window.dispatchEvent(new Event('PHSurveyClosed'));
};
export function FeedbackWidget(_a) {
    var _b, _c;
    var survey = _a.survey, posthog = _a.posthog, readOnly = _a.readOnly;
    var _d = __read(useState(false), 2), showSurvey = _d[0], setShowSurvey = _d[1];
    var _e = __read(useState({}), 2), styleOverrides = _e[0], setStyle = _e[1];
    var widgetRef = useRef(null);
    useEffect(function () {
        var _a, _b, _c;
        if (readOnly || !posthog) {
            return;
        }
        if (((_a = survey.appearance) === null || _a === void 0 ? void 0 : _a.widgetType) === 'tab') {
            if (widgetRef.current) {
                var widgetPos = widgetRef.current.getBoundingClientRect();
                var style_1 = {
                    top: '50%',
                    left: parseInt("".concat(widgetPos.right - 360)),
                    bottom: 'auto',
                    borderRadius: 10,
                    borderBottom: "1.5px solid ".concat(((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.borderColor) || '#c9c6c6'),
                };
                setStyle(style_1);
            }
        }
        if (((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.widgetType) === 'selector') {
            var widget = document.querySelector(survey.appearance.widgetSelector || '');
            widget === null || widget === void 0 ? void 0 : widget.addEventListener('click', function () {
                setShowSurvey(!showSurvey);
            });
            widget === null || widget === void 0 ? void 0 : widget.setAttribute('PHWidgetSurveyClickListener', 'true');
        }
    }, []);
    return (<>
            {((_b = survey.appearance) === null || _b === void 0 ? void 0 : _b.widgetType) === 'tab' && (<div className="ph-survey-widget-tab" ref={widgetRef} onClick={function () { return !readOnly && setShowSurvey(!showSurvey); }} style={{ color: getContrastingTextColor(survey.appearance.widgetColor) }}>
                    <div className="ph-survey-widget-tab-icon"></div>
                    {((_c = survey.appearance) === null || _c === void 0 ? void 0 : _c.widgetLabel) || ''}
                </div>)}
            {showSurvey && (<Surveys key={'feedback-widget-survey'} posthog={posthog} survey={survey} style={styleOverrides}/>)}
        </>);
}
//# sourceMappingURL=surveys.jsx.map