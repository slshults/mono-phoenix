{"version":3,"file":"segment-integration.js","sourceRoot":"","sources":["../../../src/extensions/segment-integration.ts"],"names":[],"mappings":"AAmBA,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AA4BxC,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,OAAgB;IACrD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;QAC9B,MAAM,CAAC,IAAI,CAAC,qFAAqF,CAAC,CAAA;KACrG;IAED,IAAM,WAAW,GAAG,UAAC,GAAyB,EAAE,SAAiB;QAC7D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,KAAK,OAAO,CAAC,eAAe,EAAE,EAAE;YAC1E,wGAAwG;YACxG,OAAO,CAAC,KAAK,EAAE,CAAA;SAClB;QACD,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,KAAK,OAAO,CAAC,eAAe,EAAE,EAAE;YACpE,OAAO,CAAC,QAAQ,CAAC;gBACb,WAAW,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM;aAChC,CAAC,CAAA;YACF,OAAO,CAAC,kBAAkB,EAAE,CAAA;SAC/B;QAED,IAAM,oBAAoB,GAAG,OAAO,CAAC,2BAA2B,CAAC,SAAS,EAAE,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QACjG,GAAG,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,oBAAoB,EAAE,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;QACpF,OAAO,GAAG,CAAA;IACd,CAAC,CAAA;IAED,OAAO;QACH,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,YAAY;QAClB,OAAO,EAAE,OAAO;QAChB,QAAQ,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACpB,+BAA+B;QAC/B,yCAAyC;QACzC,IAAI,EAAE,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB;QAC7B,KAAK,EAAE,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAjC,CAAiC;QACjD,IAAI,EAAE,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,WAAW,CAAC,EAA7B,CAA6B;QAC5C,QAAQ,EAAE,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,WAAW,CAAC,EAA7B,CAA6B;QAChD,MAAM,EAAE,UAAC,GAAG,IAAK,OAAA,WAAW,CAAC,GAAG,EAAE,SAAS,CAAC,EAA3B,CAA2B;KAC/C,CAAA;AACL,CAAC,CAAA","sourcesContent":["/**\n * Extend Segment with extra PostHog JS functionality. Required for things like Recordings and feature flags to work correctly.\n *\n * ### Usage\n *\n *  ```js\n *  // After your standard segment anyalytics install\n *  analytics.load(\"GOEDfA21zZTtR7clsBuDvmBKAtAdZ6Np\");\n *\n *  analytics.ready(() => {\n *    posthog.init('<posthog-api-key>', {\n *      capture_pageview: false,\n *      segment: window.analytics, // NOTE: Be sure to use window.analytics here!\n *    });\n *    window.analytics.page();\n *  })\n *  ```\n */\nimport { PostHog } from '../posthog-core'\nimport { logger } from '../utils/logger'\n\n// Loosely based on https://github.com/segmentio/analytics-next/blob/master/packages/core/src/plugins/index.ts\ninterface SegmentPluginContext {\n    event: {\n        event: string\n        userId?: string\n        anonymousId?: string\n        properties: any\n    }\n}\n\ninterface SegmentPlugin {\n    name: string\n    version: string\n    type: 'enrichment'\n    isLoaded: () => boolean\n    load: (ctx: SegmentPluginContext, instance: any, config?: any) => Promise<unknown>\n    unload?: (ctx: SegmentPluginContext, instance: any) => Promise<unknown> | unknown\n    ready?: () => Promise<unknown>\n    track?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n    identify?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n    page?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n    group?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n    alias?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n    screen?: (ctx: SegmentPluginContext) => Promise<SegmentPluginContext> | SegmentPluginContext\n}\n\nexport const createSegmentIntegration = (posthog: PostHog): SegmentPlugin => {\n    if (!Promise || !Promise.resolve) {\n        logger.warn('This browser does not have Promise support, and can not use the segment integration')\n    }\n\n    const enrichEvent = (ctx: SegmentPluginContext, eventName: string) => {\n        if (!ctx.event.userId && ctx.event.anonymousId !== posthog.get_distinct_id()) {\n            // This is our only way of detecting that segment's analytics.reset() has been called so we also call it\n            posthog.reset()\n        }\n        if (ctx.event.userId && ctx.event.userId !== posthog.get_distinct_id()) {\n            posthog.register({\n                distinct_id: ctx.event.userId,\n            })\n            posthog.reloadFeatureFlags()\n        }\n\n        const additionalProperties = posthog._calculate_event_properties(eventName, ctx.event.properties)\n        ctx.event.properties = Object.assign({}, additionalProperties, ctx.event.properties)\n        return ctx\n    }\n\n    return {\n        name: 'PostHog JS',\n        type: 'enrichment',\n        version: '1.0.0',\n        isLoaded: () => true,\n        // check and early return above\n        // eslint-disable-next-line compat/compat\n        load: () => Promise.resolve(),\n        track: (ctx) => enrichEvent(ctx, ctx.event.event),\n        page: (ctx) => enrichEvent(ctx, '$pageview'),\n        identify: (ctx) => enrichEvent(ctx, '$identify'),\n        screen: (ctx) => enrichEvent(ctx, '$screen'),\n    }\n}\n"]}