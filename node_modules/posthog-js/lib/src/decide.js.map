{"version":3,"file":"decide.js","sourceRoot":"","sources":["../../src/decide.ts"],"names":[],"mappings":"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","sourcesContent":["import { autocapture } from './autocapture'\nimport { loadScript } from './utils'\nimport { PostHog } from './posthog-core'\nimport { Compression, DecideResponse } from './types'\nimport { STORED_GROUP_PROPERTIES_KEY, STORED_PERSON_PROPERTIES_KEY } from './constants'\n\nimport { _isUndefined } from './utils/type-utils'\nimport { logger } from './utils/logger'\nimport { window, document, assignableWindow } from './utils/globals'\n\nexport class Decide {\n    instance: PostHog\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        // don't need to wait for `decide` to return if flags were provided on initialisation\n        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags()\n    }\n\n    call(): void {\n        /*\n        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.\n        */\n        const data = {\n            token: this.instance.config.token,\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n            person_properties: this.instance.get_property(STORED_PERSON_PROPERTIES_KEY),\n            group_properties: this.instance.get_property(STORED_GROUP_PROPERTIES_KEY),\n            disable_flags:\n                this.instance.config.advanced_disable_feature_flags ||\n                this.instance.config.advanced_disable_feature_flags_on_first_load ||\n                undefined,\n        }\n\n        this.instance._send_request({\n            method: 'POST',\n            url: this.instance.requestRouter.endpointFor('api', '/decide/?v=3'),\n            data,\n            compression: Compression.Base64,\n            timeout: this.instance.config.feature_flag_request_timeout_ms,\n            callback: (response) => this.parseDecideResponse(response.json as DecideResponse | undefined),\n        })\n    }\n\n    parseDecideResponse(response?: DecideResponse): void {\n        this.instance.featureFlags.setReloadingPaused(false)\n        // :TRICKY: Reload - start another request if queued!\n        this.instance.featureFlags._startReloadTimer()\n\n        const errorsLoading = !response\n\n        if (\n            !this.instance.config.advanced_disable_feature_flags_on_first_load &&\n            !this.instance.config.advanced_disable_feature_flags\n        ) {\n            this.instance.featureFlags.receivedFeatureFlags(response ?? {}, errorsLoading)\n        }\n\n        if (errorsLoading) {\n            logger.error('Failed to fetch feature flags from PostHog.')\n            return\n        }\n        if (!(document && document.body)) {\n            logger.info('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this.parseDecideResponse(response)\n            }, 500)\n            return\n        }\n\n        this.instance.toolbar.afterDecideResponse(response)\n        this.instance.sessionRecording?.afterDecideResponse(response)\n        autocapture.afterDecideResponse(response, this.instance)\n        this.instance._afterDecideResponse(response)\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const surveysGenerator = window?.extendPostHogWithSurveys\n\n        if (response['surveys'] && !surveysGenerator) {\n            loadScript(this.instance.requestRouter.endpointFor('assets', '/static/surveys.js'), (err) => {\n                if (err) {\n                    return logger.error(`Could not load surveys script`, err)\n                }\n\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                window.extendPostHogWithSurveys(this.instance)\n            })\n        }\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const exceptionAutoCaptureAddedToWindow = window?.extendPostHogWithExceptionAutoCapture\n        if (\n            response['autocaptureExceptions'] &&\n            !!response['autocaptureExceptions'] &&\n            _isUndefined(exceptionAutoCaptureAddedToWindow)\n        ) {\n            loadScript(this.instance.requestRouter.endpointFor('assets', '/static/exception-autocapture.js'), (err) => {\n                if (err) {\n                    return logger.error(`Could not load exception autocapture script`, err)\n                }\n\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                window.extendPostHogWithExceptionAutocapture(this.instance, response)\n            })\n        }\n\n        if (response['siteApps']) {\n            if (this.instance.config.opt_in_site_apps) {\n                for (const { id, url } of response['siteApps']) {\n                    const scriptUrl = this.instance.requestRouter.endpointFor('api', url)\n\n                    assignableWindow[`__$$ph_site_app_${id}`] = this.instance\n\n                    loadScript(scriptUrl, (err) => {\n                        if (err) {\n                            logger.error(`Error while initializing PostHog app with config id ${id}`, err)\n                        }\n                    })\n                }\n            } else if (response['siteApps'].length > 0) {\n                logger.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.')\n            }\n        }\n    }\n}\n"]}