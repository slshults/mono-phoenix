var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { _each } from './utils';
import Config from './config';
import { _formDataToQuery } from './utils/request-utils';
import { _isArray, _isFunction, _isNumber, _isUint8Array, _isUndefined } from './utils/type-utils';
import { logger } from './utils/logger';
import { fetch } from './utils/globals';
export var addParamsToURL = function (url, urlQueryArgs, parameterOptions) {
    var e_1, _a;
    var args = urlQueryArgs || {};
    args['ip'] = parameterOptions['ip'] ? 1 : 0;
    args['_'] = new Date().getTime().toString();
    args['ver'] = Config.LIB_VERSION;
    var halves = url.split('?');
    if (halves.length > 1) {
        var params = halves[1].split('&');
        try {
            for (var params_1 = __values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                var p = params_1_1.value;
                var key = p.split('=')[0];
                if (!_isUndefined(args[key])) {
                    delete args[key];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    var argSeparator = url.indexOf('?') > -1 ? '&' : '?';
    return url + argSeparator + _formDataToQuery(args);
};
export var encodePostData = function (data, options) {
    if (options.blob && data.buffer) {
        return new Blob([_isUint8Array(data) ? data : data.buffer], { type: 'text/plain' });
    }
    if (options.sendBeacon || options.blob) {
        var body = encodePostData(data, { method: 'POST' });
        return new Blob([body], { type: 'application/x-www-form-urlencoded' });
    }
    if (options.method !== 'POST') {
        return null;
    }
    var body_data;
    if (_isArray(data) || _isUint8Array(data)) {
        // TODO: eh? passing an Array here?
        body_data = 'data=' + encodeURIComponent(data);
    }
    else {
        body_data = 'data=' + encodeURIComponent(data.data);
    }
    if ('compression' in data && data.compression) {
        body_data += '&compression=' + data.compression;
    }
    return body_data;
};
export var request = function (params) {
    var _a;
    // NOTE: Until we are confident with it, we only use fetch if explicitly told so
    if (fetch && params.options.transport === 'fetch') {
        var body = encodePostData(params.data, params.options);
        var headers_1 = new Headers();
        _each(headers_1, function (headerValue, headerName) {
            headers_1.append(headerName, headerValue);
        });
        if (params.options.method === 'POST' && !params.options.blob) {
            headers_1.append('Content-Type', 'application/x-www-form-urlencoded');
        }
        var url = params.url;
        if (_isNumber(params.retriesPerformedSoFar) && params.retriesPerformedSoFar > 0) {
            url = addParamsToURL(url, { retry_count: params.retriesPerformedSoFar }, {});
        }
        fetch(url, {
            method: ((_a = params.options) === null || _a === void 0 ? void 0 : _a.method) || 'GET',
            headers: headers_1,
            keepalive: params.options.method === 'POST',
            body: body,
        })
            .then(function (response) {
            var statusCode = response.status;
            // Report to the callback handlers
            return response.text().then(function (responseText) {
                var _a, _b, _c;
                (_a = params.onResponse) === null || _a === void 0 ? void 0 : _a.call(params, {
                    statusCode: statusCode,
                    responseText: responseText,
                });
                if (statusCode === 200) {
                    try {
                        (_b = params.callback) === null || _b === void 0 ? void 0 : _b.call(params, JSON.parse(responseText));
                    }
                    catch (e) {
                        logger.error(e);
                    }
                    return;
                }
                if (_isFunction(params.onError)) {
                    params.onError({
                        statusCode: statusCode,
                        responseText: responseText,
                    });
                }
                // don't retry errors between 400 and 500 inclusive
                if (statusCode < 400 || statusCode > 500) {
                    params.retryQueue.enqueue(__assign(__assign({}, params), { headers: headers_1, retriesPerformedSoFar: (params.retriesPerformedSoFar || 0) + 1 }));
                }
                (_c = params.callback) === null || _c === void 0 ? void 0 : _c.call(params, { status: 0 });
            });
        })
            .catch(function (error) {
            var _a;
            logger.error(error);
            (_a = params.callback) === null || _a === void 0 ? void 0 : _a.call(params, { status: 0 });
        });
        return;
    }
    return xhr(params);
};
var xhr = function (_a) {
    var url = _a.url, data = _a.data, headers = _a.headers, options = _a.options, callback = _a.callback, retriesPerformedSoFar = _a.retriesPerformedSoFar, retryQueue = _a.retryQueue, onError = _a.onError, _b = _a.timeout, timeout = _b === void 0 ? 60000 : _b, onResponse = _a.onResponse;
    if (_isNumber(retriesPerformedSoFar) && retriesPerformedSoFar > 0) {
        url = addParamsToURL(url, { retry_count: retriesPerformedSoFar }, {});
    }
    var req = new XMLHttpRequest();
    req.open(options.method || 'GET', url, true);
    var body = encodePostData(data, options);
    _each(headers, function (headerValue, headerName) {
        req.setRequestHeader(headerName, headerValue);
    });
    if (options.method === 'POST' && !options.blob) {
        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }
    req.timeout = timeout;
    // send the ph_optout cookie
    // withCredentials cannot be modified until after calling .open on Android and Mobile Safari
    req.withCredentials = true;
    req.onreadystatechange = function () {
        // XMLHttpRequest.DONE == 4, except in safari 4
        if (req.readyState === 4) {
            var minimalResponseSummary = {
                statusCode: req.status,
                responseText: req.responseText,
            };
            onResponse === null || onResponse === void 0 ? void 0 : onResponse(minimalResponseSummary);
            if (req.status === 200) {
                if (callback) {
                    var response = void 0;
                    try {
                        response = JSON.parse(req.responseText);
                    }
                    catch (e) {
                        logger.error(e);
                        return;
                    }
                    callback(response);
                }
            }
            else {
                if (_isFunction(onError)) {
                    onError(minimalResponseSummary);
                }
                // don't retry errors between 400 and 500 inclusive
                if (req.status < 400 || req.status > 500) {
                    retryQueue.enqueue({
                        url: url,
                        data: data,
                        options: options,
                        headers: headers,
                        retriesPerformedSoFar: (retriesPerformedSoFar || 0) + 1,
                        callback: callback,
                    });
                }
                callback === null || callback === void 0 ? void 0 : callback({ status: 0 });
            }
        }
    };
    req.send(body);
};
//# sourceMappingURL=send-request.js.map