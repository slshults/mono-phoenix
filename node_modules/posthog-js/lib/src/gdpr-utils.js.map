{"version":3,"file":"gdpr-utils.js","sourceRoot":"","sources":["../../src/gdpr-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GDPR utils\n *\n * The General Data Protection Regulation (GDPR) is a regulation in EU law on data protection\n * and privacy for all individuals within the European Union. It addresses the export of personal\n * data outside the EU. The GDPR aims primarily to give control back to citizens and residents\n * over their personal data and to simplify the regulatory environment for international business\n * by unifying the regulation within the EU.\n *\n * This set of utilities is intended to enable opt in/out functionality in the PostHog JS SDK.\n * These functions are used internally by the SDK and are not intended to be publicly exposed.\n */\n\nimport { _each, _includes } from './utils'\nimport { window } from './utils/globals'\nimport { cookieStore, localStore, localPlusCookieStore } from './storage'\nimport { GDPROptions, PersistentStore } from './types'\nimport { PostHog } from './posthog-core'\n\nimport { _isNumber, _isString } from './utils/type-utils'\nimport { logger } from './utils/logger'\n\n/**\n * A function used to capture a PostHog event (e.g. PostHogLib.capture)\n * @callback captureFunction\n * @param {String} event_name The name of the event. This can be anything the user does - 'Button Click', 'Sign Up', 'Item Purchased', etc.\n * @param {Object} [properties] A set of properties to include with the event you're sending. These describe the user who did the event or details about the event itself.\n * @param {Function} [callback] If provided, the callback function will be called after capturing the event.\n */\n\n/** Public **/\n\nconst GDPR_DEFAULT_PERSISTENCE_PREFIX = '__ph_opt_in_out_'\n\n/**\n * Opt the user in to data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {captureFunction} [options.capture] - function used for capturing a PostHog event to record the opt-in action\n * @param {string} [options.captureEventName] - event name to be used for capturing the opt-in action\n * @param {Object} [options.captureProperties] - set of properties to be captured along with the opt-in action\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\nexport function optIn(token: string, options: GDPROptions): void {\n    _optInOut(true, token, options)\n}\n\n/**\n * Opt the user out of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-out cookie expires\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-out cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-out cookie is set as secure or not\n */\nexport function optOut(token: string, options: GDPROptions): void {\n    _optInOut(false, token, options)\n}\n\n/**\n * Check whether the user has opted in to data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {boolean} whether the user has opted in to the given opt type\n */\nexport function hasOptedIn(token: string, options: GDPROptions): boolean {\n    return _getStorageValue(token, options) === '1'\n}\n\n/**\n * Check whether the user has opted out of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {boolean} [options.respectDnt] - flag to take browser DNT setting into account\n * @returns {boolean} whether the user has opted out of the given opt type\n */\nexport function hasOptedOut(token: string, options: Partial<GDPROptions>): boolean {\n    if (_hasDoNotTrackFlagOn(options)) {\n        return true\n    }\n    return _getStorageValue(token, options) === '0'\n}\n\n/**\n * Clear the user's opt in/out status of data capturing and cookies/localstorage for the given token\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistenceType] Persistence mechanism used - cookie or localStorage\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\nexport function clearOptInOut(token: string, options: GDPROptions) {\n    options = options || {}\n    _getStorage(options).remove(_getStorageKey(token, options), !!options.crossSubdomainCookie)\n}\n\n/** Private **/\n\n/**\n * Get storage util\n * @param {Object} [options]\n * @param {string} [options.persistenceType]\n * @returns {object} either cookieStore or localStore\n */\nfunction _getStorage(options: GDPROptions): PersistentStore {\n    options = options || {}\n    if (options.persistenceType === 'localStorage') {\n        return localStore\n    }\n    if (options.persistenceType === 'localStorage+cookie') {\n        return localPlusCookieStore\n    }\n    return cookieStore\n}\n\n/**\n * Get the name of the cookie that is used for the given opt type (capturing, cookie, etc.)\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {string} the name of the cookie for the given opt type\n */\nfunction _getStorageKey(token: string, options: GDPROptions) {\n    options = options || {}\n    return (options.persistencePrefix || GDPR_DEFAULT_PERSISTENCE_PREFIX) + token\n}\n\n/**\n * Get the value of the cookie that is used for the given opt type (capturing, cookie, etc.)\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @returns {string} the value of the cookie for the given opt type\n */\nfunction _getStorageValue(token: string, options: GDPROptions) {\n    return _getStorage(options).get(_getStorageKey(token, options))\n}\n\n/**\n * Check whether the user has set the DNT/doNotTrack setting to true in their browser\n * @param {Object} [options]\n * @param {string} [options.window] - alternate window object to check; used to force various DNT settings in browser tests\n * @param {boolean} [options.respectDnt] - flag to take browser DNT setting into account\n * @returns {boolean} whether the DNT setting is true\n */\nfunction _hasDoNotTrackFlagOn(options: GDPROptions) {\n    if (options && options.respectDnt) {\n        const win = (options && options.window) || window\n        const nav = win?.navigator\n        let hasDntOn = false\n        _each(\n            [\n                nav?.doNotTrack, // standard\n                (nav as any)['msDoNotTrack'],\n                (win as any)['doNotTrack'],\n            ],\n            function (dntValue) {\n                if (_includes([true, 1, '1', 'yes'], dntValue)) {\n                    hasDntOn = true\n                }\n            }\n        )\n        return hasDntOn\n    }\n    return false\n}\n\n/**\n * Set cookie/localstorage for the user indicating that they are opted in or out for the given opt type\n * @param {boolean} optValue - whether to opt the user in or out for the given opt type\n * @param {string} token - PostHog project capturing token\n * @param {Object} [options]\n * @param {captureFunction} [options.capture] - function used for capturing a PostHog event to record the opt-in action\n * @param {string} [options.captureEventName] - event name to be used for capturing the opt-in action\n * @param {Object} [options.captureProperties] - set of properties to be captured along with the opt-in action\n * @param {string} [options.persistencePrefix=__ph_opt_in_out] - custom prefix to be used in the cookie/localstorage name\n * @param {Number} [options.cookieExpiration] - number of days until the opt-in cookie expires\n * @param {boolean} [options.crossSubdomainCookie] - whether the opt-in cookie is set as cross-subdomain or not\n * @param {boolean} [options.secureCookie] - whether the opt-in cookie is set as secure or not\n */\nfunction _optInOut(optValue: boolean, token: string, options: GDPROptions) {\n    if (!_isString(token) || !token.length) {\n        logger.error('gdpr.' + (optValue ? 'optIn' : 'optOut') + ' called with an invalid token')\n        return\n    }\n\n    options = options || {}\n\n    _getStorage(options).set(\n        _getStorageKey(token, options),\n        optValue ? 1 : 0,\n        _isNumber(options.cookieExpiration) ? options.cookieExpiration : null,\n        options.crossSubdomainCookie,\n        options.secureCookie\n    )\n\n    if (options.capture && optValue) {\n        // only capture event if opting in (optValue=true)\n        options.capture(options.captureEventName || '$opt_in', options.captureProperties || {}, {\n            send_instantly: true,\n        })\n    }\n}\n\nexport function userOptedOut(posthog: PostHog) {\n    let optedOut = false\n\n    try {\n        const token = posthog.config.token\n        const respectDnt = posthog.config.respect_dnt\n        const persistenceType = posthog.config.opt_out_capturing_persistence_type\n        const persistencePrefix = posthog.config.opt_out_capturing_cookie_prefix || undefined\n        const win = (posthog.config as any).window as Window | undefined // used to override window during browser tests\n\n        if (token) {\n            // if there was an issue getting the token, continue method execution as normal\n            optedOut = hasOptedOut(token, {\n                respectDnt,\n                persistenceType,\n                persistencePrefix,\n                window: win,\n            })\n        }\n    } catch (err) {\n        logger.error('Unexpected error when checking capturing opt-out status: ' + err)\n    }\n    return optedOut\n}\n"]}