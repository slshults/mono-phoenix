import { RequestQueueScaffold } from './base-request-queue';
import { PostHogConfig, QueuedRequestData, RetryQueueElement } from './types';
import { RateLimiter } from './rate-limiter';
/**
 * Generates a jitter-ed exponential backoff delay in milliseconds
 *
 * The base value is 6 seconds, which is doubled with each retry
 * up to the maximum of 30 minutes
 *
 * Each value then has +/- 50% jitter
 *
 * Giving a range of 6 seconds up to 45 minutes
 */
export declare function pickNextRetryDelay(retriesPerformedSoFar: number): number;
export declare class RetryQueue extends RequestQueueScaffold {
    queue: RetryQueueElement[];
    isPolling: boolean;
    areWeOnline: boolean;
    onRequestError: PostHogConfig['on_request_error'];
    rateLimiter: RateLimiter;
    constructor(onRequestError: PostHogConfig['on_request_error'], rateLimiter: RateLimiter);
    enqueue(requestData: QueuedRequestData): void;
    poll(): void;
    flush(): void;
    unload(): void;
    _executeXhrRequest({ url, data, options, headers, callback, retriesPerformedSoFar }: QueuedRequestData): void;
    _handleWeAreNowOnline(): void;
}
