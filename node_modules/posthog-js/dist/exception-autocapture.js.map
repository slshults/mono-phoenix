{"version":3,"file":"exception-autocapture.js","sources":["../src/utils/globals.ts","../src/utils/type-utils.ts","../src/extensions/exception-autocapture/type-checking.ts","../src/extensions/exception-autocapture/stack-trace.ts","../src/extensions/exception-autocapture/error-conversion.ts","../src/utils/logger.ts","../src/extensions/exception-autocapture/index.ts","../src/loader-exception-autocapture.ts"],"sourcesContent":["/*\n * Global helpers to protect access to browser globals in a way that is safer for different targets\n * like DOM, SSR, Web workers etc.\n *\n * NOTE: Typically we want the \"window\" but globalThis works for both the typical browser context as\n * well as other contexts such as the web worker context. Window is still exported for any bits that explicitly require it.\n * If in doubt - export the global you need from this file and use that as an optional value. This way the code path is forced\n * to handle the case where the global is not available.\n */\n\n// eslint-disable-next-line no-restricted-globals\nconst win: (Window & typeof globalThis) | undefined = typeof window !== 'undefined' ? window : undefined\n\nconst global: typeof globalThis | undefined = typeof globalThis !== 'undefined' ? globalThis : win\n\nexport const ArrayProto = Array.prototype\nexport const nativeForEach = ArrayProto.forEach\nexport const nativeIndexOf = ArrayProto.indexOf\n\nconst navigator = global?.navigator\nexport const document = global?.document\nexport const location = global?.location\nexport const fetch = global?.fetch\nexport const XMLHttpRequest =\n    global?.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest() ? global.XMLHttpRequest : undefined\nexport const AbortController = global?.AbortController\nexport const userAgent = navigator?.userAgent\nexport const assignableWindow: Window & typeof globalThis & Record<string, any> = win ?? ({} as any)\n\nexport { win as window }\n","// eslint-disable-next-line posthog-js/no-direct-array-check\nconst nativeIsArray = Array.isArray\nconst ObjProto = Object.prototype\nexport const hasOwnProperty = ObjProto.hasOwnProperty\nconst toString = ObjProto.toString\n\nexport const _isArray =\n    nativeIsArray ||\n    function (obj: any): obj is any[] {\n        return toString.call(obj) === '[object Array]'\n    }\nexport const _isUint8Array = function (x: unknown): x is Uint8Array {\n    return toString.call(x) === '[object Uint8Array]'\n}\n// from a comment on http://dbj.org/dbj/?p=286\n// fails on only one very rare and deliberate custom object:\n// let bomb = { toString : undefined, valueOf: function(o) { return \"function BOMBA!\"; }};\nexport const _isFunction = function (f: any): f is (...args: any[]) => any {\n    // eslint-disable-next-line posthog-js/no-direct-function-check\n    return typeof f === 'function'\n}\n// Underscore Addons\nexport const _isObject = function (x: unknown): x is Record<string, any> {\n    // eslint-disable-next-line posthog-js/no-direct-object-check\n    return x === Object(x) && !_isArray(x)\n}\nexport const _isEmptyObject = function (x: unknown): x is Record<string, any> {\n    if (_isObject(x)) {\n        for (const key in x) {\n            if (hasOwnProperty.call(x, key)) {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\nexport const _isUndefined = function (x: unknown): x is undefined {\n    return x === void 0\n}\n\nexport const _isString = function (x: unknown): x is string {\n    // eslint-disable-next-line posthog-js/no-direct-string-check\n    return toString.call(x) == '[object String]'\n}\n\nexport const _isEmptyString = function (x: unknown): boolean {\n    return _isString(x) && x.trim().length === 0\n}\n\nexport const _isNull = function (x: unknown): x is null {\n    // eslint-disable-next-line posthog-js/no-direct-null-check\n    return x === null\n}\n\n/*\n    sometimes you want to check if something is null or undefined\n    that's what this is for\n */\nexport const _isNullish = function (x: unknown): x is null | undefined {\n    return _isUndefined(x) || _isNull(x)\n}\n\nexport const _isDate = function (x: unknown): x is Date {\n    // eslint-disable-next-line posthog-js/no-direct-date-check\n    return toString.call(x) == '[object Date]'\n}\nexport const _isNumber = function (x: unknown): x is number {\n    // eslint-disable-next-line posthog-js/no-direct-number-check\n    return toString.call(x) == '[object Number]'\n}\nexport const _isBoolean = function (x: unknown): x is boolean {\n    // eslint-disable-next-line posthog-js/no-direct-boolean-check\n    return toString.call(x) === '[object Boolean]'\n}\n\nexport const _isDocument = (x: unknown): x is Document => {\n    // eslint-disable-next-line posthog-js/no-direct-document-check\n    return x instanceof Document\n}\n\nexport const _isFormData = (x: unknown): x is FormData => {\n    // eslint-disable-next-line posthog-js/no-direct-form-data-check\n    return x instanceof FormData\n}\n\nexport const _isFile = (x: unknown): x is File => {\n    // eslint-disable-next-line posthog-js/no-direct-file-check\n    return x instanceof File\n}\n","import { _isFunction, _isNull, _isObject, _isUndefined } from '../../utils/type-utils'\n\nexport function isEvent(candidate: unknown): candidate is Event {\n    return !_isUndefined(Event) && isInstanceOf(candidate, Event)\n}\n\nexport function isPlainObject(candidate: unknown): candidate is Record<string, unknown> {\n    return isBuiltin(candidate, 'Object')\n}\n\nexport function isInstanceOf(candidate: unknown, base: any): boolean {\n    try {\n        return candidate instanceof base\n    } catch (_e) {\n        return false\n    }\n}\n\nexport function isPrimitive(\n    candidate: unknown\n): candidate is number | string | boolean | bigint | symbol | null | undefined {\n    return _isNull(candidate) || (!_isObject(candidate) && !_isFunction(candidate))\n}\n\nexport function isError(candidate: unknown): candidate is Error {\n    switch (Object.prototype.toString.call(candidate)) {\n        case '[object Error]':\n        case '[object Exception]':\n        case '[object DOMException]':\n            return true\n        default:\n            return isInstanceOf(candidate, Error)\n    }\n}\n\nexport function isErrorEvent(event: string | Error | Event): event is ErrorEvent {\n    return isBuiltin(event, 'ErrorEvent')\n}\n\nexport function isErrorWithStack(candidate: unknown): candidate is Error {\n    return 'stack' in (candidate as Error)\n}\n\nexport function isBuiltin(candidate: unknown, className: string): boolean {\n    return Object.prototype.toString.call(candidate) === `[object ${className}]`\n}\n\nexport function isDOMException(candidate: unknown): boolean {\n    return isBuiltin(candidate, 'DOMException')\n}\n\nexport function isDOMError(candidate: unknown): boolean {\n    return isBuiltin(candidate, 'DOMError')\n}\n","// copied and adapted from https://github.com/getsentry/sentry-javascript/blob/41fef4b10f3a644179b77985f00f8696c908539f/packages/browser/src/stack-parsers.ts\n// ðŸ’–open source\n\n// This was originally forked from https://github.com/csnover/TraceKit, and was largely\n// re-written as part of raven - js.\n//\n// This code was later copied to the JavaScript mono - repo and further modified and\n// refactored over the years.\n\n// Copyright (c) 2013 Onur Can Cakmak onur.cakmak@gmail.com and all TraceKit contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this\n// software and associated documentation files(the 'Software'), to deal in the Software\n// without restriction, including without limitation the rights to use, copy, modify,\n// merge, publish, distribute, sublicense, and / or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following\n// conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies\n// or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\n// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { _isUndefined } from '../../utils/type-utils'\n\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/\nconst STACKTRACE_FRAME_LIMIT = 50\n\nconst UNKNOWN_FUNCTION = '?'\n\nconst OPERA10_PRIORITY = 10\nconst OPERA11_PRIORITY = 20\nconst CHROME_PRIORITY = 30\nconst WINJS_PRIORITY = 40\nconst GECKO_PRIORITY = 50\n\nexport interface StackFrame {\n    filename?: string\n    function?: string\n    module?: string\n    platform?: string\n    lineno?: number\n    colno?: number\n    abs_path?: string\n    context_line?: string\n    pre_context?: string[]\n    post_context?: string[]\n    in_app?: boolean\n    instruction_addr?: string\n    addr_mode?: string\n    vars?: { [key: string]: any }\n    debug_id?: string\n}\n\nfunction createFrame(filename: string, func: string, lineno?: number, colno?: number): StackFrame {\n    const frame: StackFrame = {\n        filename,\n        function: func,\n        in_app: true, // All browser frames are considered in_app\n    }\n\n    if (!_isUndefined(lineno)) {\n        frame.lineno = lineno\n    }\n\n    if (!_isUndefined(colno)) {\n        frame.colno = colno\n    }\n\n    return frame\n}\n\nexport type StackParser = (stack: string, skipFirst?: number) => StackFrame[]\nexport type StackLineParserFn = (line: string) => StackFrame | undefined\nexport type StackLineParser = [number, StackLineParserFn]\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chromeRegex =\n    /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/\n\nconst chrome: StackLineParserFn = (line) => {\n    const parts = chromeRegex.exec(line)\n\n    if (parts) {\n        const isEval = parts[2] && parts[2].indexOf('eval') === 0 // start of line\n\n        if (isEval) {\n            const subMatch = chromeEvalRegex.exec(parts[2])\n\n            if (subMatch) {\n                // throw out eval line/column and use top-most line/column number\n                parts[2] = subMatch[1] // url\n                parts[3] = subMatch[2] // line\n                parts[4] = subMatch[3] // column\n            }\n        }\n\n        // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n        // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n        const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2])\n\n        return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined)\n    }\n\n    return\n}\n\nexport const chromeStackLineParser: StackLineParser = [CHROME_PRIORITY, chrome]\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n    /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i\n\nconst gecko: StackLineParserFn = (line) => {\n    const parts = geckoREgex.exec(line)\n\n    if (parts) {\n        const isEval = parts[3] && parts[3].indexOf(' > eval') > -1\n        if (isEval) {\n            const subMatch = geckoEvalRegex.exec(parts[3])\n\n            if (subMatch) {\n                // throw out eval line/column and use top-most line number\n                parts[1] = parts[1] || 'eval'\n                parts[3] = subMatch[1]\n                parts[4] = subMatch[2]\n                parts[5] = '' // no column when eval\n            }\n        }\n\n        let filename = parts[3]\n        let func = parts[1] || UNKNOWN_FUNCTION\n        ;[func, filename] = extractSafariExtensionDetails(func, filename)\n\n        return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined)\n    }\n\n    return\n}\n\nexport const geckoStackLineParser: StackLineParser = [GECKO_PRIORITY, gecko]\n\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i\n\nconst winjs: StackLineParserFn = (line) => {\n    const parts = winjsRegex.exec(line)\n\n    return parts\n        ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n        : undefined\n}\n\nexport const winjsStackLineParser: StackLineParser = [WINJS_PRIORITY, winjs]\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i\n\nconst opera10: StackLineParserFn = (line) => {\n    const parts = opera10Regex.exec(line)\n    return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined\n}\n\nexport const opera10StackLineParser: StackLineParser = [OPERA10_PRIORITY, opera10]\n\nconst opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i\n\nconst opera11: StackLineParserFn = (line) => {\n    const parts = opera11Regex.exec(line)\n    return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined\n}\n\nexport const opera11StackLineParser: StackLineParser = [OPERA11_PRIORITY, opera11]\n\nexport const defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser, winjsStackLineParser]\n\nexport function reverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n    if (!stack.length) {\n        return []\n    }\n\n    const localStack = stack.slice(0, STACKTRACE_FRAME_LIMIT)\n\n    localStack.reverse()\n\n    return localStack.map((frame) => ({\n        ...frame,\n        filename: frame.filename || localStack[localStack.length - 1].filename,\n        function: frame.function || '?',\n    }))\n}\n\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n    const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map((p) => p[1])\n\n    return (stack: string, skipFirst = 0): StackFrame[] => {\n        const frames: StackFrame[] = []\n        const lines = stack.split('\\n')\n\n        for (let i = skipFirst; i < lines.length; i++) {\n            const line = lines[i]\n            // Ignore lines over 1kb as they are unlikely to be stack frames.\n            // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n            // input size. Huge strings can result in hangs/Denial of Service:\n            // https://github.com/getsentry/sentry-javascript/issues/2286\n            if (line.length > 1024) {\n                continue\n            }\n\n            // https://github.com/getsentry/sentry-javascript/issues/5459\n            // Remove webpack (error: *) wrappers\n            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line\n\n            // https://github.com/getsentry/sentry-javascript/issues/7813\n            // Skip Error: lines\n            if (cleanedLine.match(/\\S*Error: /)) {\n                continue\n            }\n\n            for (const parser of sortedParsers) {\n                const frame = parser(cleanedLine)\n\n                if (frame) {\n                    frames.push(frame)\n                    break\n                }\n            }\n\n            if (frames.length >= STACKTRACE_FRAME_LIMIT) {\n                break\n            }\n        }\n\n        return reverse(frames)\n    }\n}\n\nexport const defaultStackParser = createStackParser(...defaultStackLineParsers)\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func: string, filename: string): [string, string] => {\n    const isSafariExtension = func.indexOf('safari-extension') !== -1\n    const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1\n\n    return isSafariExtension || isSafariWebExtension\n        ? [\n              func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,\n              isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n          ]\n        : [func, filename]\n}\n","import {\n    isDOMError,\n    isDOMException,\n    isError,\n    isErrorEvent,\n    isErrorWithStack,\n    isEvent,\n    isPlainObject,\n    isPrimitive,\n} from './type-checking'\nimport { defaultStackParser, StackFrame } from './stack-trace'\n\nimport { _isNumber, _isString, _isUndefined } from '../../utils/type-utils'\n\n/**\n * based on the very wonderful MIT licensed Sentry SDK\n */\n\nconst ERROR_TYPES_PATTERN =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i\n\nexport type ErrorEventArgs = [\n    event: string | Event,\n    source?: string | undefined,\n    lineno?: number | undefined,\n    colno?: number | undefined,\n    error?: Error | undefined\n]\n\nexport interface ErrorProperties {\n    $exception_type: string\n    $exception_message: string\n    $exception_source?: string\n    $exception_lineno?: number\n    $exception_colno?: number\n    $exception_DOMException_code?: string\n    $exception_is_synthetic?: boolean\n    $exception_stack_trace_raw?: string\n    $exception_handled?: boolean\n    $exception_personURL?: string\n}\n\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i\n\nfunction getPopSize(ex: Error & { framesToPop?: number }): number {\n    if (ex) {\n        if (_isNumber(ex.framesToPop)) {\n            return ex.framesToPop\n        }\n\n        if (reactMinifiedRegexp.test(ex.message)) {\n            return 1\n        }\n    }\n\n    return 0\n}\n\nexport function parseStackFrames(ex: Error & { framesToPop?: number; stacktrace?: string }): StackFrame[] {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    const stacktrace = ex.stacktrace || ex.stack || ''\n\n    const popSize = getPopSize(ex)\n\n    try {\n        return defaultStackParser(stacktrace, popSize)\n    } catch (e) {\n        // no-empty\n    }\n\n    return []\n}\n\nfunction errorPropertiesFromError(error: Error): ErrorProperties {\n    const frames = parseStackFrames(error)\n\n    return {\n        $exception_type: error.name,\n        $exception_message: error.message,\n        $exception_stack_trace_raw: JSON.stringify(frames),\n    }\n}\n\nfunction errorPropertiesFromString(candidate: string): ErrorProperties {\n    return {\n        $exception_type: 'Error',\n        $exception_message: candidate,\n    }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength = 40): string {\n    const keys = Object.keys(exception)\n    keys.sort()\n\n    if (!keys.length) {\n        return '[object has no keys]'\n    }\n\n    for (let i = keys.length; i > 0; i--) {\n        const serialized = keys.slice(0, i).join(', ')\n        if (serialized.length > maxLength) {\n            continue\n        }\n        if (i === keys.length) {\n            return serialized\n        }\n        return serialized.length <= maxLength ? serialized : `${serialized.slice(0, maxLength)}...`\n    }\n\n    return ''\n}\n\nfunction errorPropertiesFromObject(candidate: Record<string, unknown>): ErrorProperties {\n    return {\n        $exception_type: isEvent(candidate) ? candidate.constructor.name : 'Error',\n        $exception_message: `Non-Error ${'exception'} captured with keys: ${extractExceptionKeysForMessage(candidate)}`,\n    }\n}\n\nexport function errorToProperties([event, source, lineno, colno, error]: ErrorEventArgs): ErrorProperties {\n    // exception type and message are not optional but, it's useful to start off without them enforced\n    let errorProperties: Omit<ErrorProperties, '$exception_type' | '$exception_message'> & {\n        $exception_type?: string\n        $exception_message?: string\n    } = {}\n\n    if (_isUndefined(error) && _isString(event)) {\n        let name = 'Error'\n        let message = event\n        const groups = event.match(ERROR_TYPES_PATTERN)\n        if (groups) {\n            name = groups[1]\n            message = groups[2]\n        }\n        errorProperties = {\n            $exception_type: name,\n            $exception_message: message,\n        }\n    }\n\n    const candidate = error || event\n\n    if (isDOMError(candidate) || isDOMException(candidate)) {\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n        // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n\n        const domException = candidate as unknown as DOMException\n\n        if (isErrorWithStack(candidate)) {\n            errorProperties = errorPropertiesFromError(candidate as Error)\n        } else {\n            const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException')\n            const message = domException.message ? `${name}: ${domException.message}` : name\n            errorProperties = errorPropertiesFromString(message)\n            errorProperties.$exception_type = isDOMError(domException) ? 'DOMError' : 'DOMException'\n            errorProperties.$exception_message = errorProperties.$exception_message || message\n        }\n        if ('code' in domException) {\n            errorProperties['$exception_DOMException_code'] = `${domException.code}`\n        }\n    } else if (isErrorEvent(candidate as ErrorEvent) && (candidate as ErrorEvent).error) {\n        errorProperties = errorPropertiesFromError((candidate as ErrorEvent).error as Error)\n    } else if (isError(candidate)) {\n        errorProperties = errorPropertiesFromError(candidate)\n    } else if (isPlainObject(candidate) || isEvent(candidate)) {\n        // group these by using the keys available on the object\n        const objectException = candidate as Record<string, unknown>\n        errorProperties = errorPropertiesFromObject(objectException)\n        errorProperties.$exception_is_synthetic = true\n    } else {\n        // If none of previous checks were valid, then it must be a string\n        errorProperties.$exception_type = errorProperties.$exception_type || 'Error'\n        errorProperties.$exception_message = errorProperties.$exception_message || candidate\n        errorProperties.$exception_is_synthetic = true\n    }\n\n    return {\n        ...errorProperties,\n        // now we make sure the mandatory fields that were made optional are present\n        $exception_type: errorProperties.$exception_type || 'UnknownErrorType',\n        $exception_message: errorProperties.$exception_message || '',\n        ...(source\n            ? {\n                  $exception_source: source, // TODO get this from URL if not present\n              }\n            : {}),\n        ...(lineno ? { $exception_lineno: lineno } : {}),\n        ...(colno ? { $exception_colno: colno } : {}),\n    }\n}\n\nexport function unhandledRejectionToProperties([ev]: [ev: PromiseRejectionEvent]): ErrorProperties {\n    // dig the object of the rejection out of known event types\n    let error: unknown = ev\n    try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in ev) {\n            error = ev.reason\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in ev && 'reason' in (ev as any).detail) {\n            error = (ev as any).detail.reason\n        }\n    } catch (_oO) {\n        // no-empty\n    }\n\n    // exception type and message are not optional but, it's useful to start off without them enforced\n    let errorProperties: Omit<ErrorProperties, '$exception_type' | '$exception_message'> & {\n        $exception_type?: string\n        $exception_message?: string\n    } = {}\n    if (isPrimitive(error)) {\n        errorProperties = {\n            $exception_message: `Non-Error promise rejection captured with value: ${String(error)}`,\n        }\n    } else {\n        errorProperties = errorToProperties([error as string | Event])\n    }\n    errorProperties.$exception_handled = false\n\n    return {\n        ...errorProperties,\n        // now we make sure the mandatory fields that were made optional are present\n        $exception_type: (errorProperties.$exception_type = 'UnhandledRejection'),\n        $exception_message: (errorProperties.$exception_message =\n            errorProperties.$exception_message || (ev as any).reason || String(error)),\n    }\n}\n","import Config from '../config'\nimport { _isUndefined } from './type-utils'\nimport { assignableWindow, window } from './globals'\n\nconst LOGGER_PREFIX = '[PostHog.js]'\nexport const logger = {\n    _log: (level: 'log' | 'warn' | 'error', ...args: any[]) => {\n        if (\n            window &&\n            (Config.DEBUG || assignableWindow.POSTHOG_DEBUG) &&\n            !_isUndefined(window.console) &&\n            window.console\n        ) {\n            const consoleLog =\n                '__rrweb_original__' in window.console[level]\n                    ? (window.console[level] as any)['__rrweb_original__']\n                    : window.console[level]\n\n            // eslint-disable-next-line no-console\n            consoleLog(LOGGER_PREFIX, ...args)\n        }\n    },\n\n    info: (...args: any[]) => {\n        logger._log('log', ...args)\n    },\n\n    warn: (...args: any[]) => {\n        logger._log('warn', ...args)\n    },\n\n    error: (...args: any[]) => {\n        logger._log('error', ...args)\n    },\n\n    critical: (...args: any[]) => {\n        // Critical errors are always logged to the console\n        // eslint-disable-next-line no-console\n        console.error(LOGGER_PREFIX, ...args)\n    },\n\n    uninitializedWarning: (methodName: string) => {\n        logger.error(`You must initialize PostHog before calling ${methodName}`)\n    },\n}\n","import { window } from '../../utils/globals'\nimport { PostHog } from '../../posthog-core'\nimport { DecideResponse, Properties } from '../../types'\nimport { ErrorEventArgs, ErrorProperties, errorToProperties, unhandledRejectionToProperties } from './error-conversion'\nimport { isPrimitive } from './type-checking'\n\nimport { _isArray, _isObject, _isUndefined } from '../../utils/type-utils'\nimport { logger } from '../../utils/logger'\n\nexport const extendPostHog = (instance: PostHog, response: DecideResponse) => {\n    const exceptionObserver = new ExceptionObserver(instance)\n    exceptionObserver.afterDecideResponse(response)\n    return exceptionObserver\n}\n\nexport class ExceptionObserver {\n    instance: PostHog\n    remoteEnabled: boolean | undefined\n    private originalOnErrorHandler: Window['onerror'] | null | undefined = undefined\n    private originalOnUnhandledRejectionHandler: Window['onunhandledrejection'] | null | undefined = undefined\n\n    private errorsToIgnore: RegExp[] = []\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    startCapturing() {\n        if (!window || !this.isEnabled() || (window.onerror as any)?.__POSTHOG_INSTRUMENTED__) {\n            return\n        }\n\n        try {\n            this.originalOnErrorHandler = window.onerror\n\n            window.onerror = function (this: ExceptionObserver, ...args: ErrorEventArgs): boolean {\n                this.captureException(args)\n\n                if (this.originalOnErrorHandler) {\n                    // eslint-disable-next-line prefer-rest-params\n                    return this.originalOnErrorHandler.apply(this, args)\n                }\n\n                return false\n            }.bind(this)\n            ;(window.onerror as any).__POSTHOG_INSTRUMENTED__ = true\n\n            this.originalOnUnhandledRejectionHandler = window.onunhandledrejection\n\n            window.onunhandledrejection = function (\n                this: ExceptionObserver,\n                ...args: [ev: PromiseRejectionEvent]\n            ): boolean {\n                const errorProperties: ErrorProperties = unhandledRejectionToProperties(args)\n                this.sendExceptionEvent(errorProperties)\n\n                if (window && this.originalOnUnhandledRejectionHandler) {\n                    // eslint-disable-next-line prefer-rest-params\n                    return this.originalOnUnhandledRejectionHandler.apply(window, args)\n                }\n\n                return true\n            }.bind(this)\n            ;(window.onunhandledrejection as any).__POSTHOG_INSTRUMENTED__ = true\n        } catch (e) {\n            logger.error('PostHog failed to start exception autocapture', e)\n            this.stopCapturing()\n        }\n    }\n\n    stopCapturing() {\n        if (!window) {\n            return\n        }\n        if (!_isUndefined(this.originalOnErrorHandler)) {\n            window.onerror = this.originalOnErrorHandler\n            this.originalOnErrorHandler = null\n        }\n        delete (window.onerror as any)?.__POSTHOG_INSTRUMENTED__\n\n        if (!_isUndefined(this.originalOnUnhandledRejectionHandler)) {\n            window.onunhandledrejection = this.originalOnUnhandledRejectionHandler\n            this.originalOnUnhandledRejectionHandler = null\n        }\n        delete (window.onunhandledrejection as any)?.__POSTHOG_INSTRUMENTED__\n    }\n\n    isCapturing() {\n        return !!(window?.onerror as any)?.__POSTHOG_INSTRUMENTED__\n    }\n\n    isEnabled() {\n        return this.remoteEnabled ?? false\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        const autocaptureExceptionsResponse = response.autocaptureExceptions\n        this.remoteEnabled = !!autocaptureExceptionsResponse || false\n        if (\n            !isPrimitive(autocaptureExceptionsResponse) &&\n            'errors_to_ignore' in autocaptureExceptionsResponse &&\n            _isArray(autocaptureExceptionsResponse.errors_to_ignore)\n        ) {\n            const dropRules = autocaptureExceptionsResponse.errors_to_ignore\n\n            this.errorsToIgnore = dropRules.map((rule) => {\n                return new RegExp(rule)\n            })\n        }\n\n        if (this.isEnabled()) {\n            this.startCapturing()\n            logger.info(\n                '[Exception Capture] Remote config for exception autocapture is enabled, starting with config: ',\n                _isObject(autocaptureExceptionsResponse) ? autocaptureExceptionsResponse : {}\n            )\n        }\n    }\n\n    captureException(args: ErrorEventArgs, properties?: Properties) {\n        const errorProperties = errorToProperties(args)\n\n        if (this.errorsToIgnore.some((regex) => regex.test(errorProperties.$exception_message || ''))) {\n            logger.info('[Exception Capture] Ignoring exception based on remote config', errorProperties)\n            return\n        }\n\n        const propertiesToSend = { ...properties, ...errorProperties }\n\n        const posthogHost = this.instance.requestRouter.endpointFor('ui')\n        errorProperties.$exception_personURL = posthogHost + '/person/' + this.instance.get_distinct_id()\n\n        this.sendExceptionEvent(propertiesToSend)\n    }\n\n    /**\n     * :TRICKY: Make sure we batch these requests\n     */\n    sendExceptionEvent(properties: { [key: string]: any }) {\n        this.instance.capture('$exception', properties, {\n            _noTruncate: true,\n            _batchKey: 'exceptionEvent',\n        })\n    }\n}\n","import { extendPostHog } from './extensions/exception-autocapture'\n\nimport { window } from './utils/globals'\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nwindow.extendPostHogWithExceptionAutoCapture = extendPostHog\n\nexport default extendPostHog\n"],"names":["win","window","undefined","global","globalThis","navigator","document","location","fetch","XMLHttpRequest","AbortController","userAgent","assignableWindow","nativeIsArray","Array","isArray","toString","Object","prototype","_isArray","obj","call","_isFunction","f","_isObject","x","_isUndefined","_isString","_isNull","_isNumber","isEvent","candidate","Event","isInstanceOf","base","_e","isPrimitive","isBuiltin","className","concat","isDOMError","WEBPACK_ERROR_REGEXP","STACKTRACE_FRAME_LIMIT","UNKNOWN_FUNCTION","createFrame","filename","func","lineno","colno","frame","function","in_app","chromeRegex","chromeEvalRegex","geckoREgex","geckoEvalRegex","winjsRegex","defaultStackParser","_len","arguments","length","parsers","_key","sortedParsers","sort","a","b","map","p","stack","skipFirst","frames","lines","split","i","line","cleanedLine","test","replace","match","_step","_iterator","_createForOfIteratorHelper","s","n","done","parser","value","push","err","e","localStack","slice","reverse","_objectSpread","apply","parts","exec","indexOf","subMatch","_extractSafariExtensi2","_slicedToArray","extractSafariExtensionDetails","_extractSafariExtensi4","isSafariExtension","isSafariWebExtension","ERROR_TYPES_PATTERN","reactMinifiedRegexp","parseStackFrames","ex","stacktrace","popSize","framesToPop","message","getPopSize","errorPropertiesFromError","error","$exception_type","name","$exception_message","$exception_stack_trace_raw","JSON","stringify","extractExceptionKeysForMessage","exception","maxLength","keys","serialized","join","errorToProperties","_ref","_ref2","event","source","errorProperties","groups","isDOMException","domException","isErrorWithStack","errorPropertiesFromString","code","isErrorEvent","Error","isError","isPlainObject","constructor","errorPropertiesFromObject","$exception_is_synthetic","$exception_source","$exception_lineno","$exception_colno","LOGGER_PREFIX","logger","_log","level","console","consoleLog","args","info","_len2","_key2","warn","_len3","_key3","_len4","_key4","critical","_console","_len5","_key5","uninitializedWarning","methodName","extendPostHog","instance","response","exceptionObserver","ExceptionObserver","afterDecideResponse","_classCallCheck","_defineProperty","this","key","_window$onerror","isEnabled","onerror","__POSTHOG_INSTRUMENTED__","originalOnErrorHandler","captureException","bind","originalOnUnhandledRejectionHandler","onunhandledrejection","_ref3","ev","reason","detail","_oO","String","$exception_handled","unhandledRejectionToProperties","sendExceptionEvent","stopCapturing","_window$onerror2","_window$onunhandledre","_window$onerror3","_this$remoteEnabled","remoteEnabled","autocaptureExceptionsResponse","autocaptureExceptions","errors_to_ignore","dropRules","errorsToIgnore","rule","RegExp","startCapturing","properties","some","regex","propertiesToSend","posthogHost","requestRouter","endpointFor","$exception_personURL","get_distinct_id","capture","_noTruncate","_batchKey","extendPostHogWithExceptionAutoCapture"],"mappings":"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"}